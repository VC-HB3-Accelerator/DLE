/**
 * Copyright (c) 2024-2025 –¢–∞—Ä–∞–±–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á
 * All rights reserved.
 * 
 * This software is proprietary and confidential.
 * Unauthorized copying, modification, or distribution is prohibited.
 * 
 * For licensing inquiries: info@hb3-accelerator.com
 * Website: https://hb3-accelerator.com
 * GitHub: https://github.com/HB3-ACCELERATOR
 */

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');
const { ethers } = require('ethers');
const logger = require('../utils/logger');
const { getRpcUrlByChainId } = require('./rpcProviderService');
const etherscanV2 = require('./etherscanV2VerificationService');
const verificationStore = require('./verificationStore');

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è DLE v2 (Digital Legal Entity)
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å –µ–¥–∏–Ω—ã–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º
 */
class DLEV2Service {
  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ DLE v2 —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
   * @param {Object} dleParams - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã DLE
   * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è DLE
   */
  async createDLE(dleParams) {
    console.log("üî• [DLEV2-SERVICE] –§–£–ù–ö–¶–ò–Ø createDLE –í–´–ó–í–ê–ù–ê!");
    logger.info("üöÄ DEBUG: –í–•–û–î–ò–ú –í createDLE –§–£–ù–ö–¶–ò–Æ");
    let paramsFile = null;
    let tempParamsFile = null;
    try {
      logger.info('–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è DLE v2 —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', dleParams);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      this.validateDLEParams(dleParams);

      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –¥–µ–ø–ª–æ—è
      const deployParams = this.prepareDeployParams(dleParams);

      // –í—ã—á–∏—Å–ª—è–µ–º –∞–¥—Ä–µ—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º —è–≤–ª—è–µ—Ç—Å—è –¥–µ–ø–ª–æ–µ—Ä –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞)
      try {
        const normalizedPk = dleParams.privateKey?.startsWith('0x') ? dleParams.privateKey : `0x${dleParams.privateKey}`;
        const initializerAddress = new ethers.Wallet(normalizedPk).address;
        deployParams.initializerAddress = initializerAddress;
      } catch (e) {
        logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å initializerAddress –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞:', e.message);
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π CREATE2_SALT –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º –≤ secrets
      const { createAndStoreNewCreate2Salt } = require('./secretStore');
      const { salt: create2Salt, key: saltKey } = await createAndStoreNewCreate2Salt({ label: deployParams.name || 'DLEv2' });
      logger.info(`CREATE2_SALT —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: key=${saltKey}`);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      paramsFile = this.saveParamsToFile(deployParams);

      // –ö–æ–ø–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º –∏–º–µ–Ω–µ–º
      tempParamsFile = path.join(__dirname, '../scripts/deploy/current-params.json');
      const deployDir = path.dirname(tempParamsFile);
      if (!fs.existsSync(deployDir)) {
        fs.mkdirSync(deployDir, { recursive: true });
      }
      fs.copyFileSync(paramsFile, tempParamsFile);
      
      // –ì–æ—Ç–æ–≤–∏–º RPC –¥–ª—è –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π
      const rpcUrls = [];
      for (const cid of deployParams.supportedChainIds) {
        logger.info(`–ü–æ–∏—Å–∫ RPC URL –¥–ª—è chain_id: ${cid}`);
        const ru = await getRpcUrlByChainId(cid);
        if (!ru) {
          throw new Error(`RPC URL –¥–ª—è —Å–µ—Ç–∏ —Å chain_id ${cid} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
        }
        rpcUrls.push(ru);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º CREATE2_SALT, RPC_URLS –∏ initializer –≤ —Ñ–∞–π–ª –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      const currentParams = JSON.parse(fs.readFileSync(tempParamsFile, 'utf8'));
      // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ deployParams
      Object.assign(currentParams, deployParams);
      currentParams.CREATE2_SALT = create2Salt;
      currentParams.rpcUrls = rpcUrls;
      currentParams.currentChainId = deployParams.currentChainId || deployParams.supportedChainIds[0];
      const { ethers } = require('ethers');
      currentParams.initializer = dleParams.privateKey ? new ethers.Wallet(dleParams.privateKey.startsWith('0x') ? dleParams.privateKey : `0x${dleParams.privateKey}`).address : "0x0000000000000000000000000000000000000000";
      fs.writeFileSync(tempParamsFile, JSON.stringify(currentParams, null, 2));
      
      logger.info(`–§–∞–π–ª –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∏ –æ–±–Ω–æ–≤–ª–µ–Ω —Å CREATE2_SALT`);

      // –õ—ë–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –≤ –ø–µ—Ä–≤–æ–π —Å–µ—Ç–∏
      {
        const { ethers } = require('ethers');
        const provider = new ethers.JsonRpcProvider(rpcUrls[0]);
        if (dleParams.privateKey) {
          const pk = dleParams.privateKey.startsWith('0x') ? dleParams.privateKey : `0x${dleParams.privateKey}`;
          const walletAddress = new ethers.Wallet(pk, provider).address;
          const balance = await provider.getBalance(walletAddress);
          
          const minBalance = ethers.parseEther("0.00001");
          logger.info(`–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ ${walletAddress}: ${ethers.formatEther(balance)} ETH`);
          if (balance < minBalance) {
            throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ETH –¥–ª—è –¥–µ–ø–ª–æ—è –≤ ${deployParams.supportedChainIds[0]}. –ë–∞–ª–∞–Ω—Å: ${ethers.formatEther(balance)} ETH`);
          }
        }
      }
      if (!dleParams.privateKey) {
        throw new Error('–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω');
      }

      // –°–Ω–∞—á–∞–ª–∞ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
      logger.info("üî® –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –ø–µ—Ä–µ–¥ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º INIT_CODE_HASH...");
      try {
        const { spawn } = require('child_process');
        await new Promise((resolve, reject) => {
          const compile = spawn('npx', ['hardhat', 'compile'], { 
            cwd: process.cwd(),
            stdio: 'inherit'
          });
          
          compile.on('close', (code) => {
            if (code === 0) {
              logger.info('‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
              resolve();
            } else {
              logger.warn(`‚ö†Ô∏è –ö–æ–º–ø–∏–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –∫–æ–¥–æ–º: ${code}`);
              resolve(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
            }
          });
          
          compile.on('error', (error) => {
            logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏:', error.message);
            resolve(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
          });
        });
      } catch (compileError) {
        logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏:', compileError.message);
      }

      // INIT_CODE_HASH –±—É–¥–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω –≤ deploy-multichain.js

      // Factory –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - –¥–µ–ø–ª–æ–π DLE –Ω–∞–ø—Ä—è–º—É—é
      logger.info(`–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—Ä—è–º–æ–º—É –¥–µ–ø–ª–æ—é DLE –≤ —Å–µ—Ç—è—Ö: ${deployParams.supportedChainIds.join(', ')}`);

      // –ú—É–ª—å—Ç–∏—Å–µ—Ç–µ–≤–æ–π –¥–µ–ø–ª–æ–π –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
      logger.info('–ó–∞–ø—É—Å–∫ –º—É–ª—å—Ç–∏-—á–µ–π–Ω –¥–µ–ø–ª–æ—è...');
      logger.info("üîç DEBUG: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—Ä—è–º–æ–º—É –¥–µ–ø–ª–æ—é...");
      
      const result = await this.runDeployMultichain(paramsFile, {
        rpcUrls: rpcUrls,
        chainIds: deployParams.supportedChainIds,
        privateKey: dleParams.privateKey?.startsWith('0x') ? dleParams.privateKey : `0x${dleParams.privateKey}`,
        salt: create2Salt
      });

      logger.info('–î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(result, null, 2));
      logger.info("üîç DEBUG: –ó–∞–ø—É—Å–∫ –º—É–ª—å—Ç–∏—Å–µ—Ç–µ–≤–æ–≥–æ –¥–µ–ø–ª–æ—è...");

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º DLE –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      try {
        logger.info('–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ø–ª–æ—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', JSON.stringify(result, null, 2));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if (!result || typeof result !== 'object') {
          logger.error('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–µ–ø–ª–æ—è:', result);
          throw new Error('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–µ–ø–ª–æ—è');
        }
      logger.info("üîç DEBUG: –í—ã–∑—ã–≤–∞–µ–º runDeployMultichain...");

        // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –º–∞—Å—Å–∏–≤ (–ø—Ä—è–º–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞), –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ
        let deployResult = result;
        if (Array.isArray(result)) {
          logger.info('–†–µ–∑—É–ª—å—Ç–∞—Ç - –º–∞—Å—Å–∏–≤, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç');
          const addresses = result.map(r => r.address);
          const allSame = addresses.every(addr => addr.toLowerCase() === addresses[0].toLowerCase());
          deployResult = {
            success: true,
            data: {
              dleAddress: addresses[0],
              networks: result.map((r, index) => ({
                chainId: r.chainId,
                address: r.address,
                success: true
              })),
              allSame
            }
          };
        }

        const firstNet = Array.isArray(deployResult?.data?.networks) && deployResult.data.networks.length > 0 ? deployResult.data.networks[0] : null;
        const dleData = {
          name: deployParams.name,
          symbol: deployParams.symbol,
          location: deployParams.location,
          coordinates: deployParams.coordinates,
          jurisdiction: deployParams.jurisdiction,
          okvedCodes: deployParams.okvedCodes || [],
          kpp: deployParams.kpp,
          quorumPercentage: deployParams.quorumPercentage,
          initialPartners: deployParams.initialPartners || [],
          initialAmounts: deployParams.initialAmounts || [],
          governanceSettings: {
            quorumPercentage: deployParams.quorumPercentage,
            supportedChainIds: deployParams.supportedChainIds,
            currentChainId: deployParams.currentChainId
          },
          dleAddress: (deployResult?.data?.dleAddress) || (firstNet?.address) || null,
          version: 'v2',
          networks: deployResult?.data?.networks || [],
          createdAt: new Date().toISOString()
        };
        
        // logger.info('–î–∞–Ω–Ω—ã–µ DLE –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', JSON.stringify(dleData, null, 2)); // –£–±—Ä–∞–Ω–æ –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
          
        if (dleData.dleAddress) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ DLE –≤ —Ñ–∞–π–ª
          const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
          const fileName = `dle-v2-${timestamp}.json`;
          const savedPath = path.join(__dirname, '../contracts-data/dles', fileName);
          
          // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
          const dlesDir = path.dirname(savedPath);
          if (!fs.existsSync(dlesDir)) {
            fs.mkdirSync(dlesDir, { recursive: true });
          }
          
          fs.writeFileSync(savedPath, JSON.stringify(dleData, null, 2));
          // logger.info(`DLE –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${savedPath}`); // –£–±—Ä–∞–Ω–æ –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
          
          return {
            success: true,
            data: dleData
          };
        } else {
          throw new Error('DLE –∞–¥—Ä–µ—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è');
        }
      } catch (e) {
        logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É DLE:', e.message);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á Etherscan V2 –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∞–≤—Ç–æ‚Äë–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
      try {
        if (dleParams.etherscanApiKey) {
          const { setSecret } = require('./secretStore');
          await setSecret('ETHERSCAN_V2_API_KEY', dleParams.etherscanApiKey);
        }
      } catch (_) {}

      // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ deploy-multichain.js

      return result;

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ DLE v2:', error);
      throw error;
    } finally {
      try {
        if (paramsFile || tempParamsFile) {
          this.cleanupTempFiles(paramsFile, tempParamsFile);
        }
      } catch (e) {
        logger.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (finally):', e.message);
      }
      try {
        this.pruneOldTempFiles(24 * 60 * 60 * 1000);
      } catch (e) {
        logger.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', e.message);
      }
    }
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã DLE
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  validateDLEParams(params) {
    if (!params.name || params.name.trim() === '') {
      throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ DLE –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
    }

    if (!params.symbol || params.symbol.trim() === '') {
      throw new Error('–°–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }

    if (!params.location || params.location.trim() === '') {
      throw new Error('–ú–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ DLE –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
    }

    if (!params.initialPartners || !Array.isArray(params.initialPartners)) {
      throw new Error('–ü–∞—Ä—Ç–Ω–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
    }

    if (!params.initialAmounts || !Array.isArray(params.initialAmounts)) {
      throw new Error('–°—É–º–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
    }

    if (params.initialPartners.length !== params.initialAmounts.length) {
      throw new Error('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—É–º–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è');
    }

    if (params.initialPartners.length === 0) {
      throw new Error('–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞—Ä—Ç–Ω–µ—Ä');
    }

    if (params.quorumPercentage > 100 || params.quorumPercentage < 1) {
      throw new Error('–ü—Ä–æ—Ü–µ–Ω—Ç –∫–≤–æ—Ä—É–º–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1% –¥–æ 100%');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
    for (let i = 0; i < params.initialPartners.length; i++) {
      if (!ethers.isAddress || !ethers.isAddress(params.initialPartners[i])) {
        throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ ${i + 1}: ${params.initialPartners[i]}`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω—ã —Å–µ—Ç–∏
    if (!params.supportedChainIds || !Array.isArray(params.supportedChainIds) || params.supportedChainIds.length === 0) {
      throw new Error('–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å–µ—Ç—å –¥–ª—è –¥–µ–ø–ª–æ—è');
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if (params.name.length > 100) {
      throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ DLE —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)');
    }

    if (params.symbol.length > 10) {
      throw new Error('–°–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)');
    }

    if (params.location.length > 200) {
      throw new Error('–ú–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—ã —Ç–æ–∫–µ–Ω–æ–≤
    for (let i = 0; i < params.initialAmounts.length; i++) {
      const amount = params.initialAmounts[i];
      if (typeof amount !== 'string' && typeof amount !== 'number') {
        throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å—É–º–º—ã –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ ${i + 1}`);
      }
      
      const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;
      if (isNaN(numAmount) || numAmount <= 0) {
        throw new Error(`–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ ${i + 1}: ${amount}`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
    if (!params.privateKey) {
      throw new Error('–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –¥–µ–ø–ª–æ—è');
    }

    const pk = params.privateKey.startsWith('0x') ? params.privateKey : `0x${params.privateKey}`;
    if (!/^0x[a-fA-F0-9]{64}$/.test(pk)) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –¥–µ–ø–ª–æ–∏–º –≤ mainnet –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const mainnetChains = [1, 137, 56, 42161]; // Ethereum, Polygon, BSC, Arbitrum
    const hasMainnet = params.supportedChainIds.some(id => mainnetChains.includes(id));
    
    if (hasMainnet) {
      logger.warn('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –î–µ–ø–ª–æ–π –≤–∫–ª—é—á–∞–µ—Ç mainnet —Å–µ—Ç–∏! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.');
    }

    logger.info('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ DLE –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É DLE –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI
   * @param {Object} dleData
   * @returns {string} –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
   */
  saveDLEData(dleData) {
    try {
      if (!dleData || !dleData.dleAddress) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ DLE: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç dleAddress');
      }
      const dlesDir = path.join(__dirname, '../contracts-data/dles');
      if (!fs.existsSync(dlesDir)) {
        fs.mkdirSync(dlesDir, { recursive: true });
      }

      // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∞–¥—Ä–µ—Å–æ–º ‚Äî –æ–±–Ω–æ–≤–∏–º –µ–≥–æ
      let targetFile = null;
      try {
        const files = fs.readdirSync(dlesDir);
        for (const file of files) {
          if (file.endsWith('.json') && file.includes('dle-v2-')) {
            const fp = path.join(dlesDir, file);
            try {
              const existing = JSON.parse(fs.readFileSync(fp, 'utf8'));
              if (existing?.dleAddress && existing.dleAddress.toLowerCase() === dleData.dleAddress.toLowerCase()) {
                targetFile = fp;
                // –°–æ–≤–º–µ—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–Ω–µ —É–¥–∞–ª—è—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è —Å–µ—Ç–µ–π/–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç)
                dleData = { ...existing, ...dleData };
                break;
              }
            } catch (_) {}
          }
        }
      } catch (_) {}

      if (!targetFile) {
        const ts = new Date().toISOString().replace(/[:.]/g, '-');
        const fileName = `dle-v2-${ts}.json`;
        targetFile = path.join(dlesDir, fileName);
      }

      fs.writeFileSync(targetFile, JSON.stringify(dleData, null, 2));
      logger.info(`–ö–∞—Ä—Ç–æ—á–∫–∞ DLE —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${targetFile}`);
      return targetFile;
    } catch (e) {
      logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ DLE:', e);
      throw e;
    }
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–µ–ø–ª–æ—è
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã DLE –∏–∑ —Ñ–æ—Ä–º—ã
   * @returns {Object} - –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞ –¥–µ–ø–ª–æ—è
   */
  prepareDeployParams(params) {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –æ–±—ä–µ–∫—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π
    const deployParams = { ...params };

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—É–º–º—ã –∏–∑ —Å—Ç—Ä–æ–∫ –∏–ª–∏ —á–∏—Å–µ–ª –≤ BigNumber, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (deployParams.initialAmounts && Array.isArray(deployParams.initialAmounts)) {
      deployParams.initialAmounts = deployParams.initialAmounts.map(rawAmount => {
        // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏, —Ç–∞–∫ –∏ —á–∏—Å–ª–∞; –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base units (18 –∑–Ω–∞–∫–æ–≤)
        try {
          if (typeof rawAmount === 'number' && Number.isFinite(rawAmount)) {
            return ethers.parseUnits(rawAmount.toString(), 18).toString();
          }
          if (typeof rawAmount === 'string') {
            const a = rawAmount.trim();
            if (a.startsWith('0x')) {
              // –£–∂–µ base units (hex BigNumber) ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
              return BigInt(a).toString();
            }
            // –î–µ—Å—è—Ç–∏—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base units
            return ethers.parseUnits(a, 18).toString();
          }
          // BigInt –∏–ª–∏ –∏–Ω—ã–µ —Ç–∏–ø—ã ‚Äî –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞
          return rawAmount.toString();
        } catch (e) {
          // –§–æ–ª–±—ç–∫: –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Å—Ç—Ä–æ–∫–µ
          return String(rawAmount);
        }
      });
    }

    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ okvedCodes - —ç—Ç–æ –º–∞—Å—Å–∏–≤
    if (!Array.isArray(deployParams.okvedCodes)) {
      deployParams.okvedCodes = [];
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º kpp –≤ —á–∏—Å–ª–æ
    if (deployParams.kpp) {
      deployParams.kpp = parseInt(deployParams.kpp) || 0;
    } else {
      deployParams.kpp = 0;
    }

    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ supportedChainIds - —ç—Ç–æ –º–∞—Å—Å–∏–≤
    if (!Array.isArray(deployParams.supportedChainIds)) {
      deployParams.supportedChainIds = [1]; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Ethereum
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º currentChainId –∫–∞–∫ –ø–µ—Ä–≤—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ—Ç—å
    if (deployParams.supportedChainIds.length > 0) {
      deployParams.currentChainId = deployParams.supportedChainIds[0];
    } else {
      deployParams.currentChainId = 1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Ethereum
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º logoURI
    if (deployParams.logoURI) {
      // –ï—Å–ª–∏ logoURI –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å, –¥–µ–ª–∞–µ–º –µ–≥–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º
      if (deployParams.logoURI.startsWith('/uploads/')) {
        deployParams.logoURI = `http://localhost:8000${deployParams.logoURI}`;
      }
      // –ï—Å–ª–∏ —ç—Ç–æ placeholder, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
      if (deployParams.logoURI.includes('placeholder.com')) {
        // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
      }
    }

    return deployParams;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
   * @returns {string} - –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
   */
  saveParamsToFile(params) {
    const tempDir = path.join(__dirname, '../temp');
    
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    
    const fileName = `dle-v2-params-${Date.now()}.json`;
    const filePath = path.join(tempDir, fileName);
    
    fs.writeFileSync(filePath, JSON.stringify(params, null, 2));
    
    return filePath;
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è DLE v2
   * @param {string} paramsFile - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
   * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ø–ª–æ—è
   */
  runDeployScript(paramsFile, extraEnv = {}) {
    return new Promise((resolve, reject) => {
      const scriptPath = path.join(__dirname, '../scripts/deploy/deploy-multichain.js');
      if (!fs.existsSync(scriptPath)) {
        reject(new Error('–°–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è DLE v2 –Ω–µ –Ω–∞–π–¥–µ–Ω: ' + scriptPath));
        return;
      }

      const envVars = {
        ...process.env,
        RPC_URL: extraEnv.rpcUrl,
        PRIVATE_KEY: extraEnv.privateKey
      };

      const hardhatProcess = spawn('npx', ['hardhat', 'run', scriptPath], {
        cwd: path.join(__dirname, '..'),
        env: envVars,
        stdio: ['inherit', 'pipe', 'pipe']
      });

      let stdout = '';
      let stderr = '';

      hardhatProcess.stdout.on('data', (data) => {
        stdout += data.toString();
        logger.info(`[DLE v2 Deploy] ${data.toString().trim()}`);
      });

      hardhatProcess.stderr.on('data', (data) => {
        stderr += data.toString();
        logger.error(`[DLE v2 Deploy Error] ${data.toString().trim()}`);
      });

      hardhatProcess.on('close', (code) => {
        try {
          const result = this.extractDeployResult(stdout);
          resolve(result);
        } catch (error) {
          logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–µ–ø–ª–æ—è DLE v2:', error);
          if (code === 0) {
            reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º DLE v2'));
          } else {
            reject(new Error(`–°–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è DLE v2 –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}: ${stderr}`));
          }
        }
      });

      hardhatProcess.on('error', (error) => {
        logger.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ –¥–µ–ø–ª–æ—è DLE v2:', error);
        reject(error);
      });
    });
  }

  // –ú—É–ª—å—Ç–∏—Å–µ—Ç–µ–≤–æ–π –¥–µ–ø–ª–æ–π
  runDeployMultichain(paramsFile, opts = {}) {
    return new Promise((resolve, reject) => {
      const scriptPath = path.join(__dirname, '../scripts/deploy/deploy-multichain.js');
      if (!fs.existsSync(scriptPath)) return reject(new Error('–°–∫—Ä–∏–ø—Ç –º—É–ª—å—Ç–∏—Å–µ—Ç–µ–≤–æ–≥–æ –¥–µ–ø–ª–æ—è –Ω–µ –Ω–∞–π–¥–µ–Ω: ' + scriptPath));
      
      const envVars = {
        ...process.env,
        PRIVATE_KEY: opts.privateKey
      };
      
      const p = spawn('npx', ['hardhat', 'run', scriptPath], { 
        cwd: path.join(__dirname, '..'), 
        env: envVars, 
        stdio: ['inherit', 'pipe', 'pipe'] 
      });
      
      let stdout = '', stderr = '';
      p.stdout.on('data', (d) => { 
        stdout += d.toString(); 
        logger.info(`[MULTICHAIN_DEPLOY] ${d.toString().trim()}`); 
      });
      p.stderr.on('data', (d) => { 
        stderr += d.toString(); 
        logger.error(`[MULTICHAIN_DEPLOY_ERR] ${d.toString().trim()}`); 
      });
      
      p.on('close', (code) => {
        try {
          // –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ MULTICHAIN_DEPLOY_RESULT
          const resultMatch = stdout.match(/MULTICHAIN_DEPLOY_RESULT\s+(\[.*\])/);
          
          if (resultMatch) {
            const deployResults = JSON.parse(resultMatch[1]);
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            const addresses = deployResults.map(r => r.address);
            const allSame = addresses.every(addr => addr.toLowerCase() === addresses[0].toLowerCase());
            
            resolve({
              success: true,
              data: {
                dleAddress: addresses[0],
                networks: deployResults.map((r, index) => ({
                  chainId: r.chainId,
                  address: r.address,
                  success: true
                })),
                allSame
              }
            });
          } else {
            // Fallback: –∏—â–µ–º –∞–¥—Ä–µ—Å–∞ DLE –≤ –≤—ã–≤–æ–¥–µ –ø–æ –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
            const dleAddressMatches = stdout.match(/\[MULTI_DBG\] chainId=\d+ DLE deployed at=(0x[a-fA-F0-9]{40})/g);
            if (!dleAddressMatches || dleAddressMatches.length === 0) {
              throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∞–¥—Ä–µ—Å–∞ DLE –≤ –≤—ã–≤–æ–¥–µ');
            }
            
            const addresses = dleAddressMatches.map(match => match.match(/(0x[a-fA-F0-9]{40})/)[1]);
            const addr = addresses[0];
            const allSame = addresses.every(x => x.toLowerCase() === addr.toLowerCase());
            
            if (!allSame) {
              logger.warn('–ê–¥—Ä–µ—Å–∞ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –º–µ–∂–¥—É —Å–µ—Ç—è–º–∏ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, —Å–æ—Ö—Ä–∞–Ω—é –ø–æ-—Å–µ—Ç–æ—á–Ω–æ', { addresses });
            }
            
            resolve({ 
              success: true, 
              data: { 
                dleAddress: addr, 
                networks: addresses.map((address, index) => ({ 
                  chainId: opts.chainIds[index] || index + 1,
                  address, 
                  success: true 
                })), 
                allSame 
              } 
            });
          }
        } catch (e) {
          reject(new Error(`–û—à–∏–±–∫–∞ –º—É–ª—å—Ç–∏—Å–µ—Ç–µ–≤–æ–≥–æ –¥–µ–ø–ª–æ—è: ${e.message}\nSTDOUT:${stdout}\nSTDERR:${stderr}`));
        }
      });
      
      p.on('error', (e) => reject(e));
    });
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ø–ª–æ—è –∏–∑ stdout
   * @param {string} stdout - –í—ã–≤–æ–¥ —Å–∫—Ä–∏–ø—Ç–∞
   * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ø–ª–æ—è
   */
  extractDeployResult(stdout) {
    // –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ MULTICHAIN_DEPLOY_RESULT
    const resultMatch = stdout.match(/MULTICHAIN_DEPLOY_RESULT\s+(\[.*?\])/);
    
    if (resultMatch) {
      try {
        const result = JSON.parse(resultMatch[1]);
        return result;
      } catch (e) {
        logger.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', e);
      }
    }

    // Fallback: –∏—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∞–¥—Ä–µ—Å–∞–º–∏ –≤ –≤—ã–≤–æ–¥–µ –ø–æ –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
    const dleAddressMatch = stdout.match(/\[MULTI_DBG\] chainId=\d+ DLE deployed at=(0x[a-fA-F0-9]{40})/);

    if (dleAddressMatch) {
      return {
        success: true,
        data: {
          dleAddress: dleAddressMatch[1],
          version: 'v2'
        }
      };
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∞–¥—Ä–µ—Å, –≤—ã–≤–æ–¥–∏–º –≤–µ—Å—å stdout –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('–ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥ —Å–∫—Ä–∏–ø—Ç–∞:', stdout);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞–¥—Ä–µ—Å DLE –∏–∑ –≤—ã–≤–æ–¥–∞ —Å–∫—Ä–∏–ø—Ç–∞');
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
   * @param {string} paramsFile - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
   * @param {string} tempParamsFile - –ü—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
   */
  cleanupTempFiles(paramsFile, tempParamsFile) {
    try {
      if (fs.existsSync(paramsFile)) {
        fs.unlinkSync(paramsFile);
      }
      if (fs.existsSync(tempParamsFile)) {
        fs.unlinkSync(tempParamsFile);
      }
    } catch (error) {
      logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:', error);
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è —Å—Ç–∞—Ä—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
   * @param {number} maxAgeMs - –ú–∞–∫—Å. –≤–æ–∑—Ä–∞—Å—Ç —Ñ–∞–π–ª–æ–≤ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24—á)
   */
  pruneOldTempFiles(maxAgeMs = 24 * 60 * 60 * 1000) {
    const tempDir = path.join(__dirname, '../temp');
    try {
      if (!fs.existsSync(tempDir)) return;
      const now = Date.now();
      const files = fs.readdirSync(tempDir).filter(f => f.startsWith('dle-v2-params-') && f.endsWith('.json'));
      for (const f of files) {
        const fp = path.join(tempDir, f);
        try {
          const st = fs.statSync(fp);
          if (now - st.mtimeMs > maxAgeMs) {
            fs.unlinkSync(fp);
            logger.info(`–£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${fp}`);
          }
        } catch (e) {
          logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª ${fp}: ${e.message}`);
        }
      }
    } catch (e) {
      logger.warn('–û—à–∏–±–∫–∞ pruneOldTempFiles:', e.message);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö DLE v2
   * @returns {Array<Object>} - –°–ø–∏—Å–æ–∫ DLE v2
   */
  getAllDLEs() {
    try {
      const dlesDir = path.join(__dirname, '../contracts-data/dles');
      
      if (!fs.existsSync(dlesDir)) {
        return [];
      }
      
      const files = fs.readdirSync(dlesDir);
      const allDles = files
        .filter(file => file.endsWith('.json') && file.includes('dle-v2-'))
        .map(file => {
          try {
            const data = JSON.parse(fs.readFileSync(path.join(dlesDir, file), 'utf8'));
            return { ...data, _fileName: file };
          } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${file}:`, error);
            return null;
          }
        })
        .filter(dle => dle !== null);

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º DLE –ø–æ –º—É–ª—å—Ç–∏—á–µ–π–Ω –¥–µ–ø–ª–æ—è–º
      const groupedDles = this.groupMultichainDLEs(allDles);
      
      return groupedDles;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ DLE v2:', error);
      return [];
    }
  }

  /**
   * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç DLE –ø–æ –º—É–ª—å—Ç–∏—á–µ–π–Ω –¥–µ–ø–ª–æ—è–º
   * @param {Array<Object>} allDles - –í—Å–µ DLE –∏–∑ —Ñ–∞–π–ª–æ–≤
   * @returns {Array<Object>} - –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ DLE
   */
  groupMultichainDLEs(allDles) {
    const groups = new Map();
    
    for (const dle of allDles) {
      // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      const groupKey = this.createGroupKey(dle);
      
      if (!groups.has(groupKey)) {
        groups.set(groupKey, {
          // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ DLE
          name: dle.name,
          symbol: dle.symbol,
          location: dle.location,
          coordinates: dle.coordinates,
          jurisdiction: dle.jurisdiction,
          oktmo: dle.oktmo,
          okvedCodes: dle.okvedCodes,
          kpp: dle.kpp,
          quorumPercentage: dle.quorumPercentage,
          version: dle.version || 'v2',
          deployedMultichain: true,
          // –ú—É–ª—å—Ç–∏—á–µ–π–Ω –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          networks: [],
          // –ú–æ–¥—É–ª–∏ (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤–æ –≤—Å–µ—Ö —Å–µ—Ç—è—Ö)
          modules: dle.modules,
          // –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è (—Å–∞–º–æ–µ —Ä–∞–Ω–Ω–µ–µ)
          creationTimestamp: dle.creationTimestamp,
          creationBlock: dle.creationBlock
        });
      }
      
      const group = groups.get(groupKey);
      
      // –ï—Å–ª–∏ —É DLE –µ—Å—Ç—å –º–∞—Å—Å–∏–≤ networks, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      if (dle.networks && Array.isArray(dle.networks)) {
        for (const network of dle.networks) {
          group.networks.push({
            chainId: network.chainId,
            dleAddress: network.address || network.dleAddress,
            factoryAddress: network.factoryAddress,
            rpcUrl: network.rpcUrl || this.getRpcUrlForChain(network.chainId)
          });
        }
      } else {
        // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–∏ –∏–∑ –∫–æ—Ä–Ω—è DLE
        group.networks.push({
          chainId: dle.chainId,
          dleAddress: dle.dleAddress,
          factoryAddress: dle.factoryAddress,
          rpcUrl: dle.rpcUrl || this.getRpcUrlForChain(dle.chainId)
        });
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞ —Å–∞–º–æ–µ —Ä–∞–Ω–Ω–µ–µ
      if (dle.creationTimestamp && (!group.creationTimestamp || dle.creationTimestamp < group.creationTimestamp)) {
        group.creationTimestamp = dle.creationTimestamp;
      }
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≥—Ä—É–ø–ø—ã –≤ –º–∞—Å—Å–∏–≤
    return Array.from(groups.values()).map(group => ({
      ...group,
      // –û—Å–Ω–æ–≤–Ω–æ–π –∞–¥—Ä–µ—Å DLE (–∏–∑ –ø–µ—Ä–≤–æ–π —Å–µ—Ç–∏)
      dleAddress: group.networks[0]?.dleAddress,
      // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ç–µ–π
      totalNetworks: group.networks.length,
      // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ç–∏
      supportedChainIds: group.networks.map(n => n.chainId)
    }));
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ DLE
   * @param {Object} dle - –î–∞–Ω–Ω—ã–µ DLE
   * @returns {string} - –ö–ª—é—á –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
   */
  createGroupKey(dle) {
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º DLE
    const keyParts = [
      dle.name,
      dle.symbol,
      dle.location,
      dle.coordinates,
      dle.jurisdiction,
      dle.oktmo,
      dle.kpp,
      dle.quorumPercentage,
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º okvedCodes –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
      Array.isArray(dle.okvedCodes) ? dle.okvedCodes.sort().join(',') : '',
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º supportedChainIds –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
      Array.isArray(dle.supportedChainIds) ? dle.supportedChainIds.sort().join(',') : ''
    ];
    
    return keyParts.join('|');
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç RPC URL –¥–ª—è —Å–µ—Ç–∏
   * @param {number} chainId - ID —Å–µ—Ç–∏
   * @returns {string|null} - RPC URL
   */
  getRpcUrlForChain(chainId) {
    try {
      // –ü—Ä–æ—Å—Ç–∞—è –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ç–µ–π
      const rpcMap = {
        1: 'https://eth-mainnet.g.alchemy.com/v2/demo',
        11155111: 'https://eth-sepolia.nodereal.io/v1/56dec8028bae4f26b76099a42dae2b52',
        17000: 'https://ethereum-holesky.publicnode.com',
        421614: 'https://sepolia-rollup.arbitrum.io/rpc',
        84532: 'https://sepolia.base.org'
      };
      return rpcMap[chainId] || null;
    } catch (error) {
      return null;
    }
  }




  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å—ã –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–µ—Ç—è—Ö
   * @param {number[]} chainIds - –ú–∞—Å—Å–∏–≤ chainId –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @param {string} privateKey - –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
   * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤
   */
  async checkBalances(chainIds, privateKey) {
    const { getRpcUrlByChainId } = require('./rpcProviderService');
    const { ethers } = require('ethers');
    const balances = [];
    const insufficient = [];

    for (const chainId of chainIds) {
      try {
        const rpcUrl = await getRpcUrlByChainId(chainId);
        if (!rpcUrl) {
          balances.push({
            chainId,
            balanceEth: '0',
            ok: false,
            error: 'RPC URL –Ω–µ –Ω–∞–π–¥–µ–Ω'
          });
          insufficient.push(chainId);
          continue;
        }

        const provider = new ethers.JsonRpcProvider(rpcUrl);
        const wallet = new ethers.Wallet(privateKey, provider);
        const balance = await provider.getBalance(wallet.address);
        
        const balanceEth = ethers.formatEther(balance);
        const minBalance = ethers.parseEther("0.001");
        const ok = balance >= minBalance;

        balances.push({
          chainId,
          address: wallet.address,
          balanceEth,
          ok
        });

        if (!ok) {
          insufficient.push(chainId);
        }

      } catch (error) {
        balances.push({
          chainId,
          balanceEth: '0',
          ok: false,
          error: error.message
        });
        insufficient.push(chainId);
      }
    }

    return {
      balances,
      insufficient,
      allSufficient: insufficient.length === 0
    };
  }


}

module.exports = new DLEV2Service(); 