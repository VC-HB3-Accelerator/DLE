#!/bin/bash
# Copyright (c) 2024-2025 –¢–∞—Ä–∞–±–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á
# All rights reserved.
# This software is proprietary and confidential.
# For licensing inquiries: info@hb3-accelerator.com

# –í—ã–≤–æ–¥ —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
print_green() {
  echo -e "\e[32m$1\e[0m"
}

print_blue() {
  echo -e "\e[34m$1\e[0m"
}

print_yellow() {
  echo -e "\e[33m$1\e[0m"
}

print_red() {
  echo -e "\e[31m$1\e[0m"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∏ Docker Compose
check_docker() {
  print_blue "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker..."
  if ! command -v docker &> /dev/null; then
    print_yellow "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
      print_blue "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –¥–ª—è Linux..."
      curl -fsSL https://get.docker.com -o get-docker.sh
      sudo sh get-docker.sh
      rm get-docker.sh
      
      # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker
      print_blue "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker..."
      sudo usermod -aG docker $USER
      
      print_green "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
      print_yellow "‚ö†Ô∏è  –í–ê–ñ–ù–û: –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:"
      print_yellow "   1. newgrp docker  (–ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ)"
      print_yellow "   2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª"
      print_yellow "   3. –ü–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É"
      print_blue "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã..."
      read
    else
      print_yellow "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –≤—Ä—É—á–Ω—É—é: https://docs.docker.com/get-docker/"
      print_yellow "–î–ª—è Windows/Mac: —Å–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop."
      exit 1
    fi
  fi
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ Docker
  if ! docker ps &> /dev/null; then
    print_yellow "‚ö†Ô∏è  –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Docker –∫–æ–º–∞–Ω–¥."
    print_blue "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—Ä—É–ø–ø–µ docker
    if ! groups $USER | grep -q docker; then
      sudo usermod -aG docker $USER
      print_yellow "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É docker."
      print_yellow "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π: newgrp docker"
      print_yellow "–ò–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞."
      exit 0
    else
      print_red "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ docker, –Ω–æ –ø—Ä–∞–≤–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç."
      print_yellow "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:"
      print_yellow "  1. newgrp docker"
      print_yellow "  2. –ü–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É"
      print_yellow "  3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Docker: sudo systemctl restart docker"
      exit 1
    fi
  fi
  
  print_green "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω."

  print_blue "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose..."
  if ! docker compose version &> /dev/null; then
    print_yellow "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ."
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
      print_blue "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose –ø–ª–∞–≥–∏–Ω–∞..."
      sudo apt-get update
      sudo apt-get install -y docker-compose-plugin
      
      if ! docker compose version &> /dev/null; then
        print_red "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker Compose –ø–ª–∞–≥–∏–Ω."
        print_yellow "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å Docker: https://docs.docker.com/compose/install/"
        exit 1
      fi
    else
      print_yellow "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose –≤—Ä—É—á–Ω—É—é: https://docs.docker.com/compose/install/"
      exit 1
    fi
  fi
  print_green "Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
}

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ git
print_no_git_instructions() {
  print_blue "–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç git, —Å–∫–∞—á–∞–π—Ç–µ –∞—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–∞ —Å GitHub:"
  print_yellow "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://github.com/VC-HB3-Accelerator/DLE"
  print_yellow "2. –ù–∞–∂–º–∏—Ç–µ 'Code' > 'Download ZIP'"
  print_yellow "3. –†–∞—Å–ø–∞–∫—É–π—Ç–µ –∞—Ä—Ö–∏–≤ –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞"
  print_yellow "4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç: ./setup.sh"
}

# –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
create_encryption_key() {
  print_blue "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è..."
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ OpenSSL
  if ! command -v openssl &> /dev/null; then
    print_yellow "OpenSSL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∫–∞..."
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
      sudo apt-get update && sudo apt-get install -y openssl
    else
      print_red "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OpenSSL –≤—Ä—É—á–Ω—É—é: https://www.openssl.org/"
      exit 1
    fi
  fi
  
  # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –∫–ª—é—á–µ–π
  mkdir -p ./ssl/keys
  
  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
  if [ ! -f "./ssl/keys/full_db_encryption.key" ]; then
    print_blue "üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è..."
    openssl rand -base64 32 > ./ssl/keys/full_db_encryption.key
    chmod 600 ./ssl/keys/full_db_encryption.key
    print_green "‚úÖ –ö–ª—é—á —Å–æ–∑–¥–∞–Ω: ./ssl/keys/full_db_encryption.key"
  else
    print_green "‚úÖ –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
  fi
}

# –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–æ–≤
pull_images() {
  print_blue "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–æ–≤ Docker..."
  
  images=("node:20-slim" "postgres:16" "ollama/ollama:latest")
  
  for img in "${images[@]}"; do
    print_blue "–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–∞: $img"
    docker pull $img
    if [ $? -ne 0 ]; then
      print_yellow "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞–∑ $img, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É..."
    else
      print_green "–û–±—Ä–∞–∑ $img —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω."
    fi
  done
}





# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞
start_project() {
  print_blue "–ó–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞..."
  
  # –°–Ω–∞—á–∞–ª–∞ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
  print_blue "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
  docker compose down
  
  # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ Docker Compose
  print_blue "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ (PostgreSQL, Ollama, Backend, Frontend)..."
  docker compose up -d
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å
  if [ $? -eq 0 ]; then
    print_green "–°–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã!"
    
    # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π Ollama
    print_blue "–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π Ollama..."
    print_yellow "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç..."
    
    # –ñ–¥–µ–º, –ø–æ–∫–∞ Ollama –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
    print_blue "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Ollama..."
    for i in {1..30}; do
      if curl -s http://localhost:11434/api/tags > /dev/null 2>&1; then
        print_green "Ollama –≥–æ—Ç–æ–≤!"
        break
      fi
      if [ $i -eq 30 ]; then
        print_yellow "Ollama –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ 60 —Å–µ–∫—É–Ω–¥, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏..."
        break
      fi
      sleep 2
    done
    
    # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
    if curl -s http://localhost:11434/api/tags > /dev/null 2>&1; then
      print_blue "–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ qwen2.5:7b..."
      curl -X POST http://localhost:11434/api/generate -d '{"model": "qwen2.5:7b", "prompt": "test", "stream": false}' > /dev/null 2>&1
      
      print_blue "–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ mxbai-embed-large:latest..."
      curl -X POST http://localhost:11434/api/generate -d '{"model": "mxbai-embed-large:latest", "prompt": "test", "stream": false}' > /dev/null 2>&1
      
      print_green "‚úÖ –ú–æ–¥–µ–ª–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏!"
    fi
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    print_blue "üîë –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏..."
    ./scripts/internal/db/db_init_helper.sh 2>/dev/null || print_yellow "–¢–æ–∫–µ–Ω—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏–ª–∏ —Å–∫—Ä–∏–ø—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    
    # –°–æ–∑–¥–∞—ë–º —Ñ—É–Ω–∫—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –≤ PostgreSQL
    print_blue "üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –≤ PostgreSQL..."
    docker exec dapp-postgres psql -U dapp_user -d dapp_db << 'EOF' 2>/dev/null || print_yellow "–§—É–Ω–∫—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ë–î –Ω–µ –≥–æ—Ç–æ–≤–∞"
-- –°–æ–∑–¥–∞—ë–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
CREATE EXTENSION IF NOT EXISTS pgcrypto;

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
CREATE OR REPLACE FUNCTION encrypt_text(data text, key text)
RETURNS text AS $$
BEGIN
    IF data IS NULL THEN
        RETURN NULL;
    END IF;
    RETURN encode(encrypt_iv(data::bytea, decode(key, 'base64'), decode('000102030405060708090A0B0C0D0E0F', 'hex'), 'aes-cbc'), 'base64');
END;
$$ LANGUAGE plpgsql;

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
CREATE OR REPLACE FUNCTION decrypt_text(encrypted_data text, key text)
RETURNS text AS $$
BEGIN
    IF encrypted_data IS NULL THEN
        RETURN NULL;
    END IF;
    RETURN convert_from(decrypt_iv(decode(encrypted_data, 'base64'), decode(key, 'base64'), decode('000102030405060708090A0B0C0D0E0F', 'hex'), 'aes-cbc'), 'utf8');
END;
$$ LANGUAGE plpgsql;

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è JSON
CREATE OR REPLACE FUNCTION encrypt_json(data jsonb, key text)
RETURNS text AS $$
BEGIN
    IF data IS NULL THEN
        RETURN NULL;
    END IF;
    RETURN encode(encrypt_iv(data::text::bytea, decode(key, 'base64'), decode('000102030405060708090A0B0C0D0E0F', 'hex'), 'aes-cbc'), 'base64');
END;
$$ LANGUAGE plpgsql;

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ JSON
CREATE OR REPLACE FUNCTION decrypt_json(encrypted_data text, key text)
RETURNS jsonb AS $$
BEGIN
    IF encrypted_data IS NULL THEN
        RETURN NULL;
    END IF;
    RETURN convert_from(decrypt_iv(decode(encrypted_data, 'base64'), decode(key, 'base64'), decode('000102030405060708090A0B0C0D0E0F', 'hex'), 'aes-cbc'), 'utf8')::jsonb;
END;
$$ LANGUAGE plpgsql;
EOF
    
    print_green "----------------------------------------"
    print_green "–ü—Ä–æ–µ–∫—Ç Digital_Legal_Entity(DLE) –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å–∞–º:"
    print_green "Frontend: http://localhost:5173"
    print_green "Backend API: http://localhost:8000"
    print_green "Ollama API: http://localhost:11434"
    print_green "PostgreSQL: localhost:5432"
    print_green "----------------------------------------"
    print_green "üîê –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: ./ssl/keys/full_db_encryption.key"
    print_green "üìã –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
    print_green "----------------------------------------"
    print_green "–ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
    print_green "----------------------------------------"
  else
    print_red "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–æ–≤."
    print_yellow "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∫–æ–º–∞–Ω–¥–æ–π: docker compose logs"
    print_yellow "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞: docker compose logs [service]"
    print_yellow "–ù–∞–ø—Ä–∏–º–µ—Ä: docker compose logs backend"
  fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
  print_blue "==============================================="
  print_blue "   –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Digital_Legal_Entity(DLE)"
  print_blue "==============================================="

  print_yellow "\n–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç git, —Å–∫–∞—á–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –∞—Ä—Ö–∏–≤–æ–º —Å GitHub!"
  print_no_git_instructions

  check_docker
  create_encryption_key
  pull_images
  start_project
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main 