/**
 * Composable –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π DLE
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —Ö–µ—à–∞–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */

import { ref, computed } from 'vue';

export function useProposalValidation() {
  const validatedProposals = ref([]);
  const validationErrors = ref([]);
  const isValidating = ref(false);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ö–µ—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const isValidTransactionHash = (hash) => {
    if (!hash) return false;
    return /^0x[a-fA-F0-9]{64}$/.test(hash);
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∞–¥—Ä–µ—Å–∞
  const isValidAddress = (address) => {
    if (!address) return false;
    return /^0x[a-fA-F0-9]{40}$/.test(address);
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ chainId
  const isValidChainId = (chainId) => {
    const validChainIds = [1, 11155111, 17000, 421614, 84532, 8453]; // Mainnet, Sepolia, Holesky, Arbitrum Sepolia, Base Sepolia, Base
    return validChainIds.includes(Number(chainId));
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
  const validateProposal = (proposal) => {
    const errors = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!proposal.id && proposal.id !== 0) {
      errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');
    }

    if (!proposal.description || proposal.description.trim() === '') {
      errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');
    }

    if (!proposal.transactionHash) {
      errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    } else if (!isValidTransactionHash(proposal.transactionHash)) {
      errors.push('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ö–µ—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    }

    if (!proposal.initiator) {
      errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');
    } else if (!isValidAddress(proposal.initiator)) {
      errors.push('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞');
    }

    if (!proposal.chainId) {
      errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç chainId');
    } else if (!isValidChainId(proposal.chainId)) {
      errors.push('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π chainId');
    }

    if (proposal.state === undefined || proposal.state === null) {
      errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    if (typeof proposal.forVotes !== 'number' || proposal.forVotes < 0) {
      errors.push('–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤ "–∑–∞"');
    }

    if (typeof proposal.againstVotes !== 'number' || proposal.againstVotes < 0) {
      errors.push('–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤ "–ø—Ä–æ—Ç–∏–≤"');
    }

    if (typeof proposal.quorumRequired !== 'number' || proposal.quorumRequired < 0) {
      errors.push('–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –∫–≤–æ—Ä—É–º–∞');
    }

    return {
      isValid: errors.length === 0,
      errors
    };
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
  const validateProposals = (proposals) => {
    isValidating.value = true;
    validationErrors.value = [];
    validatedProposals.value = [];

    const validProposals = [];
    const allErrors = [];

    proposals.forEach((proposal, index) => {
      const validation = validateProposal(proposal);
      
      if (validation.isValid) {
        validProposals.push(proposal);
      } else {
        allErrors.push({
          proposalIndex: index,
          proposalId: proposal.id,
          errors: validation.errors
        });
      }
    });

    validatedProposals.value = validProposals;
    validationErrors.value = allErrors;
    isValidating.value = false;

    console.log(`[Proposal Validation] –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${proposals.length}`);
    console.log(`[Proposal Validation] –í–∞–ª–∏–¥–Ω—ã—Ö: ${validProposals.length}`);
    console.log(`[Proposal Validation] –° –æ—à–∏–±–∫–∞–º–∏: ${allErrors.length}`);

    return {
      validProposals,
      errors: allErrors,
      totalCount: proposals.length,
      validCount: validProposals.length,
      errorCount: allErrors.length
    };
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  const validationStats = computed(() => {
    const total = validatedProposals.value.length + validationErrors.value.length;
    const valid = validatedProposals.value.length;
    const invalid = validationErrors.value.length;
    
    return {
      total,
      valid,
      invalid,
      validPercentage: total > 0 ? Math.round((valid / total) * 100) : 0,
      invalidPercentage: total > 0 ? Math.round((invalid / total) * 100) : 0
    };
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã–º (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
  const isRealProposal = (proposal) => {
    if (!proposal.transactionHash) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–µ—à –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    if (!isValidTransactionHash(proposal.transactionHash)) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–µ—Å—Ç–æ–≤—ã–µ/—Ñ–µ–π–∫–æ–≤—ã–µ —Ö–µ—à–∏
    const fakeHashes = [
      '0x0000000000000000000000000000000000000000000000000000000000000000',
      '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'
    ];
    
    if (fakeHashes.includes(proposal.transactionHash.toLowerCase())) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–µ—à –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω—É–ª–µ–π (–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ)
    if (proposal.transactionHash.startsWith('0x0000')) return false;
    
    return true;
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
  const filterRealProposals = (proposals) => {
    return proposals.filter(proposal => isRealProposal(proposal));
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–∏—Å–∫–ª—é—á–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ)
  const filterActiveProposals = (proposals) => {
    return proposals.filter(proposal => {
      // –ò—Å–∫–ª—é—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
      if (proposal.executed || proposal.canceled) {
        console.log(`üö´ [FILTER] –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ${proposal.id}: executed=${proposal.executed}, canceled=${proposal.canceled}`);
        return false;
      }
      
      // –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∏—Å—Ç–µ–∫—à–∏–º deadline
      if (proposal.deadline) {
        const currentTime = Math.floor(Date.now() / 1000);
        if (currentTime > proposal.deadline) {
          console.log(`‚è∞ [FILTER] –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ${proposal.id}: deadline –∏—Å—Ç–µ–∫`);
          return false;
        }
      }
      
      return true;
    });
  };

  return {
    // –î–∞–Ω–Ω—ã–µ
    validatedProposals,
    validationErrors,
    isValidating,
    validationStats,
    
    // –ú–µ—Ç–æ–¥—ã
    validateProposal,
    validateProposals,
    isRealProposal,
    filterRealProposals,
    filterActiveProposals,
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    isValidTransactionHash,
    isValidAddress,
    isValidChainId
  };
}
