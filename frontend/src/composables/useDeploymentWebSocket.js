/**
 * Copyright (c) 2024-2025 –¢–∞—Ä–∞–±–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á
 * All rights reserved.
 * 
 * This software is proprietary and confidential.
 * Unauthorized copying, modification, or distribution is prohibited.
 * 
 * For licensing inquiries: info@hb3-accelerator.com
 * Website: https://hb3-accelerator.com
 * GitHub: https://github.com/HB3-ACCELERATOR
 */

import { ref, reactive, onUnmounted } from 'vue';
import wsClient from '../utils/websocket';

export function useDeploymentWebSocket() {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–ø–ª–æ—è
  const deploymentStatus = ref('not_started'); // not_started, in_progress, completed, failed
  const currentStage = ref('');
  const currentNetwork = ref('');
  const progress = ref(0);
  const isDeploying = ref(false);
  const deploymentId = ref(null);
  const logs = ref([]);
  const error = ref(null);
  
  // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–µ—Ç—è–º
  const networksStatus = reactive({});
  
  // –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ø–ª–æ—è
  const deploymentResult = ref(null);
  
  // –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥
  const addLog = (message, type = 'info') => {
    const timestamp = new Date().toLocaleTimeString();
    logs.value.push({
      timestamp,
      message,
      type
    });
  };
  
  // –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
  const clearLogs = () => {
    logs.value = [];
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
  const handleDeploymentUpdate = (data) => {
    if (data.deploymentId !== deploymentId.value) return;
    
    console.log('üîÑ [DeploymentWebSocket] –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', data);
    
    switch (data.type) {
      case 'deployment_started':
        deploymentStatus.value = 'in_progress';
        isDeploying.value = true;
        currentStage.value = data.stage || '';
        addLog(`üöÄ ${data.message}`, 'info');
        break;
        
      case 'deployment_progress':
        currentStage.value = data.stage || '';
        currentNetwork.value = data.network || '';
        progress.value = data.progress || 0;
        if (data.message) {
          addLog(`üìä ${data.message}`, 'info');
        }
        break;
        
      case 'deployment_stage_completed':
        if (data.message) {
          addLog(`‚úÖ ${data.message}`, 'success');
        }
        break;
        
      case 'deployment_network_update':
        if (data.network) {
          networksStatus[data.network] = {
            status: data.status,
            address: data.address,
            message: data.message
          };
        }
        if (data.message) {
          addLog(`üåê [${data.network}] ${data.message}`, 'info');
        }
        break;
        
      case 'deployment_error':
        error.value = data.error;
        if (data.message) {
          addLog(`‚ùå ${data.message}`, 'error');
        }
        break;
        
      case 'deployment_completed':
        deploymentStatus.value = 'completed';
        isDeploying.value = false;
        deploymentResult.value = data.result;
        progress.value = 100;
        addLog(`üéâ ${data.message}`, 'success');
        break;
        
      case 'deployment_failed':
        deploymentStatus.value = 'failed';
        isDeploying.value = false;
        error.value = data.error;
        addLog(`üí• ${data.message}`, 'error');
        break;
        
      case 'deployment_log':
        if (data.log) {
          addLog(data.log.message, data.log.type || 'info');
        }
        break;
        
      case undefined:
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –±–µ–∑ —Ç–∏–ø–∞ (–ø—Ä—è–º—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
        if (data.stage) currentStage.value = data.stage;
        if (data.progress !== undefined) progress.value = data.progress;
        if (data.status) deploymentStatus.value = data.status;
        if (data.result) deploymentResult.value = data.result;
        if (data.error) error.value = data.error;
        if (data.status === 'completed') {
          isDeploying.value = false;
          addLog('üéâ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!', 'success');
        } else if (data.status === 'failed') {
          isDeploying.value = false;
          addLog('üí• –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!', 'error');
        }
        break;
        
      default:
        console.warn('ü§∑‚Äç‚ôÇÔ∏è [DeploymentWebSocket] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è:', data.type);
    }
  };
  
  // –ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–µ–ø–ª–æ—è
  const startDeploymentTracking = (id) => {
    console.log('üéØ [DeploymentWebSocket] –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–µ–ø–ª–æ—è:', id);
    
    deploymentId.value = id;
    deploymentStatus.value = 'in_progress';
    isDeploying.value = true;
    clearLogs();
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º
    wsClient.connect();
    if (wsClient && typeof wsClient.subscribe === 'function') {
      wsClient.subscribe('deployment_update', handleDeploymentUpdate);
    } else {
      console.warn('[DeploymentWebSocket] wsClient.subscribe –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
    
    addLog('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WebSocket –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–µ–ø–ª–æ—è', 'info');
  };
  
  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
  const stopDeploymentTracking = () => {
    console.log('üõë [DeploymentWebSocket] –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ');
    
    if (wsClient && typeof wsClient.unsubscribe === 'function') {
      wsClient.unsubscribe('deployment_update', handleDeploymentUpdate);
    } else {
      console.warn('[DeploymentWebSocket] wsClient.unsubscribe –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
    isDeploying.value = false;
  };
  
  // –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const resetDeploymentState = () => {
    deploymentStatus.value = 'not_started';
    currentStage.value = '';
    currentNetwork.value = '';
    progress.value = 0;
    isDeploying.value = false;
    deploymentId.value = null;
    error.value = null;
    deploymentResult.value = null;
    clearLogs();
    Object.keys(networksStatus).forEach(key => delete networksStatus[key]);
  };
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø–∏—Å–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  onUnmounted(() => {
    stopDeploymentTracking();
  });
  
  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    deploymentStatus,
    currentStage,
    currentNetwork,
    progress,
    isDeploying,
    deploymentId,
    logs,
    error,
    networksStatus,
    deploymentResult,
    
    // –ú–µ—Ç–æ–¥—ã
    startDeploymentTracking,
    stopDeploymentTracking,
    resetDeploymentState,
    addLog,
    clearLogs
  };
}
