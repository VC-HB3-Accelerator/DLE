/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ç–µ–π –±–ª–æ–∫—á–µ–π–Ω–∞
 * 
 * Author: HB3 Accelerator
 * For licensing inquiries: info@hb3-accelerator.com
 * Website: https://hb3-accelerator.com
 * GitHub: https://github.com/HB3-ACCELERATOR
 */

import { getNetworkConfig, getHexChainId, isNetworkSupported } from './networkConfig.js';

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–µ—Ç—å –≤ MetaMask
 * @param {number} targetChainId - ID —Ü–µ–ª–µ–≤–æ–π —Å–µ—Ç–∏
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
 */
export async function switchNetwork(targetChainId) {
  try {
    console.log(`üîÑ [Network Switch] –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–µ—Ç—å ${targetChainId}...`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Å–µ—Ç—å
    if (!isNetworkSupported(targetChainId)) {
      throw new Error(`–°–µ—Ç—å ${targetChainId} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ MetaMask
    if (!window.ethereum) {
      throw new Error('MetaMask –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MetaMask.');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ç–∏
    const networkConfig = getNetworkConfig(targetChainId);
    if (!networkConfig) {
      throw new Error(`–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–µ—Ç–∏ ${targetChainId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Ç—å
    const currentChainId = await window.ethereum.request({ method: 'eth_chainId' });
    console.log(`üîÑ [Network Switch] –¢–µ–∫—É—â–∞—è —Å–µ—Ç—å: ${currentChainId}, –¶–µ–ª–µ–≤–∞—è: ${getHexChainId(targetChainId)}`);
    
    // –ï—Å–ª–∏ —É–∂–µ –≤ –Ω—É–∂–Ω–æ–π —Å–µ—Ç–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
    if (currentChainId === getHexChainId(targetChainId)) {
      console.log(`‚úÖ [Network Switch] –£–∂–µ –≤ —Å–µ—Ç–∏ ${targetChainId}`);
      return {
        success: true,
        message: `–£–∂–µ –≤ —Å–µ—Ç–∏ ${networkConfig.chainName}`,
        chainId: targetChainId,
        chainName: networkConfig.chainName
      };
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Ç—å
    try {
      await window.ethereum.request({
        method: 'wallet_switchEthereumChain',
        params: [{ chainId: getHexChainId(targetChainId) }],
      });
      
      console.log(`‚úÖ [Network Switch] –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ ${networkConfig.chainName}`);
      return {
        success: true,
        message: `–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ ${networkConfig.chainName}`,
        chainId: targetChainId,
        chainName: networkConfig.chainName
      };
      
    } catch (switchError) {
      // –ï—Å–ª–∏ —Å–µ—Ç—å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ MetaMask, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
      if (switchError.code === 4902) {
        console.log(`‚ûï [Network Switch] –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç—å ${networkConfig.chainName} –≤ MetaMask...`);
        
        try {
          await window.ethereum.request({
            method: 'wallet_addEthereumChain',
            params: [{
              chainId: getHexChainId(targetChainId),
              chainName: networkConfig.chainName,
              nativeCurrency: networkConfig.nativeCurrency,
              rpcUrls: networkConfig.rpcUrls,
              blockExplorerUrls: networkConfig.blockExplorerUrls,
            }],
          });
          
          console.log(`‚úÖ [Network Switch] –°–µ—Ç—å ${networkConfig.chainName} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞`);
          return {
            success: true,
            message: `–°–µ—Ç—å ${networkConfig.chainName} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞`,
            chainId: targetChainId,
            chainName: networkConfig.chainName
          };
          
        } catch (addError) {
          console.error(`‚ùå [Network Switch] –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ç–∏:`, addError);
          throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Ç—å ${networkConfig.chainName}: ${addError.message}`);
        }
      } else {
        // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        console.error(`‚ùå [Network Switch] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ç–∏:`, switchError);
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ ${networkConfig.chainName}: ${switchError.message}`);
      }
    }
    
  } catch (error) {
    console.error(`‚ùå [Network Switch] –û—à–∏–±–∫–∞:`, error);
    return {
      success: false,
      error: error.message,
      chainId: targetChainId
    };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Ç—å
 * @returns {Promise<Object>} - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å–µ—Ç–∏
 */
export async function getCurrentNetwork() {
  try {
    if (!window.ethereum) {
      throw new Error('MetaMask –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    const chainId = await window.ethereum.request({ method: 'eth_chainId' });
    const numericChainId = parseInt(chainId, 16);
    const networkConfig = getNetworkConfig(numericChainId);
    
    return {
      success: true,
      chainId: numericChainId,
      hexChainId: chainId,
      chainName: networkConfig?.chainName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ—Ç—å',
      isSupported: isNetworkSupported(numericChainId)
    };
    
  } catch (error) {
    console.error('‚ùå [Network Check] –û—à–∏–±–∫–∞:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ç–µ–π
 * @returns {Array} - –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ç–µ–π
 */
export function getSupportedNetworks() {
  return Object.entries(SUPPORTED_NETWORKS).map(([chainId, config]) => ({
    chainId: parseInt(chainId),
    hexChainId: getHexChainId(parseInt(chainId)),
    chainName: config.chainName,
    nativeCurrency: config.nativeCurrency,
    rpcUrls: config.rpcUrls,
    blockExplorerUrls: config.blockExplorerUrls
  }));
}
