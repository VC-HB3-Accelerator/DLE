/**
 * Copyright (c) 2024-2025 –¢–∞—Ä–∞–±–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á
 * All rights reserved.
 * 
 * This software is proprietary and confidential.
 * Unauthorized copying, modification, or distribution is prohibited.
 * 
 * For licensing inquiries: info@hb3-accelerator.com
 * Website: https://hb3-accelerator.com
 * GitHub: https://github.com/HB3-ACCELERATOR
 */

import api from '@/api/axios';
import { ethers } from 'ethers';
import { DLE_ABI, DLE_DEACTIVATION_ABI, TOKEN_ABI } from './dle-abi';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ç–∏ –∫–æ—à–µ–ª—å–∫–∞
export async function switchToVotingNetwork(chainId) {
  try {
    console.log(`üîÑ [NETWORK] –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å–µ—Ç—å ${chainId}...`);
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ç–µ–π
    const networks = {
      '11155111': { // Sepolia
        chainId: '0xaa36a7',
        chainName: 'Sepolia',
        nativeCurrency: { name: 'Sepolia Ether', symbol: 'ETH', decimals: 18 },
        rpcUrls: ['https://1rpc.io/sepolia'],
        blockExplorerUrls: ['https://sepolia.etherscan.io']
      },
      '17000': { // Holesky
        chainId: '0x4268',
        chainName: 'Holesky',
        nativeCurrency: { name: 'Holesky Ether', symbol: 'ETH', decimals: 18 },
        rpcUrls: ['https://ethereum-holesky.publicnode.com'],
        blockExplorerUrls: ['https://holesky.etherscan.io']
      },
      '421614': { // Arbitrum Sepolia
        chainId: '0x66eee',
        chainName: 'Arbitrum Sepolia',
        nativeCurrency: { name: 'Arbitrum Sepolia Ether', symbol: 'ETH', decimals: 18 },
        rpcUrls: ['https://sepolia-rollup.arbitrum.io/rpc'],
        blockExplorerUrls: ['https://sepolia.arbiscan.io']
      },
      '84532': { // Base Sepolia
        chainId: '0x14a34',
        chainName: 'Base Sepolia',
        nativeCurrency: { name: 'Base Sepolia Ether', symbol: 'ETH', decimals: 18 },
        rpcUrls: ['https://sepolia.base.org'],
        blockExplorerUrls: ['https://sepolia.basescan.org']
      }
    };
    
    const networkConfig = networks[chainId];
    if (!networkConfig) {
      console.error(`‚ùå [NETWORK] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ—Ç—å: ${chainId}`);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –ª–∏ —É–∂–µ –Ω—É–∂–Ω–∞—è —Å–µ—Ç—å
    const currentChainId = await window.ethereum.request({ method: 'eth_chainId' });
    if (currentChainId === networkConfig.chainId) {
      console.log(`‚úÖ [NETWORK] –°–µ—Ç—å ${chainId} —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞`);
      return true;
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –Ω—É–∂–Ω—É—é —Å–µ—Ç—å
    try {
      await window.ethereum.request({
        method: 'wallet_switchEthereumChain',
        params: [{ chainId: networkConfig.chainId }]
      });
      console.log(`‚úÖ [NETWORK] –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ —Å–µ—Ç—å ${chainId}`);
      return true;
    } catch (switchError) {
      // –ï—Å–ª–∏ —Å–µ—Ç—å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
      if (switchError.code === 4902) {
        console.log(`‚ûï [NETWORK] –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç—å ${chainId}...`);
        try {
          await window.ethereum.request({
            method: 'wallet_addEthereumChain',
            params: [networkConfig]
          });
          console.log(`‚úÖ [NETWORK] –°–µ—Ç—å ${chainId} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞`);
          return true;
        } catch (addError) {
          console.error(`‚ùå [NETWORK] –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ç–∏ ${chainId}:`, addError);
          return false;
        }
      } else {
        console.error(`‚ùå [NETWORK] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å–µ—Ç—å ${chainId}:`, switchError);
        return false;
      }
    }
  } catch (error) {
    console.error(`‚ùå [NETWORK] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ç–∏:`, error);
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–º—É –∫–æ—à–µ–ª—å–∫—É
 * @returns {Promise<Object>} - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–º –∫–æ—à–µ–ª—å–∫–µ
 */
export async function checkWalletConnection() {
  try {
    if (!window.ethereum) {
      throw new Error('–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
    const provider = new ethers.BrowserProvider(window.ethereum);
    const signer = await provider.getSigner();
    const address = await signer.getAddress();
    const network = await provider.getNetwork();

    return {
      connected: true,
      address: address,
      chainId: Number(network.chainId),
      provider: window.ethereum.isMetaMask ? 'MetaMask' : 'Other Wallet'
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ—à–µ–ª—å–∫—É:', error);
    
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ MetaMask
    let errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ—à–µ–ª—å–∫—É.';
    
    if (error.message && error.message.includes('MetaMask extension not found')) {
      errorMessage = '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ MetaMask –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MetaMask –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.';
    } else if (error.message && error.message.includes('Failed to connect to MetaMask')) {
      errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MetaMask. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –∞–∫—Ç–∏–≤–Ω–æ.';
    } else if (error.message && error.message.includes('–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')) {
      errorMessage = '–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MetaMask.';
    } else if (error.message) {
      errorMessage = error.message;
    }
    
    throw new Error(errorMessage);
  }
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ DLE
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (proposals)
 */



/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ DLE –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
 * @param {string} dleAddress - –ê–¥—Ä–µ—Å DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @returns {Promise<Object>} - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ DLE
 */
export async function getDLEInfo(dleAddress) {
  try {
    const response = await api.post('/blockchain/read-dle-info', {
      dleAddress: dleAddress
    });
    
    if (response.data.success) {
      return response.data.data;
    } else {
      throw new Error(response.data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ DLE:', error);
    throw error;
  }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ DLE –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞ (–∞–ª–∏–∞—Å –¥–ª—è getDLEInfo)
 * @param {string} dleAddress - –ê–¥—Ä–µ—Å DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @returns {Promise<Object>} - –î–∞–Ω–Ω—ã–µ DLE –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
 */
export async function loadDleDataFromBlockchain(dleAddress) {
  return getDLEInfo(dleAddress);
}

/**
 * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
 * @param {string} dleAddress - –ê–¥—Ä–µ—Å DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @param {Object} proposalData - –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è
 */
export async function createProposal(dleAddress, proposalData) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
    if (!window.ethereum) {
      throw new Error('–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ—à–µ–ª—å–∫—É
    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
    const provider = new ethers.BrowserProvider(window.ethereum);
    const signer = await provider.getSigner();

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π ABI

    const dle = new ethers.Contract(dleAddress, DLE_ABI, signer);

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
  const tx = await dle.createProposal(
      proposalData.description,
      proposalData.duration,
      proposalData.operation,
      proposalData.governanceChainId,
      proposalData.targetChains || [],
      proposalData.timelockDelay || 0
    );

    // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const receipt = await tx.wait();

    console.log('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ, tx hash:', tx.hash);

    return {
      proposalId: receipt.logs[0]?.topics[1] || '0', // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Å–æ–±—ã—Ç–∏—è
      txHash: tx.hash,
      blockNumber: receipt.blockNumber
    };

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', error);
    throw error;
  }
}

/**
 * –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
 * @param {string} dleAddress - –ê–¥—Ä–µ—Å DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @param {number} proposalId - ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 * @param {boolean} support - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
 */
export async function voteForProposal(dleAddress, proposalId, support) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
    if (!window.ethereum) {
      throw new Error('–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ—à–µ–ª—å–∫—É
    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
    const provider = new ethers.BrowserProvider(window.ethereum);
    const signer = await provider.getSigner();

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π ABI
    let dle = new ethers.Contract(dleAddress, DLE_ABI, signer);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º
    try {
      console.log('üîç [VOTE DEBUG] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è...');
      const proposalState = await dle.getProposalState(proposalId);
      console.log('üîç [VOTE DEBUG] –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', proposalState);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å (—Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0 = Pending)
      if (Number(proposalState) !== 0) {
        throw new Error(`–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ${proposalState}, –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ`);
      }
      
      console.log('üîç [VOTE DEBUG] –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
      try {
        const proposal = await dle.proposals(proposalId);
        const currentChainId = await dle.getCurrentChainId();
        const governanceChainId = proposal.governanceChainId;
        
        console.log('üîç [VOTE DEBUG] –¢–µ–∫—É—â–∞—è —Å–µ—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', currentChainId.toString());
        console.log('üîç [VOTE DEBUG] –°–µ—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', governanceChainId.toString());
        
        if (currentChainId.toString() !== governanceChainId.toString()) {
          console.log('üîÑ [VOTE DEBUG] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–µ—Ç—å! –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è...');
          
          // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–µ—Ç—å
          const switched = await switchToVotingNetwork(governanceChainId.toString());
          if (switched) {
            console.log('‚úÖ [VOTE DEBUG] –°–µ—Ç—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É...');
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è —Å–µ—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            let correctContractAddress = dleAddress;
            
            // –ï—Å–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –≤ –¥—Ä—É–≥–æ–π —Å–µ—Ç–∏, –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤ –Ω—É–∂–Ω–æ–π —Å–µ—Ç–∏
            if (currentChainId.toString() !== governanceChainId.toString()) {
              console.log('üîç [VOTE DEBUG] –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤ —Å–µ—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è...');
              
              try {
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º—É–ª—å—Ç–∏—á–µ–π–Ω —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ –∏–∑ –ë–î
                const response = await fetch('/api/dle-core/get-multichain-contracts', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({ 
                    originalContract: dleAddress,
                    targetChainId: governanceChainId.toString()
                  })
                });
                
                if (response.ok) {
                  const data = await response.json();
                  if (data.success && data.contractAddress) {
                    correctContractAddress = data.contractAddress;
                    console.log('üîç [VOTE DEBUG] –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤ —Å–µ—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:', correctContractAddress);
                  } else {
                    console.warn('‚ö†Ô∏è [VOTE DEBUG] –ö–æ–Ω—Ç—Ä–∞–∫—Ç –≤ —Å–µ—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π');
                  }
                } else {
                  console.warn('‚ö†Ô∏è [VOTE DEBUG] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏–∑ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π');
                }
              } catch (error) {
                console.warn('‚ö†Ô∏è [VOTE DEBUG] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π:', error.message);
              }
            }
            
            // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É –≤ –Ω–æ–≤–æ–π —Å–µ—Ç–∏
            const newProvider = new ethers.BrowserProvider(window.ethereum);
            const newSigner = await newProvider.getSigner();
            dle = new ethers.Contract(correctContractAddress, DLE_ABI, newSigner);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ø–µ—Ä—å –≤—Å–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            const newCurrentChainId = await dle.getCurrentChainId();
            console.log('üîç [VOTE DEBUG] –ù–æ–≤–∞—è —Ç–µ–∫—É—â–∞—è —Å–µ—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', newCurrentChainId.toString());
            
            if (newCurrentChainId.toString() === governanceChainId.toString()) {
              console.log('‚úÖ [VOTE DEBUG] –°–µ—Ç—å –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
            } else {
              throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–µ—Ç—å. –¢–µ–∫—É—â–∞—è: ${newCurrentChainId}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${governanceChainId}`);
            }
          } else {
            throw new Error(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–µ—Ç—å! –ö–æ–Ω—Ç—Ä–∞–∫—Ç –≤ —Å–µ—Ç–∏ ${currentChainId}, –∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Å–µ—Ç–∏ ${governanceChainId}. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –≤—Ä—É—á–Ω—É—é.`);
          }
        } else {
          console.log('üîç [VOTE DEBUG] –°–µ—Ç—å –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–æ –≥–æ–ª–æ—Å–∞
        const votingPower = await dle.getPastVotes(signer.address, proposal.snapshotTimepoint);
        console.log('üîç [VOTE DEBUG] –ü—Ä–∞–≤–æ –≥–æ–ª–æ—Å–∞:', votingPower.toString());
        if (votingPower === 0n) {
          throw new Error('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–∞–≤–∞ –≥–æ–ª–æ—Å–∞ (votingPower = 0)');
        }
        console.log('üîç [VOTE DEBUG] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø—Ä–∞–≤–æ –≥–æ–ª–æ—Å–∞');
      } catch (votingPowerError) {
        console.warn('‚ö†Ô∏è [VOTE DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–æ –≥–æ–ª–æ—Å–∞ (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º):', votingPowerError.message);
      }
      
    } catch (debugError) {
      console.warn('‚ö†Ô∏è [VOTE DEBUG] –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º):', debugError.message);
    }

    // –ì–æ–ª–æ—Å—É–µ–º –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    console.log('üó≥Ô∏è [VOTE] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è...');
    const tx = await dle.vote(proposalId, support);

    // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const receipt = await tx.wait();

    console.log('–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, tx hash:', tx.hash);

    return {
      txHash: tx.hash,
      blockNumber: receipt.blockNumber
    };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:', error);
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏
      if (error.code === 'CALL_EXCEPTION' && error.data) {
        console.error('üîç [ERROR DEBUG] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
          code: error.code,
          data: error.data,
          reason: error.reason,
          action: error.action
        });
        
        // –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–æ–¥–∞ –æ—à–∏–±–∫–∏
        if (error.data === '0x2eaf0f6d') {
          console.error('‚ùå [ERROR DEBUG] –û—à–∏–±–∫–∞: ErrWrongChain - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–µ—Ç—å –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è');
        } else if (error.data === '0xe7005635') {
          console.error('‚ùå [ERROR DEBUG] –û—à–∏–±–∫–∞: ErrAlreadyVoted - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é');
        } else if (error.data === '0x21c19873') {
          console.error('‚ùå [ERROR DEBUG] –û—à–∏–±–∫–∞: ErrNoPower - —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–∞–≤–∞ –≥–æ–ª–æ—Å–∞');
        } else if (error.data === '0x834d7b85') {
          console.error('‚ùå [ERROR DEBUG] –û—à–∏–±–∫–∞: ErrProposalMissing - –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        } else if (error.data === '0xd6792fad') {
          console.error('‚ùå [ERROR DEBUG] –û—à–∏–±–∫–∞: ErrProposalEnded - –≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ');
        } else if (error.data === '0x2d686f73') {
          console.error('‚ùå [ERROR DEBUG] –û—à–∏–±–∫–∞: ErrProposalExecuted - –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ');
        } else if (error.data === '0xc7567e07') {
          console.error('‚ùå [ERROR DEBUG] –û—à–∏–±–∫–∞: ErrProposalCanceled - –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
        } else {
          console.error('‚ùå [ERROR DEBUG] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', error.data);
        }
      }
      
      throw error;
    }
}

/**
 * –ò—Å–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
 * @param {string} dleAddress - –ê–¥—Ä–µ—Å DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @param {number} proposalId - ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
 */
export async function executeProposal(dleAddress, proposalId) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
    if (!window.ethereum) {
      throw new Error('–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ—à–µ–ª—å–∫—É
    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
    const provider = new ethers.BrowserProvider(window.ethereum);
    const signer = await provider.getSigner();

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π ABI

    const dle = new ethers.Contract(dleAddress, DLE_ABI, signer);

    // –ò—Å–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    const tx = await dle.executeProposal(proposalId);

    // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const receipt = await tx.wait();

    console.log('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ, tx hash:', tx.hash);

    return {
      txHash: tx.hash,
      blockNumber: receipt.blockNumber
    };

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', error);
    throw error;
  }
}

/**
 * –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
 * @param {string} dleAddress - –ê–¥—Ä–µ—Å DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @param {number} proposalId - ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 * @param {string} reason - –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–º–µ–Ω—ã
 */
export async function cancelProposal(dleAddress, proposalId, reason) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
    if (!window.ethereum) {
      throw new Error('–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ—à–µ–ª—å–∫—É
    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
    const provider = new ethers.BrowserProvider(window.ethereum);
    const signer = await provider.getSigner();

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π ABI
    const dle = new ethers.Contract(dleAddress, DLE_ABI, signer);

    // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    const tx = await dle.cancelProposal(proposalId, reason);

    // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const receipt = await tx.wait();

    console.log('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ, tx hash:', tx.hash);

    return {
      txHash: tx.hash,
      blockNumber: receipt.blockNumber
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', error);
    throw error;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} dleAddress - –ê–¥—Ä–µ—Å DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @param {string} userAddress - –ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<Object>} - –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤
 */
export async function checkTokenBalance(dleAddress, userAddress) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
    if (!window.ethereum) {
      throw new Error('–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä (—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è)
    const provider = new ethers.BrowserProvider(window.ethereum);
    const dle = new ethers.Contract(dleAddress, DLE_ABI, provider);

    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤
    const balance = await dle.balanceOf(userAddress);
    const balanceFormatted = ethers.formatEther(balance);
    
    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è ${userAddress}: ${balanceFormatted}`);

    return {
      balance: balanceFormatted,
      hasTokens: balance > 0,
      rawBalance: balance.toString()
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    throw error;
  }
}

/**
 * –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–æ–¥—É–ª—è (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–ª–∞—Ç–æ–π –≥–∞–∑–∞)
 * @param {string} dleAddress - –ê–¥—Ä–µ—Å DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @param {string} description - –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 * @param {number} duration - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 * @param {string} moduleId - ID –º–æ–¥—É–ª—è
 * @param {string} moduleAddress - –ê–¥—Ä–µ—Å –º–æ–¥—É–ª—è
 * @param {number} chainId - ID —Ü–µ–ø–æ—á–∫–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
 * @param {string} deploymentId - ID –¥–µ–ø–ª–æ—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 */
export async function createAddModuleProposal(dleAddress, description, duration, moduleId, moduleAddress, chainId, deploymentId = null) {
  try {
    const requestData = {
      dleAddress: dleAddress,
      description: description,
      duration: duration,
      moduleId: moduleId,
      moduleAddress: moduleAddress,
      chainId: chainId
    };

    // –î–æ–±–∞–≤–ª—è–µ–º deploymentId –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
    if (deploymentId) {
      requestData.deploymentId = deploymentId;
    }

    const response = await api.post('/dle-modules/create-add-module-proposal', requestData);
    
    if (response.data.success) {
      return response.data.data;
    } else {
      throw new Error(response.data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–æ–¥—É–ª—è');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–æ–¥—É–ª—è:', error);
    throw error;
  }
}

/**
 * –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥—É–ª—è
 * @param {string} dleAddress - –ê–¥—Ä–µ—Å DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @param {string} description - –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 * @param {number} duration - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 * @param {string} moduleId - ID –º–æ–¥—É–ª—è
 * @param {number} chainId - ID —Ü–µ–ø–æ—á–∫–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 */
export async function createRemoveModuleProposal(dleAddress, description, duration, moduleId, chainId) {
  try {
    const response = await api.post('/blockchain/create-remove-module-proposal', {
      dleAddress: dleAddress,
      description: description,
      duration: duration,
      moduleId: moduleId,
      chainId: chainId
    });
    
    if (response.data.success) {
      return response.data.data;
    } else {
      throw new Error(response.data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥—É–ª—è');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥—É–ª—è:', error);
    throw error;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –º–æ–¥—É–ª—å
 * @param {string} dleAddress - –ê–¥—Ä–µ—Å DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @param {string} moduleId - ID –º–æ–¥—É–ª—è
 * @returns {Promise<boolean>} - –ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –º–æ–¥—É–ª—å
 */
export async function isModuleActive(dleAddress, moduleId) {
  try {
    const response = await api.post('/blockchain/is-module-active', {
      dleAddress: dleAddress,
      moduleId: moduleId
    });
    
    if (response.data.success) {
      return response.data.data.isActive;
    } else {
      throw new Error(response.data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–æ–¥—É–ª—è');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è:', error);
    return false;
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –º–æ–¥—É–ª—è
 * @param {string} dleAddress - –ê–¥—Ä–µ—Å DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @param {string} moduleId - ID –º–æ–¥—É–ª—è
 * @returns {Promise<string>} - –ê–¥—Ä–µ—Å –º–æ–¥—É–ª—è
 */
export async function getModuleAddress(dleAddress, moduleId, chainId) {
  try {
    const response = await api.post('/dle-modules/get-module-address', {
      dleAddress: dleAddress,
      moduleId: moduleId,
      chainId: chainId
    });
    
    if (response.data.success) {
      return response.data.data.moduleAddress;
    } else {
      throw new Error(response.data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –º–æ–¥—É–ª—è');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –º–æ–¥—É–ª—è:', error);
    return '';
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ü–µ–ø–æ—á–∫–∞
 * @param {string} dleAddress - –ê–¥—Ä–µ—Å DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @param {number} chainId - ID —Ü–µ–ø–æ—á–∫–∏
 * @returns {Promise<boolean>} - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ü–µ–ø–æ—á–∫–∞
 */
export async function isChainSupported(dleAddress, chainId) {
  try {
    const response = await api.post('/blockchain/is-chain-supported', {
      dleAddress: dleAddress,
      chainId: chainId
    });
    
    if (response.data.success) {
      return response.data.data.isSupported;
    } else {
      throw new Error(response.data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ü–µ–ø–æ—á–∫–∏');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ü–µ–ø–æ—á–∫–∏:', error);
    return false;
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π ID —Ü–µ–ø–æ—á–∫–∏
 * @param {string} dleAddress - –ê–¥—Ä–µ—Å DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @returns {Promise<number>} - –¢–µ–∫—É—â–∏–π ID —Ü–µ–ø–æ—á–∫–∏
 */
export async function getCurrentChainId(dleAddress) {
  try {
    const response = await api.post('/blockchain/get-current-chain-id', {
      dleAddress: dleAddress
    });
    
    if (response.data.success) {
      return response.data.data.chainId;
    } else {
      throw new Error(response.data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π ID —Ü–µ–ø–æ—á–∫–∏');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ ID —Ü–µ–ø–æ—á–∫–∏:', error);
    return 0;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 * @param {string} dleAddress - –ê–¥—Ä–µ—Å DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @param {number} proposalId - ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
export async function checkProposalResult(dleAddress, proposalId) {
  try {
    const response = await api.post('/blockchain/check-proposal-result', {
      dleAddress: dleAddress,
      proposalId: proposalId
    });
    
    if (response.data.success) {
      return response.data.data;
    } else {
      throw new Error(response.data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', error);
    return { passed: false, quorumReached: false };
  }
}

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
// –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ UI

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è DLE –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
 * @param {string} dleAddress - –ê–¥—Ä–µ—Å DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @returns {Promise<Array>} - –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
 */
export async function loadProposals(dleAddress) {
  try {
    const response = await api.post('/blockchain/get-proposals', {
      dleAddress: dleAddress
    });
    
    if (response.data.success) {
      return response.data.data.proposals;
    } else {
      throw new Error(response.data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:', error);
    return [];
  }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π —Ç–æ–∫–µ–Ω–æ–≤ DLE (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è UI)
 * @param {string} dleAddress - –ê–¥—Ä–µ—Å DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @returns {Promise<Array>} - –°–ø–∏—Å–æ–∫ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π —Ç–æ–∫–µ–Ω–æ–≤
 */
export async function loadTokenHolders(dleAddress) {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è Transfer –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
    return [];
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return [];
  }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π DLE (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è UI)
 * @param {string} dleAddress - –ê–¥—Ä–µ—Å DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @returns {Promise<Array>} - –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π
 */
export async function loadHistory(dleAddress) {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —á–∏—Ç–∞—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
    return [];
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
    return [];
  }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫—Ç–∏–≤—ã –∫–∞–∑–Ω—ã DLE (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è UI)
 * @param {string} dleAddress - –ê–¥—Ä–µ—Å DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @returns {Promise<Array>} - –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–æ–≤
 */
export async function loadTreasuryAssets(dleAddress) {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —á–∏—Ç–∞—Ç—å –±–∞–ª–∞–Ω—Å—ã —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
    return [];
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–æ–≤ –∫–∞–∑–Ω—ã:', error);
    return [];
  }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É DLE (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è UI)
 * @param {string} dleAddress - –ê–¥—Ä–µ—Å DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @returns {Promise<Object>} - –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
 */
export async function loadAnalytics(dleAddress) {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
    return {
      topParticipants: [],
      totalSupply: 0,
      participantCount: 0,
      activeProposals: 0
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
    return {
      topParticipants: [],
      totalSupply: 0,
      participantCount: 0,
      activeProposals: 0
    };
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ü–µ–ø–æ—á–∫–∏ –∏–∑ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @param {string} dleAddress - –ê–¥—Ä–µ—Å DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @returns {Promise<Array>} - –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ü–µ–ø–æ—á–µ–∫
 */
export async function getSupportedChains(dleAddress) {
  try {
    const response = await api.post('/blockchain/get-supported-chains', {
      dleAddress: dleAddress
    });
    
    if (response.data.success) {
      return response.data.data.chains;
    } else {
      throw new Error(response.data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ü–µ–ø–æ—á–∫–∏');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ü–µ–ø–æ—á–µ–∫:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    return [];
  }
}

/**
 * –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å DLE (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∫–≤–æ—Ä—É–º–∞)
 * @param {string} dleAddress - –ê–¥—Ä–µ—Å DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @param {string} userAddress - –ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
 */
// –§–£–ù–ö–¶–ò–Ø –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢ –í –ö–û–ù–¢–†–ê–ö–¢–ï
export async function deactivateDLE(dleAddress, userAddress) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
    if (!window.ethereum) {
      throw new Error('–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ—à–µ–ª—å–∫—É
    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
    const provider = new ethers.BrowserProvider(window.ethereum);
    const signer = await provider.getSigner();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å userAddress
    const connectedAddress = await signer.getAddress();
    if (connectedAddress.toLowerCase() !== userAddress.toLowerCase()) {
      throw new Error('–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∞–¥—Ä–µ—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API
    console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ DLE —á–µ—Ä–µ–∑ API...');
    const checkResponse = await api.post('/blockchain/deactivate-dle', {
      dleAddress: dleAddress,
      userAddress: userAddress
    });

    if (!checkResponse.data.success) {
      throw new Error(checkResponse.data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏');
    }

    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é...');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π ABI –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏

    const dle = new ethers.Contract(dleAddress, DLE_ABI, signer);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π
    const balance = await dle.balanceOf(userAddress);
    if (balance <= 0) {
      throw new Error('–î–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ DLE –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å —Ç–æ–∫–µ–Ω—ã');
    }

    const totalSupply = await dle.totalSupply();
    if (totalSupply <= 0) {
      throw new Error('DLE –Ω–µ –∏–º–µ–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤');
    }

    const isActive = await dle.isActive();
    if (!isActive) {
      throw new Error('DLE —É–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é
    console.log('–í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é DLE...');
    const tx = await dle.deactivate();
    const receipt = await tx.wait();

    console.log('DLE –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, tx hash:', tx.hash);

    return {
      success: true,
      txHash: tx.hash,
      blockNumber: receipt.blockNumber,
      message: 'DLE —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'
    };

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ DLE:', error);
    
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ DLE';
    
    if (error.message.includes('execution reverted')) {
      errorMessage = '‚ùå –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞: –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ª–æ–≤–∏—è —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ DLE —É–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.';
    } else if (error.message.includes('–≤–ª–∞–¥–µ–ª–µ—Ü')) {
      errorMessage = '‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü DLE –º–æ–∂–µ—Ç –µ–≥–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å';
    } else if (error.message.includes('–∫–æ—à–µ–ª–µ–∫')) {
      errorMessage = '‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫';
    } else if (error.message.includes('–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω')) {
      errorMessage = '‚ùå DLE —É–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω';
    } else if (error.message.includes('—Ç–æ–∫–µ–Ω—ã')) {
      errorMessage = '‚ùå –î–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ DLE –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å —Ç–æ–∫–µ–Ω—ã';
    } else {
      errorMessage = `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
    }
    
    throw new Error(errorMessage);
  }
}

/**
 * –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ DLE
 * @param {string} dleAddress - –ê–¥—Ä–µ—Å DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @param {string} description - –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 * @param {number} duration - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 * @param {number} chainId - ID —Ü–µ–ø–æ—á–∫–∏ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 */
// –§–£–ù–ö–¶–ò–Ø –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢ –í –ö–û–ù–¢–†–ê–ö–¢–ï
export async function createDeactivationProposal(dleAddress, description, duration, chainId) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
    if (!window.ethereum) {
      throw new Error('–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    const provider = new ethers.BrowserProvider(window.ethereum);
    const signer = await provider.getSigner();

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π ABI –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏

    const dle = new ethers.Contract(dleAddress, DLE_DEACTIVATION_ABI, signer);

    const tx = await dle.createDeactivationProposal(description, duration, chainId);
    const receipt = await tx.wait();

    console.log('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–æ, tx hash:', tx.hash);

    return {
      success: true,
      txHash: tx.hash,
      blockNumber: receipt.blockNumber,
      message: '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–æ'
    };

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', error);
    throw error;
  }
}

/**
 * –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
 * @param {string} dleAddress - –ê–¥—Ä–µ—Å DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @param {number} proposalId - ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 * @param {boolean} support - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
 */
// –§–£–ù–ö–¶–ò–Ø –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢ –í –ö–û–ù–¢–†–ê–ö–¢–ï
export async function voteDeactivationProposal(dleAddress, proposalId, support) {
  try {
    if (!window.ethereum) {
      throw new Error('–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    const provider = new ethers.BrowserProvider(window.ethereum);
    const signer = await provider.getSigner();

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π ABI –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏

    const dle = new ethers.Contract(dleAddress, DLE_DEACTIVATION_ABI, signer);

    const tx = await dle.voteDeactivation(proposalId, support);
    const receipt = await tx.wait();

    console.log('–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏, tx hash:', tx.hash);

    return {
      success: true,
      txHash: tx.hash,
      blockNumber: receipt.blockNumber,
      message: `–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ ${support ? '–∑–∞' : '–ø—Ä–æ—Ç–∏–≤'} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏`
    };

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', error);
    throw error;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
 * @param {string} dleAddress - –ê–¥—Ä–µ—Å DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @param {number} proposalId - ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
export async function checkDeactivationProposalResult(dleAddress, proposalId) {
  try {
    const response = await api.post('/blockchain/check-deactivation-proposal-result', {
      dleAddress: dleAddress,
      proposalId: proposalId
    });
    
    if (response.data.success) {
      return response.data.data;
    } else {
      throw new Error(response.data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', error);
    throw error;
  }
}

/**
 * –ò—Å–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
 * @param {string} dleAddress - –ê–¥—Ä–µ—Å DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @param {number} proposalId - ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
 */
// –§–£–ù–ö–¶–ò–Ø –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢ –í –ö–û–ù–¢–†–ê–ö–¢–ï
export async function executeDeactivationProposal(dleAddress, proposalId) {
  try {
    if (!window.ethereum) {
      throw new Error('–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    const provider = new ethers.BrowserProvider(window.ethereum);
    const signer = await provider.getSigner();

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π ABI –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏

    const dle = new ethers.Contract(dleAddress, DLE_DEACTIVATION_ABI, signer);

    const tx = await dle.executeDeactivationProposal(proposalId);
    const receipt = await tx.wait();

    console.log('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ, tx hash:', tx.hash);

    return {
      success: true,
      txHash: tx.hash,
      blockNumber: receipt.blockNumber,
      message: '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ'
    };

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', error);
    throw error;
  }
}

/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
 * @param {string} dleAddress - –ê–¥—Ä–µ—Å DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @returns {Promise<Array>} - –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
 */
export async function loadDeactivationProposals(dleAddress) {
  try {
    const response = await api.post('/blockchain/load-deactivation-proposals', {
      dleAddress: dleAddress
    });
    
    if (response.data.success) {
      return response.data.data.proposals;
    } else {
      throw new Error(response.data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', error);
    return [];
  }
} 

/**
 * –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–≤–æ–¥–µ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ governance
 * @param {string} dleAddress - –ê–¥—Ä–µ—Å DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @param {Object} transferData - –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∞
 * @param {string} transferData.recipient - –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
 * @param {number} transferData.amount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
 * @param {string} transferData.description - –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 * @param {number} transferData.duration - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 * @param {number} transferData.governanceChainId - ID —Å–µ—Ç–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
 * @param {Array<number>} transferData.targetChains - –¶–µ–ª–µ–≤—ã–µ —Å–µ—Ç–∏ –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 */
export async function createTransferTokensProposal(dleAddress, transferData) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
    if (!window.ethereum) {
      throw new Error('–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ—à–µ–ª—å–∫—É
    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
    const provider = new ethers.BrowserProvider(window.ethereum);
    const signer = await provider.getSigner();

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π ABI

    const dle = new ethers.Contract(dleAddress, DLE_ABI, signer);

    // –ö–æ–¥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–æ–≤
    const transferFunctionSelector = ethers.id("_transferTokens(address,uint256)");
    const transferDataEncoded = ethers.AbiCoder.defaultAbiCoder().encode(
      ["address", "uint256"],
      [transferData.recipient, ethers.parseUnits(transferData.amount.toString(), 18)]
    );
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∏ –¥–∞–Ω–Ω—ã–µ
    const operation = ethers.concat([transferFunctionSelector, transferDataEncoded]);

    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –ø–µ—Ä–µ–≤–æ–¥–µ —Ç–æ–∫–µ–Ω–æ–≤:', {
      recipient: transferData.recipient,
      amount: transferData.amount,
      description: transferData.description,
      operation: operation
    });

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    const tx = await dle.createProposal(
      transferData.description,
      transferData.duration,
      operation,
      transferData.governanceChainId,
      transferData.targetChains || [],
      0 // timelockDelay
    );

    // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const receipt = await tx.wait();

    console.log('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–≤–æ–¥–µ —Ç–æ–∫–µ–Ω–æ–≤ —Å–æ–∑–¥–∞–Ω–æ, tx hash:', tx.hash);

    return {
      proposalId: receipt.logs[0]?.topics[1] || '0', // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Å–æ–±—ã—Ç–∏—è
      txHash: tx.hash,
      blockNumber: receipt.blockNumber
    };

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –ø–µ—Ä–µ–≤–æ–¥–µ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    throw error;
  }
}

/**
 * –ò—Å–ø–æ–ª–Ω–∏—Ç—å –º—É–ª—å—Ç–∏–∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤–æ –≤—Å–µ—Ö —Ü–µ–ª–µ–≤—ã—Ö —Å–µ—Ç—è—Ö
 * @param {string} dleAddress - –ê–¥—Ä–µ—Å DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @param {number} proposalId - ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 * @param {string} userAddress - –ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
 */
export async function executeMultichainProposal(dleAddress, proposalId, userAddress) {
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –º—É–ª—å—Ç–∏–∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
    const { 
      executeInAllTargetChains, 
      getDeploymentId,
      formatExecutionResult,
      getExecutionErrors 
    } = await import('@/services/multichainExecutionService');

    // –ü–æ–ª—É—á–∞–µ–º ID –¥–µ–ø–ª–æ—è
    const deploymentId = await getDeploymentId(dleAddress);
    
    // –ò—Å–ø–æ–ª–Ω—è–µ–º –≤–æ –≤—Å–µ—Ö —Ü–µ–ª–µ–≤—ã—Ö —Å–µ—Ç—è—Ö
    const result = await executeInAllTargetChains(dleAddress, proposalId, deploymentId, userAddress);
    
    return {
      success: true,
      result,
      summary: formatExecutionResult(result),
      errors: getExecutionErrors(result)
    };

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –º—É–ª—å—Ç–∏–∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', error);
    throw error;
  }
}

/**
 * –ò—Å–ø–æ–ª–Ω–∏—Ç—å –º—É–ª—å—Ç–∏–∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Ç–∏
 * @param {string} dleAddress - –ê–¥—Ä–µ—Å DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @param {number} proposalId - ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 * @param {number} targetChainId - ID —Ü–µ–ª–µ–≤–æ–π —Å–µ—Ç–∏
 * @param {string} userAddress - –ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
 */
export async function executeMultichainProposalInChain(dleAddress, proposalId, targetChainId, userAddress) {
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –º—É–ª—å—Ç–∏–∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
    const { 
      executeInTargetChain, 
      getDeploymentId,
      getChainName 
    } = await import('@/services/multichainExecutionService');

    // –ü–æ–ª—É—á–∞–µ–º ID –¥–µ–ø–ª–æ—è
    const deploymentId = await getDeploymentId(dleAddress);
    
    // –ò—Å–ø–æ–ª–Ω—è–µ–º –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Ç–∏
    const result = await executeInTargetChain(dleAddress, proposalId, targetChainId, deploymentId, userAddress);
    
    return {
      success: true,
      result,
      chainName: getChainName(targetChainId)
    };

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –º—É–ª—å—Ç–∏–∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ —Å–µ—Ç–∏:', error);
    throw error;
  }
} 