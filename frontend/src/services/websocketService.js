/**
 * WebSocket —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 */

class WebSocketService {
  constructor() {
    this.ws = null;
    this.isConnected = false;
    this.reconnectAttempts = 0;
    this.maxReconnectAttempts = 5;
    this.reconnectDelay = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞
    this.listeners = new Map();
    this.userId = null;
  }

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
  connect(userId = null) {
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      console.log('üîå [WebSocket] –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
      return;
    }

    this.userId = userId;
    
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º WebSocket URL
      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
      // –í Docker –æ–∫—Ä—É–∂–µ–Ω–∏–∏ backend —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 8000
      const backendHost = window.location.hostname + ':8000';
      const wsUrl = `${protocol}//${backendHost}/ws`;
      
      console.log('üîå [WebSocket] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫:', wsUrl);
      
      this.ws = new WebSocket(wsUrl);
      
      this.ws.onopen = () => {
        console.log('‚úÖ [WebSocket] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        this.isConnected = true;
        this.reconnectAttempts = 0;
        
        // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (this.userId) {
          this.send({
            type: 'auth',
            userId: this.userId
          });
        }
        
        this.emit('connected');
      };
      
      this.ws.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          console.log('üì® [WebSocket] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);
          this.handleMessage(data);
        } catch (error) {
          console.error('‚ùå [WebSocket] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
      };
      
      this.ws.onclose = (event) => {
        console.log('üîå [WebSocket] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ:', event.code, event.reason);
        this.isConnected = false;
        this.emit('disconnected', event);
        
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if (this.reconnectAttempts < this.maxReconnectAttempts) {
          this.reconnectAttempts++;
          console.log(`üîÑ [WebSocket] –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts}/${this.maxReconnectAttempts}`);
          
          setTimeout(() => {
            this.connect(this.userId);
          }, this.reconnectDelay * this.reconnectAttempts);
        } else {
          console.error('‚ùå [WebSocket] –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
          this.emit('reconnect-failed');
        }
      };
      
      this.ws.onerror = (error) => {
        console.error('‚ùå [WebSocket] –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
        this.emit('error', error);
      };
      
    } catch (error) {
      console.error('‚ùå [WebSocket] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
      this.emit('error', error);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  send(data) {
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      this.ws.send(JSON.stringify(data));
    } else {
      console.warn('‚ö†Ô∏è [WebSocket] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', data);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  handleMessage(data) {
    switch (data.type) {
      case 'auth-success':
        console.log('‚úÖ [WebSocket] –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data.userId);
        this.emit('auth-success', data);
        break;
        
      case 'chat-message':
        console.log('üí¨ [WebSocket] –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–∞:', data.message);
        this.emit('chat-message', data.message);
        break;
        
      case 'conversation-updated':
        console.log('üìù [WebSocket] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞:', data.conversationId);
        this.emit('conversation-updated', data.conversationId);
        break;
        
      case 'messages-updated':
        console.log('üì® [WebSocket] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π');
        this.emit('messages-updated');
        break;
        
      case 'contacts-updated':
        console.log('üë• [WebSocket] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤');
        this.emit('contacts-updated');
        break;
        
      case 'tags-updated':
        console.log('üè∑Ô∏è [WebSocket] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤');
        this.emit('tags-updated');
        break;
        
      case 'table-updated':
        console.log('[WebSocket] table-updated:', data.tableId);
        if (tableUpdateSubscribers[data.tableId]) {
          tableUpdateSubscribers[data.tableId].forEach(cb => cb(data));
        }
        break;
        
      default:
        console.log('‚ùì [WebSocket] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', data.type);
        this.emit('unknown-message', data);
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
  on(event, callback) {
    if (!this.listeners.has(event)) {
      this.listeners.set(event, []);
    }
    this.listeners.get(event).push(callback);
  }

  // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π
  off(event, callback) {
    if (this.listeners.has(event)) {
      const callbacks = this.listeners.get(event);
      const index = callbacks.indexOf(callback);
      if (index > -1) {
        callbacks.splice(index, 1);
      }
    }
  }

  // –≠–º–∏—Å—Å–∏—è —Å–æ–±—ã—Ç–∏–π
  emit(event, data) {
    if (this.listeners.has(event)) {
      this.listeners.get(event).forEach(callback => {
        try {
          callback(data);
        } catch (error) {
          console.error(`‚ùå [WebSocket] –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è ${event}:`, error);
        }
      });
    }
  }

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
  disconnect() {
    if (this.ws) {
      this.ws.close();
      this.ws = null;
    }
    this.isConnected = false;
    this.listeners.clear();
    console.log('üîå [WebSocket] –û—Ç–∫–ª—é—á–µ–Ω');
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  getStatus() {
    return {
      isConnected: this.isConnected,
      readyState: this.ws ? this.ws.readyState : null,
      reconnectAttempts: this.reconnectAttempts,
      userId: this.userId
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const websocketService = new WebSocketService();

// –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü: tableId -> [callback]
const tableUpdateSubscribers = {};

function onTableUpdate(tableId, callback) {
  if (!tableUpdateSubscribers[tableId]) {
    tableUpdateSubscribers[tableId] = [];
  }
  tableUpdateSubscribers[tableId].push(callback);
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
  return () => {
    tableUpdateSubscribers[tableId] = tableUpdateSubscribers[tableId].filter(cb => cb !== callback);
  };
}

export default {
  websocketService,
  onTableUpdate,
}; 