/**
 * –°–∏—Å—Ç–µ–º–Ω—ã–µ endpoints –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å—é —Å–∏—Å—Ç–µ–º—ã
 */

const express = require('express');
const router = express.Router();
const logger = require('../utils/logger');

/**
 * HTTP fallback endpoint –¥–ª—è Ollama –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
 */
router.post('/ollama-ready', async (req, res) => {
  try {
    logger.info('[System] üîå Ollama –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    res.json({
      success: true,
      message: 'Ollama –≥–æ—Ç–æ–≤'
    });
  } catch (error) {
    logger.error('[System] ‚ùå –û—à–∏–±–∫–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
 */
router.get('/status', (req, res) => {
  try {
    const botManager = require('../services/botManager');
    res.json({
      systemReady: true, // –°–∏—Å—Ç–µ–º–∞ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
      botsInitialized: botManager.isInitialized,
      bots: botManager.getStatus(),
      timestamp: Date.now()
    });
    
  } catch (error) {
    logger.error('[System] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
    
    res.status(500).json({
      error: error.message,
      timestamp: Date.now()
    });
  }
});

module.exports = router;