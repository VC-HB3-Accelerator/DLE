/**
 * Copyright (c) 2024-2025 –¢–∞—Ä–∞–±–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á
 * All rights reserved.
 * 
 * This software is proprietary and confidential.
 * Unauthorized copying, modification, or distribution is prohibited.
 * 
 * For licensing inquiries: info@hb3-accelerator.com
 * Website: https://hb3-accelerator.com
 * GitHub: https://github.com/HB3-ACCELERATOR
 */

const express = require('express');
const router = express.Router();
const UnifiedDeploymentService = require('../services/unifiedDeploymentService');
const unifiedDeploymentService = new UnifiedDeploymentService();
const logger = require('../utils/logger');
const auth = require('../middleware/auth');
const authService = require('../services/auth-service');
// –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –†–û–õ–ï–ô: –∏—Å–ø–æ–ª—å–∑—É–µ–º shared/permissions.js
const { hasPermission, ROLES, PERMISSIONS } = require('/app/shared/permissions');
const path = require('path');
const fs = require('fs');
const ethers = require('ethers'); // Added ethers for private key validation
const deploymentTracker = require('../utils/deploymentTracker');
const create2 = require('../utils/create2');
// verificationStore —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º contractVerificationService
// ContractVerificationService —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º Hardhat verify

/**
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–ø–ª–æ—è –≤ —Ñ–æ–Ω–µ
 */
async function executeDeploymentInBackground(deploymentId, dleParams) {
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ
    deploymentTracker.updateDeployment(deploymentId, {
      status: 'in_progress',
      stage: 'initializing'
    });
    
    deploymentTracker.addLog(deploymentId, 'üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞', 'info');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–ø–ª–æ–π —Å –ø–µ—Ä–µ–¥–∞—á–µ–π deploymentId –¥–ª—è WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    const result = await unifiedDeploymentService.createDLE(dleParams, deploymentId);
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º —É—Å–ø–µ—à–Ω–æ
    deploymentTracker.completeDeployment(deploymentId, result.data);
    
  } catch (error) {
    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å –æ—à–∏–±–∫–æ–π
    deploymentTracker.failDeployment(deploymentId, error);
  }
}

/**
 * @route   POST /api/dle-v2
 * @desc    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ DLE v2 (Digital Legal Entity)
 * @access  Private (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é admin)
 */
router.post('/', auth.requireAuth, auth.requireAdmin, async (req, res, next) => {
  try {
    const dleParams = req.body;
    logger.info('üî• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–µ–ø–ª–æ–π DLE v2');
    
    // –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä initialPartners –Ω–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω —è–≤–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥—Ä–µ—Å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!dleParams.initialPartners || dleParams.initialPartners.length === 0) {
      // –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –†–û–õ–ï–ô: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
      let userRole = ROLES.GUEST;
      if (req.user?.userAccessLevel) {
        if (req.user.userAccessLevel.level === 'readonly') {
          userRole = ROLES.READONLY;
        } else if (req.user.userAccessLevel.level === 'editor') {
          userRole = ROLES.EDITOR;
        }
      } else if (req.user?.id) {
        userRole = ROLES.USER;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
      if (!hasPermission(userRole, PERMISSIONS.MANAGE_SETTINGS)) {
        return res.status(403).json({ 
          success: false, 
          message: 'Insufficient permissions for DLE deployment' 
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–µ—Å—Å–∏–∏ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (!req.user || !req.user.walletAddress) {
        return res.status(400).json({ 
          success: false, 
          message: '–ù–µ —É–∫–∞–∑–∞–Ω –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤' 
        });
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥—Ä–µ—Å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      dleParams.initialPartners = [req.user.address || req.user.walletAddress];
      
      // –ï—Å–ª–∏ —Å—É–º–º—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (100% —Ç–æ–∫–µ–Ω–æ–≤)
      if (!dleParams.initialAmounts || dleParams.initialAmounts.length === 0) {
        dleParams.initialAmounts = ['1000000000000000000000000']; // 1,000,000 —Ç–æ–∫–µ–Ω–æ–≤
      }
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º deploymentId –∏–∑ –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    const deploymentId = req.body.deploymentId || deploymentTracker.createDeployment(dleParams);
    
    // –ï—Å–ª–∏ deploymentId –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –∏–∑ –∑–∞–ø—Ä–æ—Å–∞, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –¥–µ–ø–ª–æ–µ —Å —ç—Ç–∏–º ID
    if (req.body.deploymentId) {
      deploymentTracker.createDeployment(dleParams, req.body.deploymentId);
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π –≤ —Ñ–æ–Ω–µ (—Å await –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫!)
    await executeDeploymentInBackground(deploymentId, dleParams);
    
    logger.info(`üì§ –î–µ–ø–ª–æ–π –∑–∞–ø—É—â–µ–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ: ${deploymentId}`);
    
    // –°—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç —Å ID –¥–µ–ø–ª–æ—è
    res.json({
      success: true,
      message: '–î–µ–ø–ª–æ–π –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ',
      deploymentId: deploymentId
    });
    
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è:', error);
    res.status(500).json({
      success: false,
      message: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–µ–ø–ª–æ—è'
    });
  }
});

/**
 * @route   GET /api/dle-v2
 * @desc    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö DLE v2
 * @access  Public (–¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)
 */
router.get('/', async (req, res, next) => {
  try {
    const dles = await unifiedDeploymentService.getAllDeployments();
    
    res.json({
      success: true,
      data: dles
    });
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ DLE v2:', error);
    res.status(500).json({
      success: false,
      message: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ DLE v2'
    });
  }
});


/**
 * @route   GET /api/dle-v2/default-params
 * @desc    –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è DLE v2
 * @access  Private
 */
router.get('/default-params', auth.requireAuth, async (req, res, next) => {
  try {
    const defaultParams = {
      name: '',
      symbol: '',
      location: '',
      coordinates: '',
      jurisdiction: 1,
      oktmo: 45000000000,
      okvedCodes: [],
      kpp: 770101001,
      quorumPercentage: 51,
      initialPartners: [],
      initialAmounts: [],
      supportedChainIds: [1, 137, 56, 42161],
      currentChainId: 1
    };
    
    res.json({
      success: true,
      data: defaultParams
    });
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', error);
    res.status(500).json({
      success: false,
      message: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'
    });
  }
});

/**
 * @route   DELETE /api/dle-v2/:dleAddress
 * @desc    –£–¥–∞–ª–∏—Ç—å DLE v2 –ø–æ –∞–¥—Ä–µ—Å—É
 * @access  Private (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é admin)
 */
router.delete('/:dleAddress', auth.requireAuth, auth.requireAdmin, async (req, res, next) => {
  try {
    const { dleAddress } = req.params;
    logger.info(`–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ DLE v2 —Å –∞–¥—Ä–µ—Å–æ–º: ${dleAddress}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ DLE v2 –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ contracts-data/dles
    const dlesDir = path.join(__dirname, '../contracts-data/dles');
    const files = fs.readdirSync(dlesDir);
    
    let fileToDelete = null;
    
    // –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å DLE
    for (const file of files) {
      if (file.includes('dle-v2-') && file.endsWith('.json')) {
        const filePath = path.join(dlesDir, file);
        if (fs.statSync(filePath).isFile()) {
          try {
            const dleData = JSON.parse(fs.readFileSync(filePath, 'utf8'));
            if (dleData.dleAddress && dleData.dleAddress.toLowerCase() === dleAddress.toLowerCase()) {
              fileToDelete = filePath;
              break;
            }
          } catch (err) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${file}:`, err);
          }
        }
      }
    }
    
    if (!fileToDelete) {
      return res.status(404).json({
        success: false,
        message: `DLE v2 —Å –∞–¥—Ä–µ—Å–æ–º ${dleAddress} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`
      });
    }
    
    // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
    fs.unlinkSync(fileToDelete);
    
    logger.info(`DLE v2 —Å –∞–¥—Ä–µ—Å–æ–º ${dleAddress} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ`);
    
    res.json({
      success: true,
      message: `DLE v2 —Å –∞–¥—Ä–µ—Å–æ–º ${dleAddress} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ`
    });
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ DLE v2:', error);
    res.status(500).json({
      success: false,
      message: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ DLE v2'
    });
  }
});

/**
 * @route   GET /api/dle-v2/check-admin-tokens
 * @desc    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–¥—Ä–µ—Å–∞
 * @access  Public
 */
router.get('/check-admin-tokens', async (req, res, next) => {
  try {
    const { address } = req.query;
    
    if (!address) {
      return res.status(400).json({
        success: false,
        message: '–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤
    const userAccessLevel = await authService.getUserAccessLevel(address);
    res.json({
      success: true,
      data: {
        userAccessLevel: userAccessLevel,
        address: address,
        message: userAccessLevel.hasAccess ? '–ê–¥–º–∏–Ω—Å–∫–∏–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞–π–¥–µ–Ω—ã' : '–ê–¥–º–∏–Ω—Å–∫–∏–µ —Ç–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
      }
    });
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤:', error);
    res.status(500).json({
      success: false,
      message: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤'
    });
  }
});

/**
 * @route   POST /api/dle-v2/validate-private-key
 * @desc    –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏ –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
 * @access  Public
 */
router.post('/validate-private-key', async (req, res, next) => {
  try {
    const { privateKey } = req.body;
    
    if (!privateKey) {
      return res.status(400).json({
        success: false,
        message: '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω'
      });
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∫–ª—é—á (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    logger.info('–ü–æ–ª—É—á–µ–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', privateKey);
    logger.info('–î–ª–∏–Ω–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∫–ª—é—á–∞:', privateKey.length);
    logger.info('–¢–∏–ø –≤—Ö–æ–¥—è—â–µ–≥–æ –∫–ª—é—á–∞:', typeof privateKey);
    logger.info('–ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(req.body));
    
    try {
      // –û—á–∏—â–∞–µ–º –∫–ª—é—á –æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–∞ 0x –µ—Å–ª–∏ –µ—Å—Ç—å
      const cleanKey = privateKey.startsWith('0x') ? privateKey.slice(2) : privateKey;
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π –∫–ª—é—á (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
      logger.info('–û—á–∏—â–µ–Ω–Ω—ã–π –∫–ª—é—á:', cleanKey);
      logger.info('–î–ª–∏–Ω–∞ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞:', cleanKey.length);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ —Ñ–æ—Ä–º–∞—Ç (64 —Å–∏–º–≤–æ–ª–∞ –≤ hex)
      if (cleanKey.length !== 64 || !/^[a-fA-F0-9]+$/.test(cleanKey)) {
        logger.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞. –î–ª–∏–Ω–∞:', cleanKey.length, '–§–æ—Ä–º–∞—Ç:', /^[a-fA-F0-9]+$/.test(cleanKey));
        return res.status(400).json({
          success: false,
          message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞'
        });
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
      const wallet = new ethers.Wallet('0x' + cleanKey);
      const address = wallet.address;
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
      logger.info('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞:', address);
      
      res.json({
        success: true,
        data: {
          isValid: true,
          address: address,
          error: null
        }
      });
      
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞:', error);
      res.status(400).json({
        success: false,
        message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á'
      });
    }
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞:', error);
    res.status(500).json({
      success: false,
      message: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞'
    });
  }
});

/**
 * @route   GET /api/dle-v2/deployment-status/:deploymentId
 * @desc    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è
 * @access  Private
 */
router.get('/deployment-status/:deploymentId', auth.requireAuth, auth.requireAdmin, async (req, res) => {
  try {
    const { deploymentId } = req.params;
    
    const deployment = deploymentTracker.getDeployment(deploymentId);
    
    if (!deployment) {
      return res.status(404).json({
        success: false,
        message: '–î–µ–ø–ª–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    res.json({
      success: true,
      data: {
        id: deployment.id,
        status: deployment.status,
        stage: deployment.stage,
        progress: deployment.progress,
        networks: deployment.networks,
        startedAt: deployment.startedAt,
        updatedAt: deployment.updatedAt,
        logs: deployment.logs.slice(-50), // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 –ª–æ–≥–æ–≤
        error: deployment.error
      }
    });
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–ª–æ—è:', error);
    res.status(500).json({
      success: false,
      message: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞'
    });
  }
});

/**
 * @route   GET /api/dle-v2/deployment-result/:deploymentId
 * @desc    –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è
 * @access  Private
 */
router.get('/deployment-result/:deploymentId', auth.requireAuth, auth.requireAdmin, async (req, res) => {
  try {
    const { deploymentId } = req.params;
    
    const deployment = deploymentTracker.getDeployment(deploymentId);
    
    if (!deployment) {
      return res.status(404).json({
        success: false,
        message: '–î–µ–ø–ª–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    if (deployment.status !== 'completed') {
      return res.status(400).json({
        success: false,
        message: `–î–µ–ø–ª–æ–π –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${deployment.status}`,
        status: deployment.status
      });
    }
    
    res.json({
      success: true,
      data: {
        result: deployment.result,
        completedAt: deployment.completedAt,
        duration: deployment.completedAt ? deployment.completedAt - deployment.startedAt : null
      }
    });
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–µ–ø–ª–æ—è:', error);
    res.status(500).json({
      success: false,
      message: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'
    });
  }
});

/**
 * @route   GET /api/dle-v2/deployment-stats
 * @desc    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–µ–ø–ª–æ–µ–≤
 * @access  Private
 */
router.get('/deployment-stats', auth.requireAuth, auth.requireAdmin, async (req, res) => {
  try {
    const stats = deploymentTracker.getStats();
    const activeDeployments = deploymentTracker.getActiveDeployments();
    
    res.json({
      success: true,
      data: {
        stats,
        activeDeployments: activeDeployments.map(d => ({
          id: d.id,
          stage: d.stage,
          progress: d.progress,
          startedAt: d.startedAt
        }))
      }
    });
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ–ø–ª–æ–µ–≤:', error);
    res.status(500).json({
      success: false,
      message: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
    });
  }
});

module.exports = router; 

/**
 * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã (–ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è –∏–∑ app.js)
 */


// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å GUID –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –≤—ã–∑–æ–≤–æ–º)
router.post('/verify/save-guid', auth.requireAuth, auth.requireAdmin, async (req, res) => {
  try {
    const { address, chainId, guid } = req.body || {};
    if (!address || !chainId || !guid) return res.status(400).json({ success: false, message: 'address, chainId, guid –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    // verificationStore —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º contractVerificationService
    const data = { guid, status: 'submitted' };
    return res.json({ success: true, data });
  } catch (e) {
    return res.status(500).json({ success: false, message: e.message });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –∞–¥—Ä–µ—Å—É DLE
router.get('/verify/status/:address', auth.requireAuth, async (req, res) => {
  try {
    const { address } = req.params;
    // verificationStore —É–¥–∞–ª–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
    const data = {};
    return res.json({ success: true, data });
  } catch (e) {
    return res.status(500).json({ success: false, message: e.message });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, –æ–ø—Ä–æ—Å–∏–≤ Etherscan V2
router.post('/verify/refresh/:address', auth.requireAuth, auth.requireAdmin, async (req, res) => {
  try {
    const { address } = req.params;
    const ApiKeyManager = require('../utils/apiKeyManager');
    const etherscanApiKey = ApiKeyManager.getEtherscanApiKey({}, req.body);
    // verificationStore —É–¥–∞–ª–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
    const data = {};
    if (!data || !data.chains) return res.json({ success: true, data });

    // –ï—Å–ª–∏ guid –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Ä–∞–Ω–µ–µ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ chainid ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é (resubmit)
    const needResubmit = Object.values(data.chains).some(c => !c.guid || /Missing or unsupported chainid/i.test(c.status || ''));
    if (needResubmit && etherscanApiKey) {
      // –ù–∞–π—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫—É DLE
        const list = unifiedDeploymentService.getAllDLEs();
      const card = list.find(x => x?.dleAddress && x.dleAddress.toLowerCase() === address.toLowerCase());
      if (card) {
        const deployParams = {
          name: card.name,
          symbol: card.symbol,
          location: card.location,
          coordinates: card.coordinates,
          jurisdiction: card.jurisdiction,
          oktmo: card.oktmo,
          okvedCodes: Array.isArray(card.okvedCodes) ? card.okvedCodes : [],
          kpp: card.kpp,
          quorumPercentage: card.quorumPercentage,
          initialPartners: Array.isArray(card.initialPartners) ? card.initialPartners : [],
          initialAmounts: Array.isArray(card.initialAmounts) ? card.initialAmounts : [],
          supportedChainIds: Array.isArray(card.networks) ? card.networks.map(n => n.chainId).filter(Boolean) : (card.governanceSettings?.supportedChainIds || []),
          currentChainId: card.governanceSettings?.currentChainId || 1 // governance chain, –Ω–µ –ø–µ—Ä–≤–∞—è —Å–µ—Ç—å
        };
        const deployResult = { success: true, data: { dleAddress: card.dleAddress, networks: card.networks || [] } };
        try {
          await unifiedDeploymentService.autoVerifyAcrossChains({ deployParams, deployResult, apiKey: etherscanApiKey });
        } catch (_) {}
      }
    }

    // –î–∞–ª–µ–µ ‚Äî –æ–±—ã—á–Ω—ã–π –æ–ø—Ä–æ—Å –ø–æ –∏–º–µ—é—â–∏–º—Å—è guid
    const latest = verificationStore.read(address);
    const chains = Object.values(latest.chains);
    for (const c of chains) {
      if (!c.guid || !c.chainId) continue;
      try {
        const st = await etherscanV2.checkStatus(c.chainId, c.guid, etherscanApiKey);
        // verificationStore —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º contractVerificationService
      } catch (e) {
        // verificationStore —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º contractVerificationService
      }
    }
    // verificationStore —É–¥–∞–ª–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
    const updated = {};
    return res.json({ success: true, data: updated });
  } catch (e) {
    return res.status(500).json({ success: false, message: e.message });
  }
});

// –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–∞ Etherscan V2 –¥–ª—è —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ DLE
router.post('/verify/resubmit/:address', auth.requireAuth, auth.requireAdmin, async (req, res) => {
  try {
    const { address } = req.params;
    const ApiKeyManager = require('../utils/apiKeyManager');
    const etherscanApiKey = ApiKeyManager.getEtherscanApiKey({}, req.body);
    
    if (!etherscanApiKey) {
      return res.status(400).json({ success: false, message: 'etherscanApiKey –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }
    // –ù–∞–π—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫—É DLE –ø–æ –∞–¥—Ä–µ—Å—É
        const list = unifiedDeploymentService.getAllDLEs();
    const card = list.find(x => x?.dleAddress && x.dleAddress.toLowerCase() === address.toLowerCase());
    if (!card) return res.status(404).json({ success: false, message: '–ö–∞—Ä—Ç–æ—á–∫–∞ DLE –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });

    // –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å deployParams –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏
    const deployParams = {
      name: card.name,
      symbol: card.symbol,
      location: card.location,
      coordinates: card.coordinates,
      jurisdiction: card.jurisdiction,
      oktmo: card.oktmo,
      okvedCodes: Array.isArray(card.okvedCodes) ? card.okvedCodes : [],
      kpp: card.kpp,
      quorumPercentage: card.quorumPercentage,
      initialPartners: Array.isArray(card.initialPartners) ? card.initialPartners : [],
      initialAmounts: Array.isArray(card.initialAmounts) ? card.initialAmounts : [],
      supportedChainIds: Array.isArray(card.networks) ? card.networks.map(n => n.chainId).filter(Boolean) : (card.governanceSettings?.supportedChainIds || []),
      currentChainId: card.governanceSettings?.currentChainId || 1 // governance chain, –Ω–µ –ø–µ—Ä–≤–∞—è —Å–µ—Ç—å
    };

    // –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å deployResult –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏
    const deployResult = { success: true, data: { dleAddress: card.dleAddress, networks: card.networks || [] } };

    await unifiedDeploymentService.autoVerifyAcrossChains({ deployParams, deployResult, apiKey: etherscanApiKey });
    // verificationStore —É–¥–∞–ª–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
    const updated = {};
    return res.json({ success: true, data: updated });
  } catch (e) {
    return res.status(500).json({ success: false, message: e.message });
  }
});

// –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –≤–æ –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ç—è—Ö
router.post('/precheck', auth.requireAuth, auth.requireAdmin, async (req, res) => {
  try {
    const { supportedChainIds, privateKey } = req.body || {};
    if (!privateKey) return res.status(400).json({ success: false, message: '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω' });
    if (!Array.isArray(supportedChainIds) || supportedChainIds.length === 0) {
      return res.status(400).json({ success: false, message: '–ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã —Å–µ—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏' });
    }
    const result = await unifiedDeploymentService.checkBalances(supportedChainIds, privateKey);
    return res.json({ success: true, data: result });
  } catch (e) {
    return res.status(500).json({ success: false, message: e.message });
  }
});

