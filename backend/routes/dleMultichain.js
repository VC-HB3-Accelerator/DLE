const express = require('express');
const router = express.Router();
const deployParamsService = require('../services/deployParamsService');

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–µ—Ç–∏ –¥–ª—è –º—É–ª—å—Ç–∏—á–µ–π–Ω –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
 * POST /api/dle-core/get-multichain-contracts
 */
router.post('/get-multichain-contracts', async (req, res) => {
  try {
    const { originalContract, targetChainId } = req.body;
    
    console.log('üîç [MULTICHAIN] –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è –º—É–ª—å—Ç–∏—á–µ–π–Ω –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:', {
      originalContract,
      targetChainId
    });
    
    if (!originalContract || !targetChainId) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ —É–∫–∞–∑–∞–Ω originalContract –∏–ª–∏ targetChainId'
      });
    }
    
    // –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–µ—Ç–∏
    // –î–ª—è –º—É–ª—å—Ç–∏—á–µ–π–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –∞–¥—Ä–µ—Å–æ–º (–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–ø–ª–æ–π)
    // –∏–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ç—è—Ö —Å —Ä–∞–∑–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å —Ç–∞–∫–∏–º –∂–µ –∞–¥—Ä–µ—Å–æ–º –≤ —Ü–µ–ª–µ–≤–æ–π —Å–µ—Ç–∏
    const contractsInTargetNetwork = await deployParamsService.getContractsByChainId(targetChainId);
    
    console.log('üìä [MULTICHAIN] –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ —Ü–µ–ª–µ–≤–æ–π —Å–µ—Ç–∏:', contractsInTargetNetwork);
    
    // –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤ —Ü–µ–ª–µ–≤–æ–π —Å–µ—Ç–∏ (–≤—Å–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ targetChainId —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã)
    const targetContract = contractsInTargetNetwork[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤ —Ü–µ–ª–µ–≤–æ–π —Å–µ—Ç–∏
    
    if (targetContract) {
      console.log('‚úÖ [MULTICHAIN] –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤ —Ü–µ–ª–µ–≤–æ–π —Å–µ—Ç–∏:', targetContract.dleAddress);
      
      return res.json({
        success: true,
        contractAddress: targetContract.dleAddress,
        chainId: targetChainId,
        source: 'database'
      });
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤ —Ü–µ–ª–µ–≤–æ–π —Å–µ—Ç–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –º—É–ª—å—Ç–∏—á–µ–π–Ω —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
    // —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –∞–¥—Ä–µ—Å–æ–º (CREATE2)
    const { ethers } = require('ethers');
    
    // –ü–æ–ª—É—á–∞–µ–º RPC URL –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è
    let rpcUrl;
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è
      const latestParams = await deployParamsService.getLatestDeployParams(1);
      if (latestParams.length > 0) {
        const params = latestParams[0];
        const rpcUrls = params.rpcUrls || params.rpc_urls || {};
        rpcUrl = rpcUrls[targetChainId];
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
      if (!rpcUrl) {
        const fallbackConfigs = {
          '11155111': null,
          '17000': null,
          '421614': null,
          '84532': null
        };
        rpcUrl = fallbackConfigs[targetChainId];
      }
      
      if (!rpcUrl) {
        return res.status(400).json({
          success: false,
          error: `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å–µ—Ç—å: ${targetChainId}`
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è RPC URL:', error);
      return res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∏'
      });
    }
    
    try {
      const provider = new ethers.JsonRpcProvider(await rpcProviderService.getRpcUrlByChainId(chainId));
      const contractCode = await provider.getCode(originalContract);
      
      if (contractCode && contractCode !== '0x') {
        console.log('‚úÖ [MULTICHAIN] –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ü–µ–ª–µ–≤–æ–π —Å–µ—Ç–∏ —Å —Ç–µ–º –∂–µ –∞–¥—Ä–µ—Å–æ–º (CREATE2)');
        
        return res.json({
          success: true,
          contractAddress: originalContract,
          chainId: targetChainId,
          source: 'blockchain'
        });
      }
    } catch (blockchainError) {
      console.warn('‚ö†Ô∏è [MULTICHAIN] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ:', blockchainError.message);
    }
    
    // –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    console.log('‚ùå [MULTICHAIN] –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ü–µ–ª–µ–≤–æ–π —Å–µ—Ç–∏');
    
    return res.json({
      success: false,
      error: '–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ü–µ–ª–µ–≤–æ–π —Å–µ—Ç–∏'
    });
    
  } catch (error) {
    console.error('‚ùå [MULTICHAIN] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º—É–ª—å—Ç–∏—á–µ–π–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', error);
    
    return res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

module.exports = router;