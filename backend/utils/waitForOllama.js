/**
 * Copyright (c) 2024-2025 –¢–∞—Ä–∞–±–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á
 * All rights reserved.
 * 
 * This software is proprietary and confidential.
 * Unauthorized copying, modification, or distribution is prohibited.
 * 
 * For licensing inquiries: info@hb3-accelerator.com
 * Website: https://hb3-accelerator.com
 * GitHub: https://github.com/HB3-ACCELERATOR
 */

const logger = require('./logger');
const ollamaConfig = require('../services/ollamaConfig');

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å –≤ –ø–∞–º—è—Ç—å —á–µ—Ä–µ–∑ /api/ps
 * –ù–ï —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏ (–≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç /api/generate)
 * @param {string} modelName - –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: qwen2.5:7b)
 * @returns {Promise<boolean>} true –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –≤ –ø–∞–º—è—Ç–∏
 */
async function isModelLoaded(modelName) {
  try {
    const axios = require('axios');
    const baseUrl = ollamaConfig.getBaseUrl();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º /api/ps - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫–∏–µ –º–æ–¥–µ–ª–∏ —Å–µ–π—á–∞—Å –≤ –ø–∞–º—è—Ç–∏
    // –≠—Ç–æ—Ç endpoint –ù–ï —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏!
    const response = await axios.get(`${baseUrl}/api/ps`, {
      timeout: 3000
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—à–∞ –º–æ–¥–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö
    if (response.data && response.data.models) {
      return response.data.models.some(m => {
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –±–µ–∑ —Ç–µ–≥–∞ (qwen2.5 == qwen2.5:7b)
        const modelBaseName = modelName.split(':')[0];
        const loadedBaseName = (m.name || m.model || '').split(':')[0];
        return loadedBaseName === modelBaseName;
      });
    }
    
    return false;
  } catch (error) {
    // API ps –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö Ollama
    // –ò–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
    return false;
  }
}

/**
 * –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Ollama –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –≤ –ø–∞–º—è—Ç—å
 * Ollama –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –¥–æ 4 –º–∏–Ω—É—Ç –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
 * entrypoint.sh –∑–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å qwen2.5:7b –≤ –ø–∞–º—è—Ç—å —Å keep_alive=24h
 * 
 * @param {Object} options - –û–ø—Ü–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è
 * @param {number} options.maxWaitTime - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ –º—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4 –º–∏–Ω—É—Ç—ã)
 * @param {number} options.retryInterval - –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ –º—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 —Å–µ–∫—É–Ω–¥)
 * @param {boolean} options.required - –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ª–∏ –∂–¥–∞—Ç—å Ollama (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false)
 * @returns {Promise<boolean>} true –µ—Å–ª–∏ Ollama –≥–æ—Ç–æ–≤, false –µ—Å–ª–∏ —Ç–∞–π–º–∞—É—Ç (–∏ required=false)
 */
async function waitForOllama(options = {}) {
  const {
    maxWaitTime = parseInt(process.env.OLLAMA_WAIT_TIME) || 4 * 60 * 1000,
    retryInterval = parseInt(process.env.OLLAMA_RETRY_INTERVAL) || 5000,
    required = process.env.OLLAMA_REQUIRED === 'true' || false
  } = options;

  const startTime = Date.now();
  let attempt = 0;
  const maxAttempts = Math.ceil(maxWaitTime / retryInterval);

  logger.info(`[waitForOllama] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Ollama –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –≤ –ø–∞–º—è—Ç—å (–º–∞–∫—Å. ${maxWaitTime/1000}—Å, –∏–Ω—Ç–µ—Ä–≤–∞–ª ${retryInterval/1000}—Å)...`);

  while (Date.now() - startTime < maxWaitTime) {
    attempt++;
    
    try {
      // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama API
      const healthStatus = await ollamaConfig.checkHealth();
      
      if (healthStatus.status === 'ok') {
        const model = healthStatus.model;
        
        // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å –≤ –ø–∞–º—è—Ç—å
        const modelReady = await isModelLoaded(model);
        
        if (modelReady) {
          const waitedTime = ((Date.now() - startTime) / 1000).toFixed(1);
          logger.info(`[waitForOllama] ‚úÖ Ollama –≥–æ—Ç–æ–≤! –ú–æ–¥–µ–ª—å ${model} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ –ø–∞–º—è—Ç—å (–æ–∂–∏–¥–∞–Ω–∏–µ ${waitedTime}—Å, –ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts})`);
          logger.info(`[waitForOllama] üìä Ollama: ${healthStatus.baseUrl}, –¥–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: ${healthStatus.availableModels}`);
          return true;
        } else {
          logger.info(`[waitForOllama] ‚è≥ Ollama API –≥–æ—Ç–æ–≤, –Ω–æ –º–æ–¥–µ–ª—å ${model} –µ—â—ë –≥—Ä—É–∑–∏—Ç—Å—è –≤ –ø–∞–º—è—Ç—å... (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts})`);
        }
      } else {
        logger.warn(`[waitForOllama] ‚ö†Ô∏è Ollama API –Ω–µ –≥–æ—Ç–æ–≤ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts}): ${healthStatus.error}`);
      }
      
    } catch (error) {
      logger.warn(`[waitForOllama] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Ollama (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts}): ${error.message}`);
    }

    // –ï—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∂–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π
    if (Date.now() - startTime < maxWaitTime) {
      const remainingTime = Math.max(0, maxWaitTime - (Date.now() - startTime));
      const nextRetry = Math.min(retryInterval, remainingTime);
      
      if (nextRetry > 0) {
        await new Promise(resolve => setTimeout(resolve, nextRetry));
      }
    }
  }

  // –¢–∞–π–º–∞—É—Ç –∏—Å—Ç–µ–∫
  const totalWaitTime = ((Date.now() - startTime) / 1000).toFixed(1);
  
  if (required) {
    const error = `Ollama –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ—Å–ª–µ ${totalWaitTime}—Å –æ–∂–∏–¥–∞–Ω–∏—è (${attempt} –ø–æ–ø—ã—Ç–æ–∫)`;
    logger.error(`[waitForOllama] ‚ùå ${error}`);
    throw new Error(error);
  } else {
    logger.warn(`[waitForOllama] ‚ö†Ô∏è Ollama –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ—Å–ª–µ ${totalWaitTime}—Å –æ–∂–∏–¥–∞–Ω–∏—è (${attempt} –ø–æ–ø—ã—Ç–æ–∫). –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ AI.`);
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Ollama (–æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞, –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è)
 * @returns {Promise<boolean>} true –µ—Å–ª–∏ Ollama –≥–æ—Ç–æ–≤
 */
async function isOllamaReady() {
  try {
    const healthStatus = await ollamaConfig.checkHealth();
    if (healthStatus.status !== 'ok') return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å
    return await isModelLoaded(healthStatus.model);
  } catch (error) {
    return false;
  }
}

module.exports = {
  waitForOllama,
  isOllamaReady
};

