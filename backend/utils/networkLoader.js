/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ç–µ–π –∏–∑ deploy_params
 * Copyright (c) 2024-2025 –¢–∞—Ä–∞–±–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á
 */

const DeployParamsService = require('../services/deployParamsService');

class NetworkLoader {
  constructor() {
    this.cache = new Map();
    this.cacheTimeout = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
    this.fallbackChainIds = [11155111, 421614, 84532, 17000];
  }

  /**
   * –û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ deploy_params
   * @param {string} field - –ü–æ–ª–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
   * @param {boolean} useCache - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à
   * @returns {Promise<Array|Object>} - –î–∞–Ω–Ω—ã–µ –∏–∑ deploy_params
   */
  async _loadFromDatabase(field, useCache = true) {
    const cacheKey = field;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if (useCache && this.cache.has(cacheKey)) {
      const cached = this.cache.get(cacheKey);
      if (Date.now() - cached.timestamp < this.cacheTimeout) {
        console.log(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ${field}`);
        return cached.data;
      }
    }

    try {
      const deployParamsService = new DeployParamsService();
      const latestParams = await deployParamsService.getLatestDeployParams(1);
      await deployParamsService.close();
      
      if (latestParams.length > 0) {
        const params = latestParams[0];
        let data;
        
        switch (field) {
          case 'supportedChainIds':
            data = params.supportedChainIds || params.supported_chain_ids || [];
            break;
          case 'rpcUrls':
            data = params.rpcUrls || params.rpc_urls || {};
            break;
          default:
            data = params[field] || {};
        }
        
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã ${field} –∏–∑ deploy_params:`, Array.isArray(data) ? data : Object.keys(data));
        
        // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        this.cache.set(cacheKey, {
          data: data,
          timestamp: Date.now()
        });
        
        return data;
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ deploy_params
      console.log(`‚ö†Ô∏è –ù–µ—Ç ${field} –≤ deploy_params`);
      return field === 'supportedChainIds' ? this.fallbackChainIds : {};
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${field}:`, error.message);
      return field === 'supportedChainIds' ? this.fallbackChainIds : {};
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ç–∏ –∏–∑ deploy_params
   * @param {boolean} useCache - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à
   * @returns {Promise<Array>} - –ú–∞—Å—Å–∏–≤ chainId
   */
  async getSupportedChainIds(useCache = true) {
    return await this._loadFromDatabase('supportedChainIds', useCache);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å RPC URLs –∏–∑ deploy_params
   * @param {boolean} useCache - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à
   * @returns {Promise<Object>} - –û–±—ä–µ–∫—Ç —Å RPC URLs
   */
  async getRpcUrls(useCache = true) {
    return await this._loadFromDatabase('rpcUrls', useCache);
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à
   */
  clearCache() {
    this.cache.clear();
    console.log('üóëÔ∏è –ö–µ—à NetworkLoader –æ—á–∏—â–µ–Ω');
  }
}

// –°–æ–∑–¥–∞–µ–º singleton
const networkLoader = new NetworkLoader();

module.exports = {
  NetworkLoader,
  networkLoader,
  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
  getSupportedChainIds: () => networkLoader.getSupportedChainIds(),
  getRpcUrls: () => networkLoader.getRpcUrls(),
  clearCache: () => networkLoader.clearCache()
};
