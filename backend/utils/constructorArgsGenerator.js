/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –¥–ª—è DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–µ–ø–ª–æ—è –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –¥–ª—è DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * @param {number} chainId - ID —Å–µ—Ç–∏ –¥–ª—è –¥–µ–ø–ª–æ—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
 */
function generateDLEConstructorArgs(params, chainId = null) {
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  if (!params) {
    throw new Error('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã');
  }

  // –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã DLE
  const dleConfig = {
    name: params.name || '',
    symbol: params.symbol || '',
    location: params.location || '',
    coordinates: params.coordinates || '',
    jurisdiction: params.jurisdiction ? BigInt(String(params.jurisdiction)) : 0n,
    okvedCodes: (params.okvedCodes || params.okved_codes || []).map(code => {
      // OKVED –∫–æ–¥—ã –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è —Å—Ç—Ä–æ–∫–∞–º–∏, —Ç–∞–∫ –∫–∞–∫ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ DLE.sol 
      // –ø–æ–ª–µ okvedCodes –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ string[], –∞ –Ω–µ uint256[]
      if (typeof code === 'string') {
        return code;
      }
      return code.toString();
    }),
    kpp: params.kpp ? BigInt(String(params.kpp)) : 0n,
    quorumPercentage: params.quorumPercentage ? BigInt(String(params.quorumPercentage)) : 50n,
    initialPartners: params.initialPartners || params.initial_partners || [],
    // –£–º–Ω–æ–∂–∞–µ–º initialAmounts –Ω–∞ 1e18 –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ wei
    initialAmounts: (params.initialAmounts || params.initial_amounts || []).map(amount => BigInt(String(amount)) * BigInt(1e18)),
    supportedChainIds: (params.supportedChainIds || params.supported_chain_ids || []).map(id => BigInt(String(id)))
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º initializer
  const initializer = params.initializer || params.initialPartners?.[0] || "0x0000000000000000000000000000000000000000";

  return {
    dleConfig,
    initializer
  };
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –≤ —Å—Ç—Ä–æ–∫–∏)
 * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * @param {number} chainId - ID —Å–µ—Ç–∏ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {Array} –ú–∞—Å—Å–∏–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
function generateVerificationArgs(params, chainId = null) {
  const { dleConfig, initializer } = generateDLEConstructorArgs(params, chainId);
  
  // –î–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å BigInt –≤ —Å—Ç—Ä–æ–∫–∏
  const verificationConfig = {
    ...dleConfig,
    initialAmounts: dleConfig.initialAmounts.map(amount => amount.toString()),
    supportedChainIds: dleConfig.supportedChainIds.map(id => id.toString())
  };

  return [
    verificationConfig,
    initializer
  ];
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –¥–ª—è –¥–µ–ø–ª–æ—è (—Å BigInt)
 * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * @param {number} chainId - ID —Å–µ—Ç–∏ –¥–ª—è –¥–µ–ø–ª–æ—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –¥–ª—è –¥–µ–ø–ª–æ—è
 */
function generateDeploymentArgs(params, chainId = null) {
  const { dleConfig, initializer } = generateDLEConstructorArgs(params, chainId);
  
  return {
    dleConfig,
    initializer
  };
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
 * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è
 * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
function validateConstructorArgs(params) {
  const errors = [];
  const warnings = [];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
  if (!params.name) errors.push('name –Ω–µ —É–∫–∞–∑–∞–Ω');
  if (!params.symbol) errors.push('symbol –Ω–µ —É–∫–∞–∑–∞–Ω');
  if (!params.location) errors.push('location –Ω–µ —É–∫–∞–∑–∞–Ω');
  if (!params.coordinates) errors.push('coordinates –Ω–µ —É–∫–∞–∑–∞–Ω—ã');
  if (!params.jurisdiction) errors.push('jurisdiction –Ω–µ —É–∫–∞–∑–∞–Ω');
  if ((!params.okvedCodes || !Array.isArray(params.okvedCodes)) && (!params.okved_codes || !Array.isArray(params.okved_codes))) {
    errors.push('okvedCodes –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º');
  }
  if (!params.initialPartners || !Array.isArray(params.initialPartners)) errors.push('initialPartners –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º');
  if (!params.initialAmounts || !Array.isArray(params.initialAmounts)) errors.push('initialAmounts –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º');
  if (!params.supportedChainIds || !Array.isArray(params.supportedChainIds)) errors.push('supportedChainIds –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
  if (params.initialPartners && params.initialAmounts && 
      params.initialPartners.length !== params.initialAmounts.length) {
    errors.push('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ initialPartners –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É initialAmounts');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
  if (params.quorumPercentage && (params.quorumPercentage < 1 || params.quorumPercentage > 100)) {
    warnings.push('quorumPercentage –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100');
  }

  if (params.initialAmounts) {
    const negativeAmounts = params.initialAmounts.filter(amount => amount < 0);
    if (negativeAmounts.length > 0) {
      errors.push('initialAmounts —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è');
    }
  }

  return {
    isValid: errors.length === 0,
    errors,
    warnings
  };
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è
 * @param {string} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç (deployment/verification)
 */
function logConstructorArgs(params, context = 'unknown') {
  console.log(`üìä [${context.toUpperCase()}] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞:`);
  console.log(`  name: "${params.name}"`);
  console.log(`  symbol: "${params.symbol}"`);
  console.log(`  location: "${params.location}"`);
  console.log(`  coordinates: "${params.coordinates}"`);
  console.log(`  jurisdiction: ${params.jurisdiction}`);
  const okvedCodes = params.okvedCodes || params.okved_codes || [];
  console.log(`  okvedCodes: [${okvedCodes.join(', ')}]`);
  console.log(`  kpp: ${params.kpp}`);
  console.log(`  quorumPercentage: ${params.quorumPercentage}`);
  console.log(`  initialPartners: [${params.initialPartners.join(', ')}]`);
  console.log(`  initialAmounts: [${params.initialAmounts.join(', ')}]`);
  console.log(`  supportedChainIds: [${params.supportedChainIds.join(', ')}]`);
  console.log(`  governanceChainId: 1 (Ethereum)`);
  console.log(`  initializer: ${params.initializer}`);
}

module.exports = {
  generateDLEConstructorArgs,
  generateVerificationArgs,
  generateDeploymentArgs,
  validateConstructorArgs,
  logConstructorArgs
};
