/**
 * Copyright (c) 2024-2025 –¢–∞—Ä–∞–±–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á
 * All rights reserved.
 * 
 * This software is proprietary and confidential.
 * Unauthorized copying, modification, or distribution is prohibited.
 * 
 * For licensing inquiries: info@hb3-accelerator.com
 * Website: https://hb3-accelerator.com
 * GitHub: https://github.com/HB3-ACCELERATOR
 */

const crypto = require('crypto');
const EventEmitter = require('events');

class DeploymentTracker extends EventEmitter {
  constructor() {
    super();
    this.deployments = new Map(); // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis
    this.logger = require('../utils/logger');
  }
  
  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–µ–ø–ª–æ–π
  createDeployment(params) {
    const deploymentId = this.generateDeploymentId();
    
    const deployment = {
      id: deploymentId,
      status: 'pending',
      stage: 'initializing',
      progress: 0,
      startedAt: new Date(),
      updatedAt: new Date(),
      params,
      networks: {},
      logs: [],
      result: null,
      error: null
    };
    
    this.deployments.set(deploymentId, deployment);
    this.logger.info(`üìù –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–µ–ø–ª–æ–π: ${deploymentId}`);
    
    return deploymentId;
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è
  getDeployment(deploymentId) {
    return this.deployments.get(deploymentId);
  }
  
  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è
  updateDeployment(deploymentId, updates) {
    const deployment = this.deployments.get(deploymentId);
    if (!deployment) {
      this.logger.error(`‚ùå –î–µ–ø–ª–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω: ${deploymentId}`);
      return false;
    }
    
    Object.assign(deployment, updates, { updatedAt: new Date() });
    this.deployments.set(deploymentId, deployment);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ WebSocket
    this.emit('deployment_updated', {
      deploymentId,
      ...updates
    });
    
    return true;
  }
  
  // –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥
  addLog(deploymentId, message, type = 'info') {
    const deployment = this.deployments.get(deploymentId);
    if (!deployment) return false;
    
    const logEntry = {
      timestamp: new Date(),
      message,
      type
    };
    
    deployment.logs.push(logEntry);
    deployment.updatedAt = new Date();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–≥ —á–µ—Ä–µ–∑ WebSocket (–±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
    this.emit('deployment_updated', {
      deploymentId,
      type: 'deployment_log',
      log: logEntry
    });
    
    return true;
  }
  
  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ç–∏
  updateNetworkStatus(deploymentId, network, status, address = null, message = null) {
    const deployment = this.deployments.get(deploymentId);
    if (!deployment) return false;
    
    deployment.networks[network] = {
      status,
      address,
      message,
      updatedAt: new Date()
    };
    
    deployment.updatedAt = new Date();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
    this.emit('deployment_updated', {
      deploymentId,
      type: 'deployment_network_update',
      network,
      status,
      address,
      message
    });
    
    return true;
  }
  
  // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
  updateProgress(deploymentId, stage, progress, message = null) {
    const updates = {
      stage,
      progress,
      status: progress >= 100 ? 'completed' : 'in_progress'
    };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è (—Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
    const deployment = this.deployments.get(deploymentId);
    if (deployment) {
      Object.assign(deployment, updates, { updatedAt: new Date() });
      this.deployments.set(deploymentId, deployment);
    }
    
    // –õ–æ–≥ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ updateDeployment, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
  }
  
  // –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ
  completeDeployment(deploymentId, result) {
    const updates = {
      status: 'completed',
      progress: 100,
      result,
      completedAt: new Date()
    };
    
    this.updateDeployment(deploymentId, updates);
    
    // –°–æ–±—ã—Ç–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ updateDeployment
    
    this.logger.info(`‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω: ${deploymentId}`);
  }
  
  // –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–ø–ª–æ–π —Å –æ—à–∏–±–∫–æ–π
  failDeployment(deploymentId, error) {
    const updates = {
      status: 'failed',
      error: error.message || error,
      failedAt: new Date()
    };
    
    this.updateDeployment(deploymentId, updates);
    
    // –°–æ–±—ã—Ç–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ updateDeployment
    
    this.logger.error(`‚ùå –î–µ–ø–ª–æ–π –ø—Ä–æ–≤–∞–ª–µ–Ω: ${deploymentId}`, error);
  }
  
  // –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–µ–ø–ª–æ–∏ (–≤—ã–∑—ã–≤–∞—Ç—å –ø–æ –∫—Ä–æ–Ω—É)
  cleanupOldDeployments(olderThanHours = 24) {
    const cutoff = new Date(Date.now() - olderThanHours * 60 * 60 * 1000);
    let cleaned = 0;
    
    for (const [id, deployment] of this.deployments.entries()) {
      if (deployment.updatedAt < cutoff && ['completed', 'failed'].includes(deployment.status)) {
        this.deployments.delete(id);
        cleaned++;
      }
    }
    
    if (cleaned > 0) {
      this.logger.info(`üßπ –û—á–∏—â–µ–Ω–æ ${cleaned} —Å—Ç–∞—Ä—ã—Ö –¥–µ–ø–ª–æ–µ–≤`);
    }
  }
  
  // –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
  generateDeploymentId() {
    return `deploy_${Date.now()}_${crypto.randomBytes(4).toString('hex')}`;
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–ø–ª–æ–∏
  getActiveDeployments() {
    const active = [];
    for (const deployment of this.deployments.values()) {
      if (['pending', 'in_progress'].includes(deployment.status)) {
        active.push(deployment);
      }
    }
    return active;
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  getStats() {
    const stats = {
      total: this.deployments.size,
      pending: 0,
      inProgress: 0,
      completed: 0,
      failed: 0
    };
    
    for (const deployment of this.deployments.values()) {
      switch (deployment.status) {
        case 'pending':
          stats.pending++;
          break;
        case 'in_progress':
          stats.inProgress++;
          break;
        case 'completed':
          stats.completed++;
          break;
        case 'failed':
          stats.failed++;
          break;
      }
    }
    
    return stats;
  }
}

// Singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
const deploymentTracker = new DeploymentTracker();

module.exports = deploymentTracker;
