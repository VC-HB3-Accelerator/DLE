/**
 * Copyright (c) 2024-2025 –¢–∞—Ä–∞–±–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á
 * All rights reserved.
 * 
 * This software is proprietary and confidential.
 * Unauthorized copying, modification, or distribution is prohibited.
 * 
 * For licensing inquiries: info@hb3-accelerator.com
 * Website: https://hb3-accelerator.com
 * GitHub: https://github.com/HB3-ACCELERATOR
 */

const WebSocket = require('ws');
const tokenBalanceService = require('./services/tokenBalanceService');
const deploymentTracker = require('./utils/deploymentTracker');
const deploymentWebSocketService = require('./services/deploymentWebSocketService');

let wss = null;
// –•—Ä–∞–Ω–∏–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ userId –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const wsClients = new Map(); // userId -> Set of WebSocket connections

// –ö—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–µ–≥–æ–≤
const tagsChangeCache = new Map();
const TAGS_CACHE_TTL = 5000; // 5 —Å–µ–∫—É–Ω–¥

// –î–µ–±–∞—É–Ω—Å –¥–ª—è broadcastTagsUpdate
let tagsUpdateTimeout = null;
const TAGS_UPDATE_DEBOUNCE = 100; // 100ms

function initWSS(server) {
  wss = new WebSocket.Server({ server, path: '/ws' });
  console.log('üîå [WebSocket] –°–µ—Ä–≤–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–∞ –ø—É—Ç–∏ /ws');
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º deploymentWebSocketService —Å WebSocket —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è wss
  deploymentWebSocketService.initialize(server, wss);
  
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º deployment tracker –∫ WebSocket
  deploymentTracker.on('deployment_updated', (data) => {
    broadcastDeploymentUpdate(data);
  });
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è deploymentWebSocketService –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è wss
  console.log('[wsHub] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º deploymentWebSocketService —Å wss:', !!wss);
  deploymentWebSocketService.setWebSocketServer(wss);
  console.log('[wsHub] deploymentWebSocketService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  
  wss.on('connection', (ws, req) => {
    console.log('üîå [WebSocket] –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
    console.log('üîå [WebSocket] IP –∫–ª–∏–µ–Ω—Ç–∞:', req.socket.remoteAddress);
    console.log('üîå [WebSocket] User-Agent:', req.headers['user-agent']);
    console.log('üîå [WebSocket] Origin:', req.headers.origin);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
    if (!wsClients.has('anonymous')) {
      wsClients.set('anonymous', new Set());
    }
    wsClients.get('anonymous').add(ws);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    ws.on('message', (message) => {
      try {
        const data = JSON.parse(message);
        // console.log('üì® [WebSocket] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);
        
        if (data.type === 'auth' && data.userId) {
          // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          authenticateUser(ws, data.userId);
        }
        
        if (data.type === 'ping') {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º pong –æ—Ç–≤–µ—Ç
          ws.send(JSON.stringify({ 
            type: 'pong', 
            timestamp: data.timestamp 
          }));
        }
        
        if (data.type === 'request_token_balances' && data.address) {
          // –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤
          handleTokenBalancesRequest(ws, data.address, data.userId);
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–µ–ø–ª–æ—è –º–æ–¥—É–ª–µ–π
        if (data.type === 'subscribe' && data.dleAddress) {
          // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¥–µ–ø–ª–æ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ DLE
          deploymentWebSocketService.subscribeToDeployment(ws, data.dleAddress);
        }
        
        if (data.type === 'unsubscribe' && data.dleAddress) {
          // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –¥–µ–ø–ª–æ—è
          deploymentWebSocketService.unsubscribeFromDeployment(ws, data.dleAddress);
        }
      } catch (error) {
        // console.error('‚ùå [WebSocket] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    });
    
    ws.on('close', (code, reason) => {
      // console.log('üîå [WebSocket] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ', { code, reason: reason.toString() });
      // –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤
      for (const [userId, clients] of wsClients.entries()) {
        clients.delete(ws);
        if (clients.size === 0) {
          wsClients.delete(userId);
        }
      }
      
      // –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ deploymentWebSocketService
      deploymentWebSocketService.removeClient(ws);
    });
    
    ws.on('error', (error) => {
      // console.error('‚ùå [WebSocket] –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error.message);
    });
  });
  
  // console.log('üöÄ [WebSocket] –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ /ws');
}

function authenticateUser(ws, userId) {
  // console.log(`üîê [WebSocket] –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  
  // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö
  if (wsClients.has('anonymous')) {
    wsClients.get('anonymous').delete(ws);
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (!wsClients.has(userId.toString())) {
    wsClients.set(userId.toString(), new Set());
  }
  wsClients.get(userId.toString()).add(ws);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  ws.send(JSON.stringify({ 
    type: 'auth-success', 
    userId: userId 
  }));
}

function broadcastContactsUpdate() {
  // console.log('üì¢ [WebSocket] –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º');
  for (const [userId, clients] of wsClients.entries()) {
    for (const ws of clients) {
      if (ws.readyState === WebSocket.OPEN) {
        ws.send(JSON.stringify({ type: 'contacts-updated' }));
      }
    }
  }
}

function broadcastMessagesUpdate() {
  // console.log('üì¢ [WebSocket] –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º');
  for (const [userId, clients] of wsClients.entries()) {
    for (const ws of clients) {
      if (ws.readyState === WebSocket.OPEN) {
        ws.send(JSON.stringify({ type: 'messages-updated' }));
      }
    }
  }
}

function broadcastChatMessage(message, targetUserId = null) {
  // console.log(`üì¢ [WebSocket] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞`, { 
  //   messageId: message.id, 
  //   targetUserId 
  // });
  
  if (targetUserId) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const userClients = wsClients.get(targetUserId.toString());
    if (userClients) {
      for (const ws of userClients) {
        if (ws.readyState === WebSocket.OPEN) {
          ws.send(JSON.stringify({ 
            type: 'chat-message', 
            message 
          }));
        }
      }
    }
  } else {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º
    for (const [userId, clients] of wsClients.entries()) {
      for (const ws of clients) {
        if (ws.readyState === WebSocket.OPEN) {
          ws.send(JSON.stringify({ 
            type: 'chat-message', 
            message 
          }));
        }
      }
    }
  }
}

function broadcastConversationUpdate(conversationId, targetUserId = null) {
  // console.log(`üì¢ [WebSocket] –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞`, { 
  //   conversationId, 
  //   targetUserId 
  // });
  
  const payload = { 
    type: 'conversation-updated', 
    conversationId 
  };
  
  if (targetUserId) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const userClients = wsClients.get(targetUserId.toString());
    if (userClients) {
      for (const ws of userClients) {
        if (ws.readyState === WebSocket.OPEN) {
          ws.send(JSON.stringify(payload));
        }
      }
    }
  } else {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º
    for (const [userId, clients] of wsClients.entries()) {
      for (const ws of clients) {
        if (ws.readyState === WebSocket.OPEN) {
          ws.send(JSON.stringify(payload));
        }
      }
    }
  }
}

function broadcastTableUpdate(tableId) {
  // console.log('üì¢ [WebSocket] –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã', tableId);
  const payload = { type: 'table-updated', tableId };
    for (const [userId, clients] of wsClients.entries()) {
      for (const ws of clients) {
        if (ws.readyState === WebSocket.OPEN) {
          ws.send(JSON.stringify(payload));
      }
    }
  }
}

function broadcastTableRelationsUpdate(tableId, rowId, targetUserId = null) {
  // console.log(`üì¢ [WebSocket] –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π —Ç–∞–±–ª–∏—Ü—ã`, { 
  //   tableId, 
  //   rowId, 
  //   targetUserId 
  // });
  
  const payload = { 
    type: 'table-relations-updated', 
    tableId, 
    rowId 
  };
  
  if (targetUserId) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const userClients = wsClients.get(targetUserId.toString());
    if (userClients) {
      for (const ws of userClients) {
        if (ws.readyState === WebSocket.OPEN) {
          ws.send(JSON.stringify(payload));
        }
      }
    }
  } else {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º
    for (const [userId, clients] of wsClients.entries()) {
      for (const ws of clients) {
        if (ws.readyState === WebSocket.OPEN) {
          ws.send(JSON.stringify(payload));
        }
      }
    }
  }
}

function broadcastTagsUpdate(targetUserId = null, rowId = null) {
  // –î–µ–±–∞—É–Ω—Å: –æ—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç
  if (tagsUpdateTimeout) {
    clearTimeout(tagsUpdateTimeout);
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–∞—É—Ç
  tagsUpdateTimeout = setTimeout(() => {
    // console.log('üîî [WebSocket] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤', rowId ? `–¥–ª—è —Å—Ç—Ä–æ–∫–∏ ${rowId}` : '');
    const message = JSON.stringify({
      type: 'tags-updated',
      timestamp: Date.now(),
      rowId: rowId // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    });
    
    let sentCount = 0;
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
    wss.clients.forEach((client) => {
      if (client.readyState === WebSocket.OPEN) {
        client.send(message);
        sentCount++;
      }
    });
    
    // console.log(`üîî [WebSocket] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ tags-updated ${sentCount} –∫–ª–∏–µ–Ω—Ç–∞–º`);
  }, TAGS_UPDATE_DEBOUNCE);
}

function getConnectedUsers() {
  const users = [];
  for (const [userId, clients] of wsClients.entries()) {
    if (userId !== 'anonymous' && clients.size > 0) {
      users.push({
        userId: parseInt(userId),
        connections: clients.size
      });
    }
  }
  return users;
}

function getStats() {
  let totalConnections = 0;
  let anonymousConnections = 0;
  
  for (const [userId, clients] of wsClients.entries()) {
    if (userId === 'anonymous') {
      anonymousConnections = clients.size;
    }
    totalConnections += clients.size;
  }
  
  return {
    totalConnections,
    anonymousConnections,
    authenticatedUsers: getConnectedUsers(),
    totalUsers: wsClients.size - (wsClients.has('anonymous') ? 1 : 0)
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç–∞—Ç—É—Å–µ AI
function broadcastAIStatus(status) {
  // console.log('üì¢ [WebSocket] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ AI –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º');
  for (const [userId, clients] of wsClients.entries()) {
    for (const ws of clients) {
      if (ws.readyState === WebSocket.OPEN) {
        ws.send(JSON.stringify({ 
          type: 'ai-status', 
          status 
        }));
      }
    }
  }
}

// Blockchain —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function broadcastProposalCreated(dleAddress, proposalId, txHash) {
  const message = JSON.stringify({
    type: 'proposal_created',
    data: {
      dleAddress: dleAddress,
      proposalId: proposalId,
      txHash: txHash
    },
    timestamp: Date.now()
  });
  
  broadcastToAllClients(message);
}

function broadcastProposalVoted(dleAddress, proposalId, support, txHash) {
  const message = JSON.stringify({
    type: 'proposal_voted',
    data: {
      dleAddress: dleAddress,
      proposalId: proposalId,
      support: support,
      txHash: txHash
    },
    timestamp: Date.now()
  });
  
  broadcastToAllClients(message);
}

function broadcastProposalExecuted(dleAddress, proposalId, txHash) {
  const message = JSON.stringify({
    type: 'proposal_executed',
    data: {
      dleAddress: dleAddress,
      proposalId: proposalId,
      txHash: txHash
    },
    timestamp: Date.now()
  });
  
  broadcastToAllClients(message);
}

function broadcastToAllClients(message) {
  wss.clients.forEach((client) => {
    if (client.readyState === WebSocket.OPEN) {
      client.send(message);
    }
  });
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ç–æ–∫–µ–Ω–æ–≤
function broadcastAuthTokenAdded(tokenData) {
  const message = JSON.stringify({
    type: 'auth_token_added',
    data: {
      token: tokenData,
      timestamp: Date.now()
    }
  });
  
  broadcastToAllClients(message);
}

function broadcastAuthTokenDeleted(tokenData) {
  const message = JSON.stringify({
    type: 'auth_token_deleted',
    data: {
      token: tokenData,
      timestamp: Date.now()
    }
  });
  
  broadcastToAllClients(message);
}

function broadcastAuthTokenUpdated(tokenData) {
  const message = JSON.stringify({
    type: 'auth_token_updated',
    data: {
      token: tokenData,
      timestamp: Date.now()
    }
  });
  
  broadcastToAllClients(message);
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–∞–ª–∞–Ω—Å–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤
function broadcastTokenBalancesUpdate(userId, balances) {
  const message = JSON.stringify({
    type: 'token_balances_updated',
    data: {
      balances: balances,
      timestamp: Date.now()
    }
  });
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  const userClients = wsClients.get(userId.toString());
  if (userClients) {
    for (const ws of userClients) {
      if (ws.readyState === WebSocket.OPEN) {
        ws.send(message);
      }
    }
  }
}

function broadcastTokenBalanceChanged(userId, tokenAddress, newBalance, network) {
  const message = JSON.stringify({
    type: 'token_balance_changed',
    data: {
      tokenAddress: tokenAddress,
      balance: newBalance,
      network: network,
      timestamp: Date.now()
    }
  });
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  const userClients = wsClients.get(userId.toString());
  if (userClients) {
    for (const ws of userClients) {
      if (ws.readyState === WebSocket.OPEN) {
        ws.send(message);
      }
    }
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–µ–ø–ª–æ—è
function broadcastDeploymentUpdate(data) {
  if (!wss) return;
  
  console.log(`üì° [WebSocket] broadcastDeploymentUpdate –≤—ã–∑–≤–∞–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:`, JSON.stringify(data, null, 2));
  
  const message = JSON.stringify({
    type: 'deployment_update',
    data: data
  });
  
  console.log(`üì° [WebSocket] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:`, message);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
  wss.clients.forEach(client => {
    if (client.readyState === WebSocket.OPEN) {
      try {
        client.send(message);
      } catch (error) {
        console.error('[WebSocket] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ deployment update:', error);
      }
    }
  });
  
  console.log(`üì° [WebSocket] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ deployment update: deployment_update`);
}

// broadcastModulesUpdate —É–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º deploymentWebSocketService.broadcastToDLE

module.exports = { 
  initWSS, 
  broadcastContactsUpdate, 
  broadcastMessagesUpdate, 
  broadcastChatMessage,
  broadcastConversationUpdate,
  broadcastTableUpdate,
  broadcastTableRelationsUpdate,
  broadcastTagsUpdate,
  broadcastAIStatus,
  broadcastProposalCreated,
  broadcastProposalVoted,
  broadcastProposalExecuted,
  broadcastAuthTokenAdded,
  broadcastAuthTokenDeleted,
  broadcastAuthTokenUpdated,
  broadcastTokenBalancesUpdate,
  broadcastTokenBalanceChanged,
  broadcastDeploymentUpdate,
  getConnectedUsers,
  getStats
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –±–∞–ª–∞–Ω—Å–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤
async function handleTokenBalancesRequest(ws, address, userId) {
  try {
    // console.log(`[WebSocket] –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –∞–¥—Ä–µ—Å–∞: ${address}`); // –£–±—Ä–∞–Ω–æ –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç wsHub
    const balances = await tokenBalanceService.getUserTokenBalances(address);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
    ws.send(JSON.stringify({
      type: 'token_balances_response',
      data: {
        address: address,
        balances: balances,
        timestamp: Date.now()
      }
    }));
    
    // console.log(`[WebSocket] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –±–∞–ª–∞–Ω—Å—ã –¥–ª—è ${address}:`, balances.length, '—Ç–æ–∫–µ–Ω–æ–≤'); // –£–±—Ä–∞–Ω–æ –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  } catch (error) {
    console.error('[WebSocket] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤:', error);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∫–ª–∏–µ–Ω—Ç—É
    ws.send(JSON.stringify({
      type: 'token_balances_error',
      data: {
        address: address,
        error: error.message,
        timestamp: Date.now()
      }
    }));
  }
} 