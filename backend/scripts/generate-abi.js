/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ABI –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç ABI –∏–∑ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ Hardhat
 */

const fs = require('fs');
const path = require('path');

// –ü—É—Ç–∏ –∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º
const artifactsPath = path.join(__dirname, '../artifacts/contracts');
const frontendAbiPath = path.join(__dirname, '../../frontend/src/utils/dle-abi.js');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const frontendDir = path.dirname(frontendAbiPath);
if (!fs.existsSync(frontendDir)) {
  fs.mkdirSync(frontendDir, { recursive: true });
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:', frontendDir);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ABI –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
function extractABI(contractName) {
  const artifactPath = path.join(artifactsPath, `${contractName}.sol`, `${contractName}.json`);
  
  if (!fs.existsSync(artifactPath)) {
    console.log(`‚ö†Ô∏è –ê—Ä—Ç–µ—Ñ–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${artifactPath}`);
    return null;
  }
  
  try {
    const artifact = JSON.parse(fs.readFileSync(artifactPath, 'utf8'));
    return artifact.abi;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ ${contractName}:`, error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ABI –≤ —Å—Ç—Ä–æ–∫—É
function formatABI(abi) {
  const functions = abi.filter(item => item.type === 'function');
  const events = abi.filter(item => item.type === 'event');
  
  let result = 'export const DLE_ABI = [\n';
  
  // –§—É–Ω–∫—Ü–∏–∏
  functions.forEach(func => {
    const inputs = func.inputs.map(input => `${input.type} ${input.name}`).join(', ');
    const outputs = func.outputs.map(output => output.type).join(', ');
    const returns = outputs ? ` returns (${outputs})` : '';
    
    result += `  "${func.type} ${func.name}(${inputs})${returns}",\n`;
  });
  
  // –°–æ–±—ã—Ç–∏—è
  events.forEach(event => {
    const inputs = event.inputs.map(input => `${input.type} ${input.name}`).join(', ');
    result += `  "event ${event.name}(${inputs})",\n`;
  });
  
  result += '];\n';
  return result;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ ABI
function generateABIFile() {
  console.log('üî® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ABI —Ñ–∞–π–ª–∞...');
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º ABI –¥–ª—è DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  const dleABI = extractABI('DLE');
  
  if (!dleABI) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ABI –¥–ª—è DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞');
    return;
  }
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º ABI
  const formattedABI = formatABI(dleABI);
  
  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π —Ñ–∞–π–ª
  const fileContent = `/**
 * ABI –¥–ª—è DLE —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–û - –ù–ï –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –í–†–£–ß–ù–£–Æ
 * –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ: node backend/scripts/generate-abi.js
 * 
 * –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date().toISOString()}
 */

${formattedABI}

// ABI –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏) - –ù–ï –°–£–©–ï–°–¢–í–£–Æ–¢ –í –ö–û–ù–¢–†–ê–ö–¢–ï
export const DLE_DEACTIVATION_ABI = [
  // –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ DLE
];

// ABI –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ (–±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)
export const TOKEN_ABI = [
  "function balanceOf(address owner) view returns (uint256)",
  "function decimals() view returns (uint8)",
  "function totalSupply() view returns (uint256)"
];
`;

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
  try {
    fs.writeFileSync(frontendAbiPath, fileContent, 'utf8');
    console.log('‚úÖ ABI —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', frontendAbiPath);
    console.log(`üìä –§—É–Ω–∫—Ü–∏–π: ${dleABI.filter(item => item.type === 'function').length}`);
    console.log(`üìä –°–æ–±—ã—Ç–∏–π: ${dleABI.filter(item => item.type === 'event').length}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ ABI —Ñ–∞–π–ª–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
if (require.main === module) {
  generateABIFile();
}

module.exports = { generateABIFile, extractABI, formatABI };
