/**
 * Copyright (c) 2024-2025 –¢–∞—Ä–∞–±–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á
 * All rights reserved.
 * 
 * This software is proprietary and confidential.
 * Unauthorized copying, modification, or distribution is prohibited.
 * 
 * For licensing inquiries: info@hb3-accelerator.com
 * Website: https://hb3-accelerator.com
 * GitHub: https://github.com/HB3-ACCELERATOR
 */

const encryptedDb = require('../services/encryptedDatabaseService');
const db = require('../db');

async function testEncryptedTables() {
  console.log('üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...\n');

  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É is_rag_source
    console.log('1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã is_rag_source:');
    const ragSources = await encryptedDb.getData('is_rag_source', {});
    console.log('   ‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', ragSources);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å
    const fs = require('fs');
    const path = require('path');
    let encryptionKey = 'default-key';
    
    try {
      const keyPath = path.join(__dirname, '../ssl/keys/full_db_encryption.key');
      if (fs.existsSync(keyPath)) {
        encryptionKey = fs.readFileSync(keyPath, 'utf8').trim();
      }
    } catch (keyError) {
      console.error('Error reading encryption key:', keyError);
    }
    
    const directResult = await db.getQuery()(
      'SELECT id, decrypt_text(name_encrypted, $1) as name FROM is_rag_source ORDER BY id',
      [encryptionKey]
    );
    console.log('   ‚úÖ –ü—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å:', directResult.rows);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü:');
    
    // user_tables
    const userTables = await encryptedDb.getData('user_tables', {}, 5);
    console.log('   ‚úÖ user_tables (–ø–µ—Ä–≤—ã–µ 5):', userTables.length, '–∑–∞–ø–∏—Å–µ–π');
    
    // user_columns
    const userColumns = await encryptedDb.getData('user_columns', {}, 5);
    console.log('   ‚úÖ user_columns (–ø–µ—Ä–≤—ã–µ 5):', userColumns.length, '–∑–∞–ø–∏—Å–µ–π');
    
    // messages
    const messages = await encryptedDb.getData('messages', {}, 3);
    console.log('   ‚úÖ messages (–ø–µ—Ä–≤—ã–µ 3):', messages.length, '–∑–∞–ø–∏—Å–µ–π');
    
    // conversations
    const conversations = await encryptedDb.getData('conversations', {}, 3);
    console.log('   ‚úÖ conversations (–ø–µ—Ä–≤—ã–µ 3):', conversations.length, '–∑–∞–ø–∏—Å–µ–π');

    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testEncryptedTables().then(() => {
    console.log('\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
  }).catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { testEncryptedTables }; 