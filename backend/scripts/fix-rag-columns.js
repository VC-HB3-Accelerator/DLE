/**
 * Copyright (c) 2024-2025 –¢–∞—Ä–∞–±–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á
 * All rights reserved.
 * 
 * This software is proprietary and confidential.
 * Unauthorized copying, modification, or distribution is prohibited.
 * 
 * For licensing inquiries: info@hb3-accelerator.com
 * Website: https://hb3-accelerator.com
 * GitHub: https://github.com/HB3-ACCELERATOR
 */

const db = require('../db');

async function fixRagColumns() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ purpose —É –∫–æ–ª–æ–Ω–æ–∫ –≤ RAG —Ç–∞–±–ª–∏—Ü–µ...\n');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    const fs = require('fs');
    const path = require('path');
    let encryptionKey = 'default-key';
    
    try {
      const keyPath = path.join(__dirname, '../ssl/keys/full_db_encryption.key');
      if (fs.existsSync(keyPath)) {
        encryptionKey = fs.readFileSync(keyPath, 'utf8').trim();
      }
    } catch (keyError) {
      console.error('Error reading encryption key:', keyError);
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã RAG (ID 28)
    const columns = await db.getQuery()(
      'SELECT id, decrypt_text(name_encrypted, $1) as name FROM user_columns WHERE table_id = 28 ORDER BY id',
      [encryptionKey]
    );

    console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ RAG:');
    columns.rows.forEach(col => {
      console.log(`  ID: ${col.id}, Name: ${col.name}`);
    });

    // –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫ –Ω–∞ purpose
    const purposeMapping = {
      '–í–æ–ø—Ä–æ—Å': 'question',
      '–û—Ç–≤–µ—Ç': 'answer', 
      '–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–≥–∏': 'context',
      '–ü—Ä–æ–¥—É–∫—Ç —Ç–µ–≥–∏': 'product',
      '–ö–ª–∏–µ–Ω—Ç —Ç–µ–≥–∏': 'userTags'
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–ª–æ–Ω–∫—É
    for (const col of columns.rows) {
      const purpose = purposeMapping[col.name];
      if (purpose) {
        console.log(`\n–û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É "${col.name}" (ID: ${col.id}) -> purpose: ${purpose}`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ options
        const currentOptions = await db.getQuery()(
          'SELECT options FROM user_columns WHERE id = $1',
          [col.id]
        );
        
        let options = currentOptions.rows[0]?.options || {};
        options.purpose = purpose;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É
        await db.getQuery()(
          'UPDATE user_columns SET options = $1 WHERE id = $2',
          [JSON.stringify(options), col.id]
        );
        
        console.log(`  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ`);
      } else {
        console.log(`\n‚ö†Ô∏è  –ö–æ–ª–æ–Ω–∫–∞ "${col.name}" (ID: ${col.id}) - purpose –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω`);
      }
    }

    console.log('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:');
    const updatedColumns = await db.getQuery()(
      'SELECT id, decrypt_text(name_encrypted, $1) as name, options FROM user_columns WHERE table_id = 28 ORDER BY id',
      [encryptionKey]
    );
    
    updatedColumns.rows.forEach(col => {
      const options = col.options || {};
      console.log(`  ID: ${col.id}, Name: ${col.name}, Purpose: ${options.purpose || 'undefined'}`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  fixRagColumns().then(() => {
    console.log('\nüèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
  }).catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { fixRagColumns }; 