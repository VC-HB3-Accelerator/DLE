/**
 * Copyright (c) 2024-2025 –¢–∞—Ä–∞–±–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á
 * All rights reserved.
 * 
 * This software is proprietary and confidential.
 * Unauthorized copying, modification, or distribution is prohibited.
 * 
 * For licensing inquiries: info@hb3-accelerator.com
 * Website: https://hb3-accelerator.com
 * GitHub: https://github.com/HB3-ACCELERATOR
 */

const aiQueueService = require('../services/ai-queue');

async function testQueue() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –æ—á–µ—Ä–µ–¥–∏...\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—á–µ—Ä–µ–¥–∏...');
    const stats = aiQueueService.getStats();
    console.log('‚úÖ –û—á–µ—Ä–µ–¥—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞:', stats.isInitialized);
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', {
      totalProcessed: stats.totalProcessed,
      totalFailed: stats.totalFailed,
      currentQueueSize: stats.currentQueueSize,
      runningTasks: stats.runningTasks
    });

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á
    console.log('\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á...');
    
    const testTasks = [
      {
        message: '–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?',
        language: 'ru',
        type: 'chat',
        userId: 1,
        userRole: 'user',
        requestId: 'test_1'
      },
      {
        message: '–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø–æ–≥–æ–¥–µ',
        language: 'ru',
        type: 'analysis',
        userId: 1,
        userRole: 'user',
        requestId: 'test_2'
      },
      {
        message: '–°—Ä–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å!',
        language: 'ru',
        type: 'urgent',
        userId: 1,
        userRole: 'admin',
        requestId: 'test_3'
      }
    ];

    for (let i = 0; i < testTasks.length; i++) {
      const task = testTasks[i];
      console.log(`   –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É ${i + 1}: "${task.message}"`);
      
      try {
        const result = await aiQueueService.addTask(task);
        console.log(`   ‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞, ID: ${result.taskId}`);
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ${error.message}`);
      }
    }

    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    console.log('\n3. –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á...');
    await new Promise(resolve => setTimeout(resolve, 10000));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...');
    const finalStats = aiQueueService.getStats();
    console.log('üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', {
      totalProcessed: finalStats.totalProcessed,
      totalFailed: finalStats.totalFailed,
      currentQueueSize: finalStats.currentQueueSize,
      runningTasks: finalStats.runningTasks,
      averageProcessingTime: Math.round(finalStats.averageProcessingTime)
    });

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é
    console.log('\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é...');
    
    console.log('   –ü–∞—É–∑–∞ –æ—á–µ—Ä–µ–¥–∏...');
    aiQueueService.pause();
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    console.log('   –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏...');
    aiQueueService.resume();
    await new Promise(resolve => setTimeout(resolve, 1000));

    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testQueue().then(() => {
    console.log('\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
  }).catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { testQueue }; 