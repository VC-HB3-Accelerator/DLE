/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è flattened –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * –°–æ–∑–¥–∞–µ—Ç DLE_flattened.sol –∏–∑ DLE.sol —Å –ø–æ–º–æ—â—å—é hardhat flatten
 */

const { spawn, execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
const contractsDir = path.join(__dirname, '../contracts');
const dleContractPath = path.join(contractsDir, 'DLE.sol');
const flattenedPath = path.join(contractsDir, 'DLE_flattened.sol');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ flattened –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
function generateFlattened() {
  return new Promise((resolve, reject) => {
    console.log('üî® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è flattened –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    if (!fs.existsSync(dleContractPath)) {
      reject(new Error(`–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${dleContractPath}`));
      return;
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º hardhat flatten —Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≤ —Ñ–∞–π–ª
    try {
      console.log('üî® –í—ã–ø–æ–ª–Ω—è–µ–º hardhat flatten...');
      execSync(`npx hardhat flatten contracts/DLE.sol > "${flattenedPath}"`, {
        cwd: path.join(__dirname, '..'),
        shell: true
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
      if (fs.existsSync(flattenedPath)) {
        const stats = fs.statSync(flattenedPath);
        console.log('‚úÖ Flattened –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å–æ–∑–¥–∞–Ω:', flattenedPath);
        console.log(`üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(stats.size / 1024).toFixed(2)} KB`);
        resolve();
      } else {
        reject(new Error('–§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω'));
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è hardhat flatten:', error.message);
      reject(new Error(`–û—à–∏–±–∫–∞ flatten: ${error.message}`));
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
function checkFlattenedFreshness() {
  if (!fs.existsSync(flattenedPath)) {
    return false;
  }
  
  if (!fs.existsSync(dleContractPath)) {
    return false;
  }
  
  const flattenedStats = fs.statSync(flattenedPath);
  const contractStats = fs.statSync(dleContractPath);
  
  // Flattened —Ñ–∞–π–ª —Å—Ç–∞—Ä—à–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  return flattenedStats.mtime >= contractStats.mtime;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ flattened –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...');
    
    const isFresh = checkFlattenedFreshness();
    
    if (isFresh) {
      console.log('‚úÖ Flattened –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∞–∫—Ç—É–∞–ª–µ–Ω');
      return;
    }
    
    console.log('üîÑ Flattened –∫–æ–Ω—Ç—Ä–∞–∫—Ç —É—Å—Ç–∞—Ä–µ–ª, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π...');
    await generateFlattened();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ flattened –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = { generateFlattened, checkFlattenedFreshness };
