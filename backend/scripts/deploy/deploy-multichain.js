/**
 * Copyright (c) 2024-2025 –¢–∞—Ä–∞–±–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á
 * All rights reserved.
 * 
 * This software is proprietary and confidential.
 * Unauthorized copying, modification, or distribution is prohibited.
 * 
 * For licensing inquiries: info@hb3-accelerator.com
 * Website: https://hb3-accelerator.com
 * GitHub: https://github.com/HB3-ACCELERATOR
 */

/* eslint-disable no-console */

// –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –õ–û–ì - –°–ö–†–ò–ü–¢ –ó–ê–ü–£–©–ï–ù!
console.log('[MULTI_DBG] üöÄ –°–ö–†–ò–ü–¢ DEPLOY-MULTICHAIN.JS –ó–ê–ü–£–©–ï–ù!');

console.log('[MULTI_DBG] üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º hardhat...');
const hre = require('hardhat');
console.log('[MULTI_DBG] ‚úÖ hardhat –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');

console.log('[MULTI_DBG] üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º path...');
const path = require('path');
console.log('[MULTI_DBG] ‚úÖ path –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');

console.log('[MULTI_DBG] üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º fs...');
const fs = require('fs');
console.log('[MULTI_DBG] ‚úÖ fs –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');

console.log('[MULTI_DBG] üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º rpcProviderService...');
const { getRpcUrlByChainId } = require('../../services/rpcProviderService');
console.log('[MULTI_DBG] ‚úÖ rpcProviderService –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');

console.log('[MULTI_DBG] üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º logger...');
const logger = require('../../utils/logger');
console.log('[MULTI_DBG] ‚úÖ logger –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');

console.log('[MULTI_DBG] üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º deploymentUtils...');
const { getFeeOverrides, createProviderAndWallet, alignNonce, getNetworkInfo, createMultipleRPCConnections, sendTransactionWithRetry, createRPCConnection } = require('../../utils/deploymentUtils');
console.log('[MULTI_DBG] ‚úÖ deploymentUtils –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');

console.log('[MULTI_DBG] üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º nonceManager...');
const { nonceManager } = require('../../utils/nonceManager');
console.log('[MULTI_DBG] ‚úÖ nonceManager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');

// ContractVerificationService —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º Hardhat verify

console.log('[MULTI_DBG] üéØ –í–°–ï –ò–ú–ü–û–†–¢–´ –£–°–ü–ï–®–ù–´!');

console.log('[MULTI_DBG] üîç –ü–†–û–í–ï–†–Ø–ï–ú –§–£–ù–ö–¶–ò–ò...');
console.log('[MULTI_DBG] deployInNetwork:', typeof deployInNetwork);
console.log('[MULTI_DBG] main:', typeof main);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Å–µ—Ç–∏ –¥–ª—è Hardhat –∏–∑ deploy_params
function getNetworkNameForHardhat(chainId, params) {
  // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ chainId -> Hardhat network name
  const networkMapping = {
    11155111: 'sepolia',
    17000: 'holesky', 
    421614: 'arbitrumSepolia',
    84532: 'baseSepolia',
    1: 'mainnet',
    42161: 'arbitrumOne',
    8453: 'base',
    137: 'polygon',
    56: 'bsc'
  };
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Å–µ—Ç—å –≤ Hardhat
  const hardhatNetworkName = networkMapping[chainId];
  if (!hardhatNetworkName) {
    logger.warn(`‚ö†Ô∏è –°–µ—Ç—å ${chainId} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ Hardhat`);
    return null;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–∞ —Å–µ—Ç—å –≤ supported_chain_ids –∏–∑ deploy_params
  const supportedChainIds = params.supported_chain_ids || params.supportedChainIds || [];
  if (supportedChainIds.length > 0) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º supportedChainIds –≤ —á–∏—Å–ª–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const supportedChainIdsNumbers = supportedChainIds.map(id => Number(id));
    if (!supportedChainIdsNumbers.includes(chainId)) {
      logger.warn(`‚ö†Ô∏è –°–µ—Ç—å ${chainId} –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ç–µ–π: ${supportedChainIdsNumbers.join(', ')}`);
      return null;
    }
    logger.info(`‚úÖ –°–µ—Ç—å ${chainId} –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ç–µ–π`);
  } else {
    logger.info(`‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ç–µ–π –ø—É—Å—Ç, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è ${chainId}`);
  }
  
  logger.info(`‚úÖ –°–µ—Ç—å ${chainId} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: ${hardhatNetworkName}`);
  logger.info(`üîç –î–µ—Ç–∞–ª–∏ —Å–µ—Ç–∏: chainId=${chainId}, hardhatName=${hardhatNetworkName}, supportedChains=[${supportedChainIds.join(', ')}]`);
  return hardhatNetworkName;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
async function verifyDLEAfterDeploy(chainId, contractAddress, constructorArgs, apiKey, params) {
  try {
    if (!apiKey) {
      logger.warn(`‚ö†Ô∏è API –∫–ª—é—á Etherscan –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é DLE`);
      return { success: false, error: 'API –∫–ª—é—á –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' };
    }

    if (!params.autoVerifyAfterDeploy) {
      logger.info(`‚ÑπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é DLE`);
      return { success: false, error: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞' };
    }

    logger.info(`üîç –ù–∞—á–∏–Ω–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø–æ –∞–¥—Ä–µ—Å—É ${contractAddress} –≤ —Å–µ—Ç–∏ ${chainId}`);
    
    // Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–¥–æ 3 –ø–æ–ø—ã—Ç–æ–∫)
    const maxVerifyAttempts = 3;
    let verifyAttempts = 0;
    
    while (verifyAttempts < maxVerifyAttempts) {
      verifyAttempts++;
      logger.info(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ ${verifyAttempts}/${maxVerifyAttempts}`);
      
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Hardhat verify –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        const { exec } = require('child_process');
        const { promisify } = require('util');
        const execAsync = promisify(exec);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Å–µ—Ç–∏ –¥–ª—è Hardhat –∏–∑ deploy_params
    const networkName = getNetworkNameForHardhat(chainId, params);
    if (!networkName) {
      logger.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ—Ç—å ${chainId}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é`);
      return { success: false, error: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ—Ç—å ${chainId}` };
    }
    
    logger.info(`üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º Hardhat verify –¥–ª—è —Å–µ—Ç–∏ ${networkName}`);
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
    const fs = require('fs');
    const path = require('path');
    const tempArgsFile = path.join(__dirname, '..', '..', 'temp-constructor-args.js');
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Hardhat
    // constructorArgs - —ç—Ç–æ hex —Å—Ç—Ä–æ–∫–∞, –Ω–∞–º –Ω—É–∂–Ω—ã –∏—Å—Ö–æ–¥–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    // –ü–æ–ª—É—á–∞–µ–º dleConfig –∏ initializer –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const { generateDeploymentArgs } = require('../../utils/constructorArgsGenerator');
    const { dleConfig, initializer } = generateDeploymentArgs(params);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BigInt –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const serializableDleConfig = {
      name: dleConfig.name,
      symbol: dleConfig.symbol,
      location: dleConfig.location,
      coordinates: dleConfig.coordinates,
      jurisdiction: dleConfig.jurisdiction.toString(),
      okvedCodes: dleConfig.okvedCodes,
      kpp: dleConfig.kpp.toString(),
      quorumPercentage: dleConfig.quorumPercentage.toString(),
      initialPartners: dleConfig.initialPartners,
      initialAmounts: dleConfig.initialAmounts.map(amount => amount.toString()),
      supportedChainIds: dleConfig.supportedChainIds.map(id => id.toString())
    };
    
    const argsContent = `module.exports = ${JSON.stringify([serializableDleConfig, initializer], null, 2)};`;
    fs.writeFileSync(tempArgsFile, argsContent);
    
    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º Hardhat verify
      const command = `npx hardhat verify --network ${networkName} --constructor-args ${tempArgsFile} ${contractAddress}`;
      logger.info(`üîß –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: ${command}`);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Hardhat
      const envVars = {
        ...process.env,
        ETHERSCAN_API_KEY: apiKey,
        SUPPORTED_CHAIN_IDS: JSON.stringify(params.supported_chain_ids || params.supportedChainIds || []),
        RPC_URLS: JSON.stringify(params.rpc_urls || params.rpcUrls || {})
      };
      
      const { stdout, stderr } = await execAsync(command, {
        cwd: path.join(__dirname, '..', '..'),
        env: envVars
      });
      
        if (stdout.includes('Successfully verified')) {
          logger.info(`‚úÖ DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Hardhat!`);
          logger.info(`üìÑ –í—ã–≤–æ–¥: ${stdout}`);
          return { success: true, message: '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞' };
        } else {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
          if (stderr.includes('does not have bytecode') && verifyAttempts < maxVerifyAttempts) {
            logger.warn(`‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç –µ—â–µ –Ω–µ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω, –∂–¥–µ–º 5 —Å–µ–∫—É–Ω–¥...`);
            await new Promise(resolve => setTimeout(resolve, 5000));
            continue;
          }
          logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${stderr || stdout}`);
          return { success: false, error: stderr || stdout };
        }
      } finally {
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if (fs.existsSync(tempArgsFile)) {
          fs.unlinkSync(tempArgsFile);
        }
      }
      
      } catch (error) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
        if (error.message.includes('does not have bytecode') && verifyAttempts < maxVerifyAttempts) {
          logger.warn(`‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç –µ—â–µ –Ω–µ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω, –∂–¥–µ–º 5 —Å–µ–∫—É–Ω–¥...`);
          await new Promise(resolve => setTimeout(resolve, 5000));
          continue;
        }
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ${error.message}`);
        return { success: false, error: error.message };
      }
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
    logger.error(`‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –ø–æ—Å–ª–µ ${maxVerifyAttempts} –ø–æ–ø—ã—Ç–æ–∫`);
    return { success: false, error: '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫' };
  } catch (error) {
    logger.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ${error.message}`);
    return { success: false, error: error.message };
  }
}

async function deployInNetwork(rpcUrl, pk, initCodeHash, targetDLENonce, dleInit, params, dleConfig, initializer, etherscanKey) {
  try {
    const { ethers } = hre;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä RPC —Å retry –ª–æ–≥–∏–∫–æ–π
    const { provider, wallet, network } = await createRPCConnection(rpcUrl, pk, {
      maxRetries: 3,
      timeout: 30000
    });
    
    const net = network;

  // DEBUG: –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–µ—Ç–∏
  try {
    const calcInitHash = ethers.keccak256(dleInit);
    logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} rpc=${rpcUrl}`);
    logger.info(`[MULTI_DBG] wallet=${wallet.address} targetDLENonce=${targetDLENonce}`);
    logger.info(`[MULTI_DBG] initCodeHash(provided)=${initCodeHash}`);
    logger.info(`[MULTI_DBG] initCodeHash(calculated)=${calcInitHash}`);
    logger.info(`[MULTI_DBG] dleInit.lenBytes=${ethers.getBytes(dleInit).length} head16=${dleInit.slice(0, 34)}...`);
  } catch (e) {
    logger.error('[MULTI_DBG] precheck error', e?.message || e);
  }

  // 1) –ò—Å–ø–æ–ª—å–∑—É–µ–º NonceManager –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è nonce
  const chainId = Number(net.chainId);
  let current = await nonceManager.getNonce(wallet.address, rpcUrl, chainId);
  logger.info(`[MULTI_DBG] chainId=${chainId} current nonce=${current} target=${targetDLENonce}`);
  
  if (current > targetDLENonce) {
    logger.warn(`[MULTI_DBG] chainId=${Number(net.chainId)} current nonce ${current} > targetDLENonce ${targetDLENonce} - waiting for sync`);
    
    // –ñ–¥–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ nonce (–º–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π)
    let waitTime = 0;
    let checkInterval = 1000; // –ù–∞—á–∏–Ω–∞–µ–º —Å 1 —Å–µ–∫—É–Ω–¥—ã
    
    while (current > targetDLENonce && waitTime < 60000) {
      await new Promise(resolve => setTimeout(resolve, checkInterval));
      current = await nonceManager.getNonce(wallet.address, rpcUrl, chainId);
      waitTime += checkInterval;
      
      // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
      if (waitTime > 10000) checkInterval = 2000;
      if (waitTime > 30000) checkInterval = 5000;
      
      logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} waiting for nonce sync: ${current} > ${targetDLENonce} (${waitTime}ms, next check in ${checkInterval}ms)`);
    }
    
    if (current > targetDLENonce) {
      const errorMsg = `Nonce sync timeout: current ${current} > targetDLENonce ${targetDLENonce} on chainId=${Number(net.chainId)}. This may indicate network issues or the wallet was used for other transactions.`;
      logger.error(`[MULTI_DBG] ${errorMsg}`);
      throw new Error(errorMsg);
    }
    
    logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} nonce sync completed: ${current} <= ${targetDLENonce}`);
  }
  
  if (current < targetDLENonce) {
    logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} starting nonce alignment: ${current} -> ${targetDLENonce} (${targetDLENonce - current} transactions needed)`);
  } else {
    logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} nonce already aligned: ${current} = ${targetDLENonce}`);
  }
  
  if (current < targetDLENonce) {
    logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} aligning nonce from ${current} to ${targetDLENonce} (${targetDLENonce - current} transactions needed)`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º burn address –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const burnAddress = "0x000000000000000000000000000000000000dEaD";
    
    while (current < targetDLENonce) {
      const overrides = await getFeeOverrides(provider);
      let gasLimit = 21000; // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π gas –¥–ª—è –æ–±—ã—á–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      let sent = false;
      let lastErr = null;
      
      for (let attempt = 0; attempt < 5 && !sent; attempt++) {
        try {
          const txReq = {
            to: burnAddress, // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ burn address –≤–º–µ—Å—Ç–æ —Å–≤–æ–µ–≥–æ –∞–¥—Ä–µ—Å–∞
            value: 0n,
            nonce: current,
            gasLimit,
            ...overrides
          };
          logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} sending filler tx nonce=${current} attempt=${attempt + 1}/5`);
          logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} tx details: to=${burnAddress}, value=0, gasLimit=${gasLimit}`);
          const { tx: txFill, receipt } = await sendTransactionWithRetry(wallet, txReq, { maxRetries: 3 });
          logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} filler tx sent, hash=${txFill.hash}, waiting for confirmation...`);
          logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} filler tx nonce=${current} confirmed, hash=${txFill.hash}`);
          sent = true;
        } catch (e) {
          lastErr = e;
          const errorMsg = e?.message || e;
          logger.warn(`[MULTI_DBG] chainId=${Number(net.chainId)} filler tx nonce=${current} attempt=${attempt + 1} failed: ${errorMsg}`);
          
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
          if (String(errorMsg).toLowerCase().includes('intrinsic gas too low') && attempt < 4) {
            gasLimit = Math.min(gasLimit * 2, 100000); // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º gas limit —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
            logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} increased gas limit to ${gasLimit}`);
            continue;
          }
          
          if (String(errorMsg).toLowerCase().includes('nonce too low') && attempt < 4) {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à nonce –∏ –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π
            nonceManager.resetNonce(wallet.address, chainId);
            const newNonce = await nonceManager.getNonce(wallet.address, rpcUrl, chainId, { timeout: 15000, maxRetries: 5 });
            logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} nonce changed from ${current} to ${newNonce}`);
            current = newNonce;
            
            // –ï—Å–ª–∏ –Ω–æ–≤—ã–π nonce –±–æ–ª—å—à–µ —Ü–µ–ª–µ–≤–æ–≥–æ, –æ–±–Ω–æ–≤–ª—è–µ–º targetDLENonce
            if (current > targetDLENonce) {
              logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} current nonce ${current} > target nonce ${targetDLENonce}, updating target`);
              targetDLENonce = current;
              logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} updated targetDLENonce to: ${targetDLENonce}`);
            }
            
            continue;
          }
          
          if (String(errorMsg).toLowerCase().includes('insufficient funds') && attempt < 4) {
            logger.error(`[MULTI_DBG] chainId=${Number(net.chainId)} insufficient funds for nonce alignment`);
            throw new Error(`Insufficient funds for nonce alignment on chainId=${Number(net.chainId)}. Please add more ETH to the wallet.`);
          }
          
          if (String(errorMsg).toLowerCase().includes('network') && attempt < 4) {
            logger.warn(`[MULTI_DBG] chainId=${Number(net.chainId)} network error, retrying in ${(attempt + 1) * 2} seconds...`);
            await new Promise(resolve => setTimeout(resolve, (attempt + 1) * 2000));
            continue;
          }
          
          // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
          if (attempt === 4) {
            throw new Error(`Failed to send filler transaction after 5 attempts: ${errorMsg}`);
          }
        }
      }
      
      if (!sent) {
        logger.error(`[MULTI_DBG] chainId=${Number(net.chainId)} failed to send filler tx for nonce=${current}`);
        throw lastErr || new Error('filler tx failed');
      }
      
      current++;
    }
    
    logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} nonce alignment completed, current nonce=${current}`);
    
    // –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º nonce –≤ NonceManager
    nonceManager.reserveNonce(wallet.address, chainId, targetDLENonce);
    logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} ready for DLE deployment with nonce=${current}`);
  } else {
    logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} nonce already aligned at ${current}`);
  }

  // 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º
  const balance = await provider.getBalance(wallet.address, 'latest');
  const balanceEth = ethers.formatEther(balance);
  logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} wallet balance: ${balanceEth} ETH`);
  
  if (balance < ethers.parseEther('0.01')) {
    throw new Error(`Insufficient balance for deployment on chainId=${Number(net.chainId)}. Current: ${balanceEth} ETH, required: 0.01 ETH minimum`);
  }
  
  // 3) –î–µ–ø–ª–æ–π DLE —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º nonce
  logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} deploying DLE with current nonce`);
  
  const feeOverrides = await getFeeOverrides(provider);
  let gasLimit;
  
  try {
    // –û—Ü–µ–Ω–∏–≤–∞–µ–º –≥–∞–∑ –¥–ª—è –¥–µ–ø–ª–æ—è DLE
    const est = await wallet.estimateGas({ data: dleInit, ...feeOverrides }).catch(() => null);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π gasLimit –∏–∑ –±–∞–ª–∞–Ω—Å–∞
    const balance = await provider.getBalance(wallet.address, 'latest');
    const effPrice = feeOverrides.maxFeePerGas || feeOverrides.gasPrice || 0n;
    const reserve = hre.ethers.parseEther('0.005');
    const maxByBalance = effPrice > 0n && balance > reserve ? (balance - reserve) / effPrice : 3_000_000n;
    const fallbackGas = maxByBalance > 5_000_000n ? 5_000_000n : (maxByBalance < 2_500_000n ? 2_500_000n : maxByBalance);
    gasLimit = est ? (est + est / 5n) : fallbackGas;
    
    logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} estGas=${est?.toString?.()||'null'} effGasPrice=${effPrice?.toString?.()||'0'} maxByBalance=${maxByBalance.toString()} chosenGasLimit=${gasLimit.toString()}`);
  } catch (_) {
    gasLimit = 3_000_000n;
  }

  // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å DLE —Å —Ü–µ–ª–µ–≤—ã–º nonce (–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–ø–ª–æ–π)
  let predictedAddress = ethers.getCreateAddress({
    from: wallet.address,
    nonce: targetDLENonce
  });
  logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} predicted DLE address=${predictedAddress} (nonce=${targetDLENonce})`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –ª–∏ —É–∂–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç
  const existingCode = await provider.getCode(predictedAddress);
  if (existingCode && existingCode !== '0x') {
    logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} DLE already exists at predictedAddress, skip deploy`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    if (params.logoURI && params.logoURI !== '') {
      try {
        logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} checking logoURI for existing contract`);
        const DLE = await hre.ethers.getContractFactory('contracts/DLE.sol:DLE');
        const dleContract = DLE.attach(predictedAddress);
        
        const currentLogo = await dleContract.logoURI();
        if (currentLogo === '' || currentLogo === '0x') {
          logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} initializing logoURI for existing contract: ${params.logoURI}`);
          const logoTx = await dleContract.connect(wallet).initializeLogoURI(params.logoURI, feeOverrides);
          await logoTx.wait();
          logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} logoURI initialized for existing contract`);
        } else {
          logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} logoURI already set: ${currentLogo}`);
        }
      } catch (error) {
        logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} logoURI initialization failed for existing contract: ${error.message}`);
      }
    }
    
    return { address: predictedAddress, chainId: Number(net.chainId) };
  }

  // –î–µ–ø–ª–æ–∏–º DLE —Å retry –ª–æ–≥–∏–∫–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ race conditions
  let tx;
  let deployAttempts = 0;
  const maxDeployAttempts = 5;
  
  while (deployAttempts < maxDeployAttempts) {
    try {
      deployAttempts++;
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π nonce –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const currentNonce = await nonceManager.getNonce(wallet.address, rpcUrl, chainId, { timeout: 15000, maxRetries: 5 });
      logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} deploy attempt ${deployAttempts}/${maxDeployAttempts} with current nonce=${currentNonce} (target was ${targetDLENonce})`);
      
      const txData = {
        data: dleInit,
        nonce: currentNonce,
        gasLimit,
        ...feeOverrides
      };
      
      const result = await sendTransactionWithRetry(wallet, txData, { maxRetries: 3 });
      tx = result.tx;
      
      // –û—Ç–º–µ—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–∞–∫ pending –≤ NonceManager
      nonceManager.markTransactionPending(wallet.address, chainId, currentNonce, tx.hash);
      
      logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} deploy successful on attempt ${deployAttempts}`);
      break; // –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
      
    } catch (e) {
      const errorMsg = e?.message || e;
      logger.warn(`[MULTI_DBG] chainId=${Number(net.chainId)} deploy attempt ${deployAttempts} failed: ${errorMsg}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π nonce
      if (String(errorMsg).toLowerCase().includes('nonce too low') && deployAttempts < maxDeployAttempts) {
        logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} nonce race condition detected, retrying...`);
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π nonce –∏–∑ —Å–µ—Ç–∏
        const currentNonce = await nonceManager.getNonce(wallet.address, rpcUrl, chainId, { timeout: 15000, maxRetries: 5 });
        logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} current nonce: ${currentNonce}, target was: ${targetDLENonce}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º targetDLENonce –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π nonce
        targetDLENonce = currentNonce;
        logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} updated targetDLENonce to: ${targetDLENonce}`);
        
        // –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
        await new Promise(resolve => setTimeout(resolve, 1000));
        continue;
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ nonce –∏–ª–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –ø–æ–ø—ã—Ç–∫–∏, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      if (deployAttempts >= maxDeployAttempts) {
        throw new Error(`Deployment failed after ${maxDeployAttempts} attempts: ${errorMsg}`);
      }
      
      // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –¥–µ–ª–∞–µ–º –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }

  const rc = await tx.wait();
  
  // –û—Ç–º–µ—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—É—é –≤ NonceManager
  nonceManager.markTransactionConfirmed(wallet.address, chainId, tx.hash);
  const deployedAddress = rc.contractAddress || predictedAddress;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥—Ä–µ—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–º—É
  if (deployedAddress !== predictedAddress) {
    logger.error(`[MULTI_DBG] chainId=${Number(net.chainId)} ADDRESS MISMATCH! predicted=${predictedAddress} actual=${deployedAddress}`);
    throw new Error(`Address mismatch: predicted ${predictedAddress} != actual ${deployedAddress}`);
  }
  
  logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} DLE deployed at=${deployedAddress} ‚úÖ`);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞ –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
  if (params.logoURI && params.logoURI !== '') {
    try {
      logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} initializing logoURI: ${params.logoURI}`);
      const DLE = await hre.ethers.getContractFactory('contracts/DLE.sol:DLE');
      const dleContract = DLE.attach(deployedAddress);
      
      const logoTx = await dleContract.connect(wallet).initializeLogoURI(params.logoURI, feeOverrides);
      await logoTx.wait();
      logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} logoURI initialized successfully`);
    } catch (error) {
      logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} logoURI initialization failed: ${error.message}`);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –¥–µ–ø–ª–æ–π –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞
    }
  } else {
    logger.info(`[MULTI_DBG] chainId=${Number(net.chainId)} no logoURI specified, skipping initialization`);
  }
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è
  let verificationResult = { success: false, error: 'skipped' };
  
  if ((etherscanKey || params.etherscanApiKey) && params.autoVerifyAfterDeploy) {
    try {
      logger.info(`üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...`);
      logger.info(`[VERIFY_DBG] dleConfig available: ${!!dleConfig}`);
      logger.info(`[VERIFY_DBG] initializer: ${initializer}`);
      
      // –ö–æ–¥–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –≤ hex
      // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä DLE: constructor(DLEConfig memory config, address _initializer)
      const abiCoder = ethers.AbiCoder.defaultAbiCoder();
      
      // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ DLEConfig
      const dleConfigType = 'tuple(string,string,string,string,uint256,string[],uint256,uint256,address[],uint256[],uint256[])';
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º DLEConfig tuple (–≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —É–∂–µ BigInt –∏–∑ constructorArgsGenerator)
      const dleConfigTuple = [
        dleConfig.name,
        dleConfig.symbol,
        dleConfig.location,
        dleConfig.coordinates,
        dleConfig.jurisdiction, // —É–∂–µ BigInt
        dleConfig.okvedCodes, // —É–∂–µ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
        dleConfig.kpp, // —É–∂–µ BigInt
        dleConfig.quorumPercentage, // —É–∂–µ BigInt
        dleConfig.initialPartners,
        dleConfig.initialAmounts, // —É–∂–µ BigInt –º–∞—Å—Å–∏–≤
        dleConfig.supportedChainIds // —É–∂–µ BigInt –º–∞—Å—Å–∏–≤
      ];
      
      // –ö–æ–¥–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: (DLEConfig, address)
      const constructorArgsHex = abiCoder.encode(
        [dleConfigType, 'address'],
        [dleConfigTuple, initializer]
      ).slice(2); // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 0x
      
      logger.info(`[VERIFY_DBG] Constructor args encoded: ${constructorArgsHex.slice(0, 100)}...`);

      // –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
      logger.info(`[VERIFY_DBG] –û–∂–∏–¥–∞–µ–º 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...`);
      await new Promise(resolve => setTimeout(resolve, 5000));
      
      logger.info(`[VERIFY_DBG] Calling verifyDLEAfterDeploy...`);
      verificationResult = await verifyDLEAfterDeploy(
        Number(network.chainId),
        deployedAddress,
        constructorArgsHex,
        etherscanKey || params.etherscanApiKey,
        params
      );
      logger.info(`[VERIFY_DBG] verifyDLEAfterDeploy completed`);
      
      if (verificationResult.success) {
        logger.info(`‚úÖ DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${deployedAddress}`);
      } else {
        logger.warn(`‚ö†Ô∏è –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è DLE –Ω–µ —É–¥–∞–ª–∞—Å—å: ${verificationResult.error || verificationResult.message}`);
      }
    } catch (verificationError) {
      const errorMsg = verificationError.message || String(verificationError);
      const errorStack = verificationError.stack || 'No stack trace';
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ DLE: ${errorMsg}`);
      logger.error(`‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${errorStack}`);
      verificationResult = { success: false, error: errorMsg };
    }
  } else {
    if (!(etherscanKey || params.etherscanApiKey)) {
      logger.info(`‚ÑπÔ∏è API –∫–ª—é—á Etherscan –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é DLE`);
    } else if (!params.autoVerifyAfterDeploy) {
      logger.info(`‚ÑπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é DLE`);
    }
  }

    const finalChainId = Number(network.chainId);
    logger.info(`[MULTI_DBG] chainId=${finalChainId} Returning deployment result: address=${deployedAddress}`);
    return { 
      address: deployedAddress, 
      chainId: finalChainId,
      verification: verificationResult
    };
  } catch (error) {
    const errorMsg = error.message || String(error);
    const errorStack = error.stack || 'No stack trace';
    const chainIdStr = network?.chainId ? Number(network.chainId) : 'unknown';
    logger.error(`[MULTI_DBG] chainId=${chainIdStr} deployment failed: ${errorMsg}`);
    logger.error(`[MULTI_DBG] chainId=${chainIdStr} error stack: ${errorStack}`);
    throw error; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ main()
  }
}


async function main() {
  console.log('[MULTI_DBG] üöÄ –í–•–û–î–ò–ú –í –§–£–ù–ö–¶–ò–Æ MAIN!');
  const { ethers } = hre;
  console.log('[MULTI_DBG] ‚úÖ ethers –ø–æ–ª—É—á–µ–Ω');
  
  logger.info('[MULTI_DBG] üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –î–ï–ü–õ–û–ô DLE –ö–û–ù–¢–†–ê–ö–¢–ê');
  console.log('[MULTI_DBG] ‚úÖ logger.info –≤—ã–ø–æ–ª–Ω–µ–Ω');
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º ABI –∏ flattened –∫–æ–Ω—Ç—Ä–∞–∫—Ç –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º
  logger.info('üî® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ABI —Ñ–∞–π–ª–∞...');
  try {
    const { generateABIFile } = require('../generate-abi');
    generateABIFile();
    logger.info('‚úÖ ABI —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º');
  } catch (abiError) {
    logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ABI:', abiError.message);
  }
  
  logger.info('üî® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è flattened –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...');
  try {
    const { generateFlattened } = require('../generate-flattened');
    await generateFlattened();
    logger.info('‚úÖ Flattened –∫–æ–Ω—Ç—Ä–∞–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º');
  } catch (flattenError) {
    logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ flattened –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', flattenError.message);
  }
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ñ–∞–π–ª–∞
  console.log('[MULTI_DBG] üîç –ù–ê–ß–ò–ù–ê–ï–ú –ó–ê–ì–†–£–ó–ö–£ –ü–ê–†–ê–ú–ï–¢–†–û–í...');
  let params;
  
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const DeployParamsService = require('../../services/deployParamsService');
    const deployParamsService = new DeployParamsService();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π deploymentId
    const deploymentId = process.env.DEPLOYMENT_ID;
    if (deploymentId) {
      logger.info(`üîç –ò—â–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è deploymentId: ${deploymentId}`);
      params = await deployParamsService.getDeployParams(deploymentId);
      if (params) {
        logger.info('‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ deploymentId');
      } else {
        throw new Error(`–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è deploymentId: ${deploymentId}`);
      }
    } else {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è
      const latestParams = await deployParamsService.getLatestDeployParams(1);
      if (latestParams.length > 0) {
        params = latestParams[0];
        logger.info('‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø–æ—Å–ª–µ–¥–Ω–∏–µ)');
      } else {
        throw new Error('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      }
    }
    
    await deployParamsService.close();
  } catch (dbError) {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –ë–î:', dbError.message);
    throw new Error(`–î–µ–ø–ª–æ–π –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –ë–î: ${dbError.message}`);
  }
  logger.info('[MULTI_DBG] –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', {
    name: params.name,
    symbol: params.symbol,
    supportedChainIds: params.supportedChainIds,
    rpcUrls: params.rpcUrls || params.rpc_urls,
    etherscanApiKey: params.etherscanApiKey || params.etherscan_api_key
  });

  const pk = params.private_key || process.env.PRIVATE_KEY;
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º RPC URLs –∏–∑ deployParams, –∞ –Ω–µ –∏–∑ rpcProviderService
  const networks = params.rpcUrls || params.rpc_urls || [];
  
  logger.info(`[MULTI_DBG] üìä RPC URLs –∏–∑ deployParams: ${networks.length} —Å–µ—Ç–µ–π`);
  networks.forEach((url, i) => {
    logger.info(`[MULTI_DBG]   ${i + 1}. ${url}`);
  });
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API –∫–ª—é—á–∏ Etherscan –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const ApiKeyManager = require('../../utils/apiKeyManager');
  const etherscanKey = ApiKeyManager.getAndSetEtherscanApiKey(params);
  
  if (!etherscanKey) {
    logger.warn('[MULTI_DBG] ‚ö†Ô∏è Etherscan API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω - –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞');
    logger.warn(`[MULTI_DBG] –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: ${Object.keys(params).join(', ')}`);
  }
  
  if (!pk) throw new Error('Env: PRIVATE_KEY');
  if (networks.length === 0) throw new Error('RPC URLs not found in params');

  // Prepare init code once
  const DLE = await hre.ethers.getContractFactory('contracts/DLE.sol:DLE');
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
  const { generateDeploymentArgs } = require('../../utils/constructorArgsGenerator');
  const { dleConfig, initializer } = generateDeploymentArgs(params);
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ç–µ–π
  const supportedChainIds = params.supportedChainIds || [];
  if (supportedChainIds.length === 0) {
    throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ç–∏ (supportedChainIds)');
  }
  
  // –°–æ–∑–¥–∞–µ–º initCode –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
  const initCodes = {};
  for (const chainId of supportedChainIds) {
    const deployTx = await DLE.getDeployTransaction(dleConfig, initializer);
    initCodes[chainId] = deployTx.data;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º initCodeHash –∏–∑ –ø–µ—Ä–≤–æ–≥–æ initCode (–≤—Å–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ)
  const firstChainId = supportedChainIds[0];
  const firstInitCode = initCodes[firstChainId];
  if (!firstInitCode) {
    throw new Error(`InitCode –Ω–µ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–µ—Ä–≤–æ–π —Å–µ—Ç–∏: ${firstChainId}`);
  }
  const initCodeHash = ethers.keccak256(firstInitCode);
  
  // DEBUG: –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  try {
    logger.info(`[MULTI_DBG] GLOBAL initCodeHash(calculated)=${initCodeHash}`);
    logger.info(`[MULTI_DBG] GLOBAL firstInitCode.lenBytes=${ethers.getBytes(firstInitCode).length} head16=${firstInitCode.slice(0, 34)}...`);
  } catch (e) {
    logger.info('[MULTI_DBG] GLOBAL precheck error', e?.message || e);
  }

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∏ –≤—ã—á–∏—Å–ª–∏–º –æ–±—â–∏–π nonce –¥–ª—è DLE —Å retry –ª–æ–≥–∏–∫–æ–π
  logger.info(`[MULTI_DBG] –°–æ–∑–¥–∞–µ–º RPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è ${networks.length} —Å–µ—Ç–µ–π...`);
  const connections = await createMultipleRPCConnections(networks, pk, {
    maxRetries: 3,
    timeout: 30000
  });
  
  if (connections.length === 0) {
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ RPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
  }
  
  logger.info(`[MULTI_DBG] ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ ${connections.length}/${networks.length} —Å–µ—Ç—è–º`);
  
  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ç–µ–π
  for (const connection of connections) {
    const chainId = Number(connection.network.chainId);
    nonceManager.clearOldPendingTransactions(connection.wallet.address, chainId);
  }
  
  const nonces = [];
  for (const connection of connections) {
    const n = await nonceManager.getNonce(connection.wallet.address, connection.rpcUrl, Number(connection.network.chainId));
    nonces.push(n);
  }
  const targetDLENonce = Math.max(...nonces);
  logger.info(`[MULTI_DBG] nonces=${JSON.stringify(nonces)} targetDLENonce=${targetDLENonce}`);
  logger.info(`[MULTI_DBG] Starting deployment to ${networks.length} networks:`, networks);

  // –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ô –¥–µ–ø–ª–æ–π –≤–æ –≤—Å–µ—Ö —É—Å–ø–µ—à–Ω—ã—Ö —Å–µ—Ç—è—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
  console.log(`[MULTI_DBG] üöÄ –î–û–®–õ–ò –î–û –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ì–û –î–ï–ü–õ–û–Ø!`);
  logger.info(`[MULTI_DBG] Starting PARALLEL deployment to ${connections.length} successful networks`);
  logger.info(`[MULTI_DBG] üöÄ –ó–ê–ü–£–°–ö–ê–ï–ú –¶–ò–ö–õ –î–ï–ü–õ–û–Ø!`);
  
  const deploymentPromises = connections.map(async (connection, i) => {
    const rpcUrl = connection.rpcUrl;
    const chainId = Number(connection.network.chainId);
    
    logger.info(`[MULTI_DBG] üöÄ Starting deployment to network ${i + 1}/${connections.length}: ${rpcUrl} (chainId: ${chainId})`);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π initCode –¥–ª—è —ç—Ç–æ–π —Å–µ—Ç–∏
      const networkInitCode = initCodes[chainId];
      if (!networkInitCode) {
        throw new Error(`InitCode –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è chainId: ${chainId}`);
      }
      
      const r = await deployInNetwork(rpcUrl, pk, initCodeHash, targetDLENonce, networkInitCode, params, dleConfig, initializer, etherscanKey);
      logger.info(`[MULTI_DBG] ‚úÖ Network ${i + 1} (chainId: ${chainId}) deployment SUCCESS: ${r.address}`);
      return {
        rpcUrl, 
        chainId, 
        address: r.address, 
        success: true,
        verification: r.verification || { success: false, error: 'unknown' }
      };
    } catch (error) {
      const errorMsg = error.message || String(error);
      const errorStack = error.stack || 'No stack trace';
      logger.error(`[MULTI_DBG] ‚ùå Network ${i + 1} (chainId: ${chainId}) deployment FAILED: ${errorMsg}`);
      logger.error(`[MULTI_DBG] ‚ùå Network ${i + 1} (chainId: ${chainId}) error stack: ${errorStack}`);
      return { rpcUrl, chainId, error: errorMsg, success: false };
    }
  });
  
  // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –¥–µ–ø–ª–æ–µ–≤
  const results = await Promise.all(deploymentPromises);
  logger.info(`[MULTI_DBG] All ${networks.length} deployments completed`);
  
  // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏
  results.forEach((result, index) => {
    if (result.address) {
      logger.info(`[MULTI_DBG] ‚úÖ Network ${index + 1} (chainId: ${result.chainId}) SUCCESS: ${result.address}`);
    } else {
      logger.info(`[MULTI_DBG] ‚ùå Network ${index + 1} (chainId: ${result.chainId}) FAILED: ${result.error}`);
    }
  });
  
  // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  logger.info('[MULTI_DBG] Raw results:', JSON.stringify(results, null, 2));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è)
  const successfulResults = results.filter(r => r.success === true);
  const addresses = successfulResults.map(r => r.address).filter(addr => addr);
  const uniqueAddresses = [...new Set(addresses)];
  
  logger.info('[MULTI_DBG] All addresses:', addresses);
  logger.info('[MULTI_DBG] Unique addresses:', uniqueAddresses);
  logger.info('[MULTI_DBG] Results count:', results.length);
  logger.info('[MULTI_DBG] Networks count:', networks.length);
  
  if (uniqueAddresses.length > 1) {
    logger.error('[MULTI_DBG] ERROR: DLE addresses are different across networks!');
    logger.error('[MULTI_DBG] addresses:', uniqueAddresses);
    throw new Error('Nonce alignment failed - addresses are different');
  }
  
  if (uniqueAddresses.length === 0) {
    logger.error('[MULTI_DBG] ERROR: No successful deployments!');
    throw new Error('No successful deployments');
  }
  
  logger.info('[MULTI_DBG] SUCCESS: All DLE addresses are identical:', uniqueAddresses[0]);
  
  // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–µ–ø–ª–æ—è
  const finalResults = results.map((result) => ({
    ...result,
    verification: result.verification || { success: false, error: 'not_attempted' }
  }));
  
  // –í–´–í–û–î–ò–ú –†–ï–ó–£–õ–¨–¢–ê–¢ –° –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–û–ô –í–ï–†–ò–§–ò–ö–ê–¶–ò–ï–ô!
  console.log('[MULTI_DBG] üéØ –î–û–®–õ–ò –î–û –í–´–í–û–î–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê!');
  console.log('[MULTI_DBG] üìä finalResults:', JSON.stringify(finalResults, null, 2));
  console.log('[MULTI_DBG] üéØ –í–´–í–û–î–ò–ú MULTICHAIN_DEPLOY_RESULT!');
  console.log('MULTICHAIN_DEPLOY_RESULT', JSON.stringify(finalResults));
  console.log('[MULTI_DBG] ‚úÖ MULTICHAIN_DEPLOY_RESULT –í–´–í–ï–î–ï–ù!');
  logger.info('[MULTI_DBG] DLE deployment completed successfully with integrated verification!');
}

console.log('[MULTI_DBG] üöÄ –í–´–ó–´–í–ê–ï–ú MAIN()...');
main().catch((e) => { 
  console.log('[MULTI_DBG] ‚ùå –û–®–ò–ë–ö–ê –í MAIN:', e);
  logger.error('[MULTI_DBG] ‚ùå Deployment failed:', e);
  
  // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  const errorResult = {
    error: e.message,
    success: false,
    timestamp: new Date().toISOString(),
    stack: e.stack
  };
  
  console.log('MULTICHAIN_DEPLOY_RESULT', JSON.stringify([errorResult]));
  process.exit(1); 
});


