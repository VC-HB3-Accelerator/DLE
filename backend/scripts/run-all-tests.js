/**
 * –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 * Copyright (c) 2024-2025 –¢–∞—Ä–∞–±–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á
 */

const { spawn } = require('child_process');
const path = require('path');

console.log('üß™ –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í –î–õ–Ø –í–´–Ø–í–õ–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú–´');
console.log('=' .repeat(70));

const tests = [
  {
    name: '–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞',
    script: './test-file-creation.js',
    description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ current-params.json'
  },
  {
    name: '–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–µ–ø–ª–æ—è',
    script: './test-deploy-flow.js',
    description: '–ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–µ–ø–ª–æ—è DLE —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ñ–∞–π–ª–∞'
  },
  {
    name: '–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞',
    script: './test-file-persistence.js',
    description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π'
  },
  {
    name: '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫',
    script: './test-error-handling.js',
    description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –¥–µ–ø–ª–æ—è'
  }
];

async function runTest(testInfo, index) {
  return new Promise((resolve, reject) => {
    console.log(`\n${index + 1}Ô∏è‚É£ ${testInfo.name}`);
    console.log(`üìù ${testInfo.description}`);
    console.log('‚îÄ'.repeat(50));
    
    const testPath = path.join(__dirname, testInfo.script);
    const testProcess = spawn('node', [testPath], {
      stdio: 'inherit',
      cwd: __dirname
    });

    testProcess.on('close', (code) => {
      if (code === 0) {
        console.log(`‚úÖ ${testInfo.name} - –£–°–ü–ï–®–ù–û`);
        resolve(true);
      } else {
        console.log(`‚ùå ${testInfo.name} - –û–®–ò–ë–ö–ê (–∫–æ–¥: ${code})`);
        resolve(false);
      }
    });

    testProcess.on('error', (error) => {
      console.log(`‚ùå ${testInfo.name} - –û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê: ${error.message}`);
      resolve(false);
    });
  });
}

async function runAllTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤...\n');
  
  const results = [];
  
  for (let i = 0; i < tests.length; i++) {
    const result = await runTest(tests[i], i);
    results.push({
      name: tests[i].name,
      success: result
    });
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }

  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\n' + '='.repeat(70));
  console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–û–í');
  console.log('='.repeat(70));
  
  const successfulTests = results.filter(r => r.success).length;
  const totalTests = results.length;
  
  results.forEach((result, index) => {
    const status = result.success ? '‚úÖ' : '‚ùå';
    console.log(`${index + 1}. ${status} ${result.name}`);
  });
  
  console.log(`\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${successfulTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ`);
  
  if (successfulTests === totalTests) {
    console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
    console.log('üí° –ü—Ä–æ–±–ª–µ–º–∞ –ù–ï –≤ –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö —Å —Ñ–∞–π–ª–∞–º–∏');
    console.log('üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:');
    console.log('   - –ü—Ä–æ—Ü–µ—Å—Å –¥–µ–ø–ª–æ—è –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç—Å—è –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞');
    console.log('   - –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ dleV2Service.js');
    console.log('   - –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º');
    console.log('   - –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏');
  } else {
    console.log('‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò');
    console.log('üîç –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É');
  }
  
  console.log('\nüõ†Ô∏è –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
  console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node debug-file-monitor.js (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ)');
  console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–ø–ª–æ–π DLE –≤ –¥—Ä—É–≥–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ');
  console.log('3. –ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ–º/—É–¥–∞–ª–µ–Ω–∏–µ–º —Ñ–∞–π–ª–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
  console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Docker: docker logs dapp-backend -f');
  
  console.log('\nüìã –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò:');
  console.log('# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º:');
  console.log('ls -la backend/scripts/deploy/');
  console.log('ls -la backend/temp/');
  console.log('');
  console.log('# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã Node.js:');
  console.log('ps aux | grep node');
  console.log('');
  console.log('# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞:');
  console.log('df -h backend/scripts/deploy/');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
runAllTests().catch(error => {
  console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
  process.exit(1);
});
