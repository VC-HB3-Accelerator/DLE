/**
 * –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ Etherscan V2
 */

// const { execSync } = require('child_process'); // –£–¥–∞–ª–µ–Ω–æ - –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Hardhat verify
const DeployParamsService = require('../services/deployParamsService');
const deploymentWebSocketService = require('../services/deploymentWebSocketService');
const { getSecret } = require('../services/secretStore');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è Etherscan V2 API URL –ø–æ chainId
function getEtherscanApiUrl(chainId) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π Etherscan V2 API –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ç–µ–π
  return `https://api.etherscan.io/v2/api?chainid=${chainId}`;
}

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
const { createStandardJsonInput: createStandardJsonInputHelper } = require('../utils/standardJsonInputHelper');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ JSON input
function createStandardJsonInput() {
  const path = require('path');
  const contractPath = path.join(__dirname, '../contracts/DLE.sol');
  return createStandardJsonInputHelper(contractPath, 'DLE');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function checkVerificationStatus(chainId, guid, apiKey) {
  const apiUrl = getEtherscanApiUrl(chainId);
  
  const formData = new URLSearchParams({
    apikey: apiKey,
    module: 'contract',
    action: 'checkverifystatus',
    guid: guid
  });
  
  try {
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: formData
    });
    
    const result = await response.json();
    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:', error.message);
    return { status: '0', message: error.message };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ Etherscan
async function checkContractVerificationStatus(chainId, contractAddress, apiKey) {
  const apiUrl = getEtherscanApiUrl(chainId);
  
  const formData = new URLSearchParams({
    apikey: apiKey,
    module: 'contract',
    action: 'getsourcecode',
    address: contractAddress
  });
  
  try {
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: formData
    });
    
    const result = await response.json();
    
    if (result.status === '1' && result.result && result.result[0]) {
      const contractInfo = result.result[0];
      const isVerified = contractInfo.SourceCode && contractInfo.SourceCode !== '';
      
      console.log(`üîç –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ ${contractAddress}:`, {
        isVerified: isVerified,
        contractName: contractInfo.ContractName || 'Unknown',
        compilerVersion: contractInfo.CompilerVersion || 'Unknown'
      });
      
      return { isVerified, contractInfo };
    } else {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ:', result.message);
      return { isVerified: false, error: result.message };
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', error.message);
    return { isVerified: false, error: error.message };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ Etherscan V2
async function verifyContractInEtherscan(chainId, contractAddress, constructorArgsHex, apiKey) {
  const apiUrl = getEtherscanApiUrl(chainId);
  const standardJsonInput = createStandardJsonInput();
  
  console.log(`üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ ${contractAddress} –≤ Etherscan V2 (chainId: ${chainId})`);
  console.log(`üì° API URL: ${apiUrl}`);
  
  const formData = new URLSearchParams({
    apikey: apiKey,
    module: 'contract',
    action: 'verifysourcecode',
    contractaddress: contractAddress,
    codeformat: 'solidity-standard-json-input',
    contractname: 'DLE.sol:DLE',
    sourceCode: JSON.stringify(standardJsonInput),
    compilerversion: 'v0.8.20+commit.a1b79de6',
    optimizationUsed: '1',
    runs: '0',
    constructorArguements: constructorArgsHex
  });
  
  try {
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: formData
    });
    
    const result = await response.json();
    console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç Etherscan V2:', result);
    
    if (result.status === '1') {
      console.log('‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Etherscan V2!');
      console.log(`üìã GUID: ${result.result}`);
      
      // –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
      console.log('‚è≥ –ñ–¥–µ–º 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞...');
      await new Promise(resolve => setTimeout(resolve, 15000));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–¥–æ 3 —Ä–∞–∑)
      let statusResult;
      let attempts = 0;
      const maxAttempts = 3;
      
      do {
        attempts++;
        console.log(`üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts})...`);
        statusResult = await checkVerificationStatus(chainId, result.result, apiKey);
        console.log('üìä –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', statusResult);
        
        if (statusResult.status === '1') {
          console.log('üéâ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
          return { success: true, guid: result.result, message: '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ –≤ Etherscan V2' };
        } else if (statusResult.status === '0' && statusResult.result.includes('Pending')) {
          console.log('‚è≥ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ Etherscan
          const contractStatus = await checkContractVerificationStatus(chainId, contractAddress, apiKey);
          if (contractStatus.isVerified) {
            console.log('‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –≤ Etherscan!');
            return { success: true, guid: result.result, message: '–ö–æ–Ω—Ç—Ä–∞–∫—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' };
          } else {
            console.log('‚è≥ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –µ—â–µ –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –æ–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
            if (attempts < maxAttempts) {
              console.log(`‚è≥ –ñ–¥–µ–º –µ—â–µ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
              await new Promise(resolve => setTimeout(resolve, 10000));
            }
          }
        } else {
          console.log('‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å:', statusResult.result);
          return { success: false, error: statusResult.result };
        }
      } while (attempts < maxAttempts && statusResult.status === '0' && statusResult.result.includes('Pending'));
      
      // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
      if (attempts >= maxAttempts) {
        console.log('‚è≥ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ, –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...');
        return { success: false, error: '–û–∂–∏–¥–∞–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏', guid: result.result };
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Etherscan V2:', result.message);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç
      if (result.message && result.message.includes('already verified')) {
        console.log('‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
        return { success: true, message: '–ö–æ–Ω—Ç—Ä–∞–∫—Ç —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' };
      }
      
      return { success: false, error: result.message };
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ Etherscan V2:', error.message);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π —Å–µ—Ç–∏
    if (error.message.includes('fetch') || error.message.includes('network')) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏, –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...');
      return { success: false, error: 'Network error - verification may be in progress' };
    }
    
    return { success: false, error: error.message };
  }
}

async function verifyWithHardhatV2(params = null, deployedNetworks = null) {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤...');
  
  try {
    // –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –ø–æ–ª—É—á–∞–µ–º –∏—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if (!params) {
      const DeployParamsService = require('../services/deployParamsService');
      const deployParamsService = new DeployParamsService();
      const latestParams = await deployParamsService.getLatestDeployParams(1);
      
      if (latestParams.length === 0) {
        throw new Error('–ù–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      }
      
      params = latestParams[0];
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const etherscanApiKey = params.etherscan_api_key || process.env.ETHERSCAN_API_KEY;
    if (!etherscanApiKey) {
      throw new Error('Etherscan API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API –∫–ª—é—á –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ
    process.env.ETHERSCAN_API_KEY = etherscanApiKey;
    
    console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è:', {
      deploymentId: params.deployment_id,
      name: params.name,
      symbol: params.symbol
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    let networks = [];
    
    if (deployedNetworks && Array.isArray(deployedNetworks)) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ç—è—Ö
      networks = deployedNetworks;
      console.log('üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö —Å–µ—Ç—è—Ö');
    } else if (params.deployedNetworks && Array.isArray(params.deployedNetworks)) {
      networks = params.deployedNetworks;
    } else if (params.dle_address && params.supportedChainIds) {
      // –°–æ–∑–¥–∞–µ–º deployedNetworks –Ω–∞ –æ—Å–Ω–æ–≤–µ dle_address –∏ supportedChainIds
      networks = params.supportedChainIds.map(chainId => ({
        chainId: chainId,
        address: params.dle_address
      }));
      console.log('üìä –°–æ–∑–¥–∞–ª–∏ deployedNetworks –Ω–∞ –æ—Å–Ω–æ–≤–µ dle_address –∏ supportedChainIds');
    } else {
      throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö —Å–µ—Ç—è—Ö –∏–ª–∏ –∞–¥—Ä–µ—Å–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞');
    }
    console.log(`üåê –ù–∞–π–¥–µ–Ω–æ ${networks.length} —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö —Å–µ—Ç–µ–π`);
    
    // –ü–æ–ª—É—á–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ chainId –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ç–µ–π –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è
    const networkMap = {};
    if (params.supportedChainIds && params.supportedChainIds.length > 0) {
      // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ç–µ–π
      for (const chainId of params.supportedChainIds) {
        switch (chainId) {
          case 1: networkMap[chainId] = 'mainnet'; break;
          case 11155111: networkMap[chainId] = 'sepolia'; break;
          case 17000: networkMap[chainId] = 'holesky'; break;
          case 137: networkMap[chainId] = 'polygon'; break;
          case 42161: networkMap[chainId] = 'arbitrumOne'; break;
          case 421614: networkMap[chainId] = 'arbitrumSepolia'; break;
          case 56: networkMap[chainId] = 'bsc'; break;
          case 8453: networkMap[chainId] = 'base'; break;
          case 84532: networkMap[chainId] = 'baseSepolia'; break;
          default: networkMap[chainId] = `chain-${chainId}`; break;
        }
      }
    } else {
      // Fallback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      networkMap[11155111] = 'sepolia';
      networkMap[17000] = 'holesky';
      networkMap[421614] = 'arbitrumSepolia';
      networkMap[84532] = 'baseSepolia';
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
    const { generateVerificationArgs } = require('../utils/constructorArgsGenerator');
    const constructorArgs = generateVerificationArgs(params);
    
    console.log('üìä –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã');
    
    // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤ –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏
    const verificationResults = [];
    
    for (const network of networks) {
      const { chainId, address } = network;
      
      if (!address || address === '0x0000000000000000000000000000000000000000') {
        console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ—Ç—å ${chainId} - –Ω–µ—Ç –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞`);
        verificationResults.push({ 
          success: false, 
          network: chainId, 
          error: 'No contract address' 
        });
        continue;
      }
      
      const networkName = networkMap[chainId];
      if (!networkName) {
        console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ—Ç—å ${chainId}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é`);
        verificationResults.push({ 
          success: false, 
          network: chainId, 
          error: 'Unknown network' 
        });
        continue;
      }
      
      console.log(`\nüîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ —Å–µ—Ç–∏ ${networkName} (chainId: ${chainId})`);
      console.log(`üìç –ê–¥—Ä–µ—Å: ${address}`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è–º–∏
      if (verificationResults.length > 0) {
        console.log('‚è≥ –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π...');
        await new Promise(resolve => setTimeout(resolve, 5000));
      }
      
      // –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á Etherscan
      const etherscanApiKey = process.env.ETHERSCAN_API_KEY;
      if (!etherscanApiKey) {
        console.log('‚ùå API –∫–ª—é—á Etherscan –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ Etherscan');
        verificationResults.push({ 
          success: false, 
          network: networkName,
          chainId: chainId,
          error: 'No Etherscan API key' 
        });
        continue;
      }
      
      // –ö–æ–¥–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –≤ hex
      const { ethers } = require('ethers');
      const abiCoder = ethers.AbiCoder.defaultAbiCoder();
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
      const { generateDeploymentArgs } = require('../utils/constructorArgsGenerator');
      const { dleConfig, initializer } = generateDeploymentArgs(params);
      
      const encodedArgs = abiCoder.encode(
        [
          'tuple(string name, string symbol, string location, string coordinates, uint256 jurisdiction, string[] okvedCodes, uint256 kpp, uint256 quorumPercentage, address[] initialPartners, uint256[] initialAmounts, uint256[] supportedChainIds)',
          'address'
        ],
        [
          dleConfig,
          initializer
        ]
      );
      
      const constructorArgsHex = encodedArgs.slice(2); // –£–±–∏—Ä–∞–µ–º 0x
      
      // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Etherscan
      console.log('üåê –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Etherscan...');
      const etherscanResult = await verifyContractInEtherscan(chainId, address, constructorArgsHex, etherscanApiKey);
      
      if (etherscanResult.success) {
        console.log('‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Etherscan —É—Å–ø–µ—à–Ω–∞!');
        verificationResults.push({ 
          success: true, 
          network: networkName,
          chainId: chainId,
          etherscan: true,
          message: etherscanResult.message
        });
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Etherscan:', etherscanResult.error);
        verificationResults.push({ 
          success: false, 
          network: networkName,
          chainId: chainId,
          error: etherscanResult.error
        });
      }
    }
    
    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\nüìä –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:');
    const successful = verificationResults.filter(r => r.success).length;
    const failed = verificationResults.filter(r => !r.success).length;
    const etherscanVerified = verificationResults.filter(r => r.etherscan).length;
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: ${successful}`);
    console.log(`üåê –í Etherscan: ${etherscanVerified}`);
    console.log(`‚ùå –û—à–∏–±–∫–∏: ${failed}`);
    
    verificationResults.forEach(result => {
      const status = result.success ? '‚úÖ' : '‚ùå';
      
      const message = result.success 
        ? (result.message || 'OK')
        : result.error?.substring(0, 100) + '...';
        
      console.log(`${status} ${result.network} (${result.chainId}): ${message}`);
    });
    
    console.log('\nüéâ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error.message);
    console.error(error.stack);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  const args = process.argv.slice(2);
  
  if (args.includes('--modules')) {
    // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
    verifyModules()
      .then(() => {
        console.log('\nüèÅ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        process.exit(0);
      })
      .catch((error) => {
        console.error('üí• –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π:', error);
        process.exit(1);
      });
  } else {
    // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    verifyWithHardhatV2()
      .then(() => {
        console.log('\nüèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
        process.exit(0);
      })
      .catch((error) => {
        console.error('üí• –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error);
        process.exit(1);
      });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π
async function verifyModules() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π...');
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const deployParamsService = new DeployParamsService();
    const paramsArray = await deployParamsService.getLatestDeployParams(1);
    
    if (paramsArray.length === 0) {
      throw new Error('–ù–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
    
    const params = paramsArray[0];
    const dleAddress = params.dle_address;
    
    if (!dleAddress) {
      throw new Error('–ê–¥—Ä–µ—Å DLE –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö');
    }
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º WebSocket –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ –Ω–∞—á–∞–ª–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    deploymentWebSocketService.addDeploymentLog(dleAddress, 'info', '–ù–∞—á–∞–ª–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π');
    
    console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π:', {
      dleAddress: dleAddress,
      name: params.name,
      symbol: params.symbol
    });
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã –º–æ–¥—É–ª–µ–π
    const fs = require('fs');
    const path = require('path');
    const modulesDir = path.join(__dirname, 'contracts-data/modules');
    
    if (!fs.existsSync(modulesDir)) {
      console.log('üìÅ –ü–∞–ø–∫–∞ –º–æ–¥—É–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', modulesDir);
      return;
    }
    
    const moduleFiles = fs.readdirSync(modulesDir).filter(file => file.endsWith('.json'));
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${moduleFiles.length} —Ñ–∞–π–ª–æ–≤ –º–æ–¥—É–ª–µ–π`);
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const MODULE_CONFIGS = {
      treasury: {
        contractName: 'TreasuryModule',
        constructorArgs: (dleAddress, chainId, walletAddress) => [
          dleAddress,
          chainId,
          walletAddress
        ]
      },
      timelock: {
        contractName: 'TimelockModule',
        constructorArgs: (dleAddress, chainId, walletAddress) => [
          dleAddress
        ]
      },
      reader: {
        contractName: 'DLEReader',
        constructorArgs: (dleAddress, chainId, walletAddress) => [
          dleAddress
        ]
      },
      hierarchicalVoting: {
        contractName: 'HierarchicalVotingModule',
        constructorArgs: (dleAddress, chainId, walletAddress) => [
          dleAddress
        ]
      }
    };
    
    // –ü–æ–ª—É—á–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ chainId –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ç–µ–π –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è
    const networkMap = {};
    if (params.supportedChainIds && params.supportedChainIds.length > 0) {
      // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ç–µ–π
      for (const chainId of params.supportedChainIds) {
        switch (chainId) {
          case 11155111: networkMap[chainId] = 'sepolia'; break;
          case 17000: networkMap[chainId] = 'holesky'; break;
          case 421614: networkMap[chainId] = 'arbitrumSepolia'; break;
          case 84532: networkMap[chainId] = 'baseSepolia'; break;
          default: networkMap[chainId] = `chain-${chainId}`; break;
        }
      }
    } else {
      // Fallback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      networkMap[11155111] = 'sepolia';
      networkMap[17000] = 'holesky';
      networkMap[421614] = 'arbitrumSepolia';
      networkMap[84532] = 'baseSepolia';
    }
    
    // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –º–æ–¥—É–ª—å
    for (const file of moduleFiles) {
      const filePath = path.join(modulesDir, file);
      const moduleData = JSON.parse(fs.readFileSync(filePath, 'utf8'));
      
      const moduleConfig = MODULE_CONFIGS[moduleData.moduleType];
      if (!moduleConfig) {
        console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–æ–¥—É–ª—è: ${moduleData.moduleType}`);
        continue;
      }
      
      console.log(`üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –º–æ–¥—É–ª—è: ${moduleData.moduleType}`);
      
      // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –≤ –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏
      for (const network of moduleData.networks) {
        if (!network.success || !network.address) {
          console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ—Ç—å ${network.chainId} - –º–æ–¥—É–ª—å –Ω–µ –∑–∞–¥–µ–ø–ª–æ–µ–Ω`);
          continue;
        }
        
        const networkName = networkMap[network.chainId];
        if (!networkName) {
          console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ—Ç—å: ${network.chainId}`);
          continue;
        }
        
        try {
          console.log(`üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è ${moduleData.moduleType} –≤ —Å–µ—Ç–∏ ${networkName} (${network.chainId})`);
          
          // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
          const constructorArgs = moduleConfig.constructorArgs(
            dleAddress, 
            network.chainId, 
            params.initializer || "0x0000000000000000000000000000000000000000"
          );
          
          // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
          const argsFile = path.join(__dirname, `temp-args-${Date.now()}.json`);
          fs.writeFileSync(argsFile, JSON.stringify(constructorArgs, null, 2));
          
          // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π —á–µ—Ä–µ–∑ Etherscan V2 API (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
          console.log(`‚ö†Ô∏è –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π —á–µ—Ä–µ–∑ Etherscan V2 API –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –¥–ª—è ${moduleData.moduleType} –≤ ${networkName}`);
          
          // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
          if (fs.existsSync(argsFile)) {
            fs.unlinkSync(argsFile);
          }
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ ${moduleData.moduleType} –≤ —Å–µ—Ç–∏ ${network.chainId}:`, error.message);
        }
      }
    }
    
    console.log('\nüèÅ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º WebSocket –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    deploymentWebSocketService.addDeploymentLog(dleAddress, 'success', '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    deploymentWebSocketService.notifyModulesUpdated(dleAddress);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π:', error.message);
    throw error;
  }
}

module.exports = { verifyWithHardhatV2, verifyContracts: verifyWithHardhatV2, verifyModules };
