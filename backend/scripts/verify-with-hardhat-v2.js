/**
 * –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Å Hardhat V2 API
 */

const { execSync } = require('child_process');
const DeployParamsService = require('../services/deployParamsService');

async function verifyWithHardhatV2(params = null, deployedNetworks = null) {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å Hardhat V2...');
  
  try {
    // –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –ø–æ–ª—É—á–∞–µ–º –∏—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if (!params) {
      const DeployParamsService = require('../services/deployParamsService');
      const deployParamsService = new DeployParamsService();
      const latestParams = await deployParamsService.getLatestDeployParams(1);
      
      if (latestParams.length === 0) {
        throw new Error('–ù–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      }
      
      params = latestParams[0];
    }
    
    if (!params.etherscan_api_key) {
      throw new Error('Etherscan API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö');
    }
    
    console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è:', {
      deploymentId: params.deployment_id,
      name: params.name,
      symbol: params.symbol
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    let networks = [];
    
    if (deployedNetworks && Array.isArray(deployedNetworks)) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ç—è—Ö
      networks = deployedNetworks;
      console.log('üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö —Å–µ—Ç—è—Ö');
    } else if (params.deployedNetworks && Array.isArray(params.deployedNetworks)) {
      networks = params.deployedNetworks;
    } else if (params.dle_address && params.supportedChainIds) {
      // –°–æ–∑–¥–∞–µ–º deployedNetworks –Ω–∞ –æ—Å–Ω–æ–≤–µ dle_address –∏ supportedChainIds
      networks = params.supportedChainIds.map(chainId => ({
        chainId: chainId,
        address: params.dle_address
      }));
      console.log('üìä –°–æ–∑–¥–∞–ª–∏ deployedNetworks –Ω–∞ –æ—Å–Ω–æ–≤–µ dle_address –∏ supportedChainIds');
    } else {
      throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö —Å–µ—Ç—è—Ö –∏–ª–∏ –∞–¥—Ä–µ—Å–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞');
    }
    console.log(`üåê –ù–∞–π–¥–µ–Ω–æ ${networks.length} —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö —Å–µ—Ç–µ–π`);
    
    // –ú–∞–ø–ø–∏–Ω–≥ chainId –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ç–µ–π
    const networkMap = {
      1: 'mainnet',
      11155111: 'sepolia', 
      17000: 'holesky',
      137: 'polygon',
      42161: 'arbitrumOne',
      421614: 'arbitrumSepolia',
      56: 'bsc',
      8453: 'base',
      84532: 'baseSepolia'
    };
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
    const constructorArgs = [
      {
        name: params.name || '',
        symbol: params.symbol || '',
        location: params.location || '',
        coordinates: params.coordinates || '',
        jurisdiction: params.jurisdiction || 0,
        oktmo: params.oktmo || '',
        okvedCodes: params.okvedCodes || [],
        kpp: params.kpp ? params.kpp : 0,
        quorumPercentage: params.quorumPercentage || 51,
        initialPartners: params.initialPartners || [],
        initialAmounts: (params.initialAmounts || []).map(amount => (parseFloat(amount) * 10**18).toString()),
        supportedChainIds: (params.supportedChainIds || []).map(id => id.toString())
      },
      (params.currentChainId || params.supportedChainIds?.[0] || 1).toString(),
      params.initializer || params.initialPartners?.[0] || "0x0000000000000000000000000000000000000000"
    ];
    
    console.log('üìä –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã');
    
    // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤ –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏
    const verificationResults = [];
    
    for (const network of networks) {
      const { chainId, address } = network;
      
      if (!address || address === '0x0000000000000000000000000000000000000000') {
        console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ—Ç—å ${chainId} - –Ω–µ—Ç –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞`);
        verificationResults.push({ 
          success: false, 
          network: chainId, 
          error: 'No contract address' 
        });
        continue;
      }
      
      const networkName = networkMap[chainId];
      if (!networkName) {
        console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ—Ç—å ${chainId}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é`);
        verificationResults.push({ 
          success: false, 
          network: chainId, 
          error: 'Unknown network' 
        });
        continue;
      }
      
      console.log(`\nüîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ —Å–µ—Ç–∏ ${networkName} (chainId: ${chainId})`);
      console.log(`üìç –ê–¥—Ä–µ—Å: ${address}`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è–º–∏
      if (verificationResults.length > 0) {
        console.log('‚è≥ –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π...');
        await new Promise(resolve => setTimeout(resolve, 5000));
      }
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
      const fs = require('fs');
      const path = require('path');
      const argsFile = path.join(__dirname, `constructor-args-${Date.now()}.json`);
      
      try {
        fs.writeFileSync(argsFile, JSON.stringify(constructorArgs, null, 2));
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        const command = `ETHERSCAN_API_KEY="${params.etherscan_api_key}" npx hardhat verify --network ${networkName} ${address} --constructor-args ${argsFile}`;
        
        console.log(`üíª –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: npx hardhat verify --network ${networkName} ${address} --constructor-args ${argsFile}`);
        
        const output = execSync(command, { 
          cwd: '/app',
          encoding: 'utf8',
          stdio: 'pipe'
        });
        
        console.log('‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:');
        console.log(output);
        
        verificationResults.push({ 
          success: true, 
          network: networkName,
          chainId: chainId 
        });
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try {
          fs.unlinkSync(argsFile);
        } catch (e) {
          console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${argsFile}`);
        }
        
      } catch (error) {
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try {
          fs.unlinkSync(argsFile);
        } catch (e) {
          console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${argsFile}`);
        }
        
        const errorOutput = error.stdout || error.stderr || error.message;
        console.log('üì• –í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã:');
        console.log(errorOutput);
        
        if (errorOutput.includes('Already Verified')) {
          console.log('‚ÑπÔ∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
          verificationResults.push({ 
            success: true, 
            network: networkName,
            chainId: chainId,
            alreadyVerified: true 
          });
        } else if (errorOutput.includes('Successfully verified')) {
          console.log('‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!');
          verificationResults.push({ 
            success: true, 
            network: networkName,
            chainId: chainId 
          });
        } else {
          console.log('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
          verificationResults.push({ 
            success: false, 
            network: networkName,
            chainId: chainId,
            error: errorOutput 
          });
        }
      }
    }
    
    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\nüìä –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:');
    const successful = verificationResults.filter(r => r.success).length;
    const failed = verificationResults.filter(r => !r.success).length;
    const alreadyVerified = verificationResults.filter(r => r.alreadyVerified).length;
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: ${successful}`);
    console.log(`‚ÑπÔ∏è –£–∂–µ –±—ã–ª–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: ${alreadyVerified}`);
    console.log(`‚ùå –û—à–∏–±–∫–∏: ${failed}`);
    
    verificationResults.forEach(result => {
      const status = result.success 
        ? (result.alreadyVerified ? '‚ÑπÔ∏è' : '‚úÖ') 
        : '‚ùå';
      console.log(`${status} ${result.network} (${result.chainId}): ${result.success ? 'OK' : result.error?.substring(0, 100) + '...'}`);
    });
    
    console.log('\nüéâ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error.message);
    console.error(error.stack);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  verifyWithHardhatV2()
    .then(() => {
      console.log('\nüèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

module.exports = { verifyWithHardhatV2, verifyContracts: verifyWithHardhatV2 };
