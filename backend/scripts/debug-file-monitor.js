/**
 * –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–µ–ø–ª–æ—è
 * Copyright (c) 2024-2025 –¢–∞—Ä–∞–±–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á
 */

const fs = require('fs');
const path = require('path');

console.log('üîç –û–¢–õ–ê–î–û–ß–ù–´–ô –ú–û–ù–ò–¢–û–†: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ current-params.json');
console.log('=' .repeat(70));

class FileMonitor {
  constructor() {
    this.watchedFiles = new Map();
    this.isMonitoring = false;
  }

  startMonitoring() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤...');
    this.isMonitoring = true;
    
    const deployDir = path.join(__dirname, './deploy');
    const tempDir = path.join(__dirname, '../temp');
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    this.watchDirectory(deployDir, 'deploy');
    this.watchDirectory(tempDir, 'temp');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
    this.checkExistingFiles();
    
    console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.');
  }

  watchDirectory(dirPath, label) {
    if (!fs.existsSync(dirPath)) {
      console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${label} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${dirPath}`);
      return;
    }

    console.log(`üìÅ –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ${label}: ${dirPath}`);
    
    try {
      const watcher = fs.watch(dirPath, (eventType, filename) => {
        if (filename && filename.includes('current-params')) {
          const filePath = path.join(dirPath, filename);
          const timestamp = new Date().toISOString();
          
          console.log(`\nüîî ${timestamp} - ${label.toUpperCase()}:`);
          console.log(`   –°–æ–±—ã—Ç–∏–µ: ${eventType}`);
          console.log(`   –§–∞–π–ª: ${filename}`);
          console.log(`   –ü—É—Ç—å: ${filePath}`);
          
          if (eventType === 'rename' && filename) {
            // –§–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω
            setTimeout(() => {
              const exists = fs.existsSync(filePath);
              console.log(`   –°—Ç–∞—Ç—É—Å: ${exists ? '–°–£–©–ï–°–¢–í–£–ï–¢' : '–£–î–ê–õ–ï–ù'}`);
              
              if (exists) {
                try {
                  const stats = fs.statSync(filePath);
                  console.log(`   –†–∞–∑–º–µ—Ä: ${stats.size} –±–∞–π—Ç`);
                  console.log(`   –ò–∑–º–µ–Ω–µ–Ω: ${stats.mtime}`);
                } catch (statError) {
                  console.log(`   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${statError.message}`);
                }
              }
            }, 100);
          }
        }
      });

      this.watchedFiles.set(dirPath, watcher);
      console.log(`‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ${label} –∑–∞–ø—É—â–µ–Ω`);
      
    } catch (watchError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ${label}: ${watchError.message}`);
    }
  }

  checkExistingFiles() {
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤...');
    
    const pathsToCheck = [
      path.join(__dirname, './deploy/current-params.json'),
      path.join(__dirname, '../temp'),
      path.join(__dirname, './deploy')
    ];

    pathsToCheck.forEach(checkPath => {
      try {
        if (fs.existsSync(checkPath)) {
          const stats = fs.statSync(checkPath);
          if (stats.isFile()) {
            console.log(`üìÑ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: ${checkPath}`);
            console.log(`   –†–∞–∑–º–µ—Ä: ${stats.size} –±–∞–π—Ç`);
            console.log(`   –°–æ–∑–¥–∞–Ω: ${stats.birthtime}`);
            console.log(`   –ò–∑–º–µ–Ω–µ–Ω: ${stats.mtime}`);
          } else if (stats.isDirectory()) {
            console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞: ${checkPath}`);
            const files = fs.readdirSync(checkPath);
            const currentParamsFiles = files.filter(f => f.includes('current-params'));
            if (currentParamsFiles.length > 0) {
              console.log(`   –§–∞–π–ª—ã current-params: ${currentParamsFiles.join(', ')}`);
            } else {
              console.log(`   –§–∞–π–ª—ã current-params: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
            }
          }
        } else {
          console.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: ${checkPath}`);
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ${checkPath}: ${error.message}`);
      }
    });
  }

  stopMonitoring() {
    console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
    this.isMonitoring = false;
    
    this.watchedFiles.forEach((watcher, path) => {
      try {
        watcher.close();
        console.log(`‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${path}`);
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ${path}: ${error.message}`);
      }
    });
    
    this.watchedFiles.clear();
    console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
  startPeriodicCheck(intervalMs = 5000) {
    console.log(`‚è∞ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∫–∞–∂–¥—ã–µ ${intervalMs}ms)...`);
    
    const checkInterval = setInterval(() => {
      if (!this.isMonitoring) {
        clearInterval(checkInterval);
        return;
      }
      
      this.performPeriodicCheck();
    }, intervalMs);
    
    return checkInterval;
  }

  performPeriodicCheck() {
    const timestamp = new Date().toISOString();
    console.log(`\n‚è∞ ${timestamp} - –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:`);
    
    const filesToCheck = [
      path.join(__dirname, './deploy/current-params.json'),
      path.join(__dirname, './deploy'),
      path.join(__dirname, '../temp')
    ];

    filesToCheck.forEach(filePath => {
      try {
        if (fs.existsSync(filePath)) {
          const stats = fs.statSync(filePath);
          if (stats.isFile()) {
            console.log(`   üìÑ ${path.basename(filePath)}: ${stats.size} –±–∞–π—Ç`);
          } else if (stats.isDirectory()) {
            const files = fs.readdirSync(filePath);
            const currentParamsFiles = files.filter(f => f.includes('current-params'));
            console.log(`   üìÅ ${path.basename(filePath)}: ${files.length} —Ñ–∞–π–ª–æ–≤, current-params: ${currentParamsFiles.length}`);
          }
        } else {
          console.log(`   ‚ùå ${path.basename(filePath)}: –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }
      } catch (error) {
        console.log(`   ‚ö†Ô∏è ${path.basename(filePath)}: –æ—à–∏–±–∫–∞ ${error.message}`);
      }
    });
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
const monitor = new FileMonitor();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT...');
  monitor.stopMonitoring();
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM...');
  monitor.stopMonitoring();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
monitor.startMonitoring();
monitor.startPeriodicCheck(3000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã

console.log('\nüí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:');
console.log('   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ');
console.log('   - –ó–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–ø–ª–æ–π DLE –≤ –¥—Ä—É–≥–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ');
console.log('   - –ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Ñ–∞–π–ª–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
console.log('   - –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
