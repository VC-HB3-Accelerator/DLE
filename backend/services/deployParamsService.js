/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–µ–ø–ª–æ—è DLE
 * Copyright (c) 2024-2025 –¢–∞—Ä–∞–±–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á
 */

const { Pool } = require('pg');
const logger = require('../utils/logger');
const encryptedDb = require('./encryptedDatabaseService');

class DeployParamsService {
  constructor() {
    this.pool = new Pool({
      user: process.env.DB_USER || 'dapp_user',
      host: process.env.DB_HOST || 'dapp-postgres',
      database: process.env.DB_NAME || 'dapp_db',
      password: process.env.DB_PASSWORD || 'dapp_password',
      port: process.env.DB_PORT || 5432,
    });
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä encryptedDb
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   * @param {string} deploymentId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–µ–ø–ª–æ—è
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è
   * @param {string} status - –°—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è
   * @returns {Promise<Object>} - –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
   */
  async saveDeployParams(deploymentId, params, status = 'pending') {
    try {
      logger.info(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è –≤ –ë–î: ${deploymentId}`);
      
      const dataToSave = {
        deployment_id: deploymentId,
        name: params.name,
        symbol: params.symbol,
        location: params.location,
        coordinates: params.coordinates,
        jurisdiction: params.jurisdiction,
        oktmo: params.oktmo,
        okved_codes: JSON.stringify(params.okvedCodes || []),
        kpp: params.kpp,
        quorum_percentage: params.quorumPercentage,
        initial_partners: JSON.stringify(params.initialPartners || []),
        initial_amounts: JSON.stringify(params.initialAmounts || []),
        supported_chain_ids: JSON.stringify(params.supportedChainIds || []),
        current_chain_id: params.currentChainId,
        logo_uri: params.logoURI,
        private_key: params.privateKey, // –ë—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω
        etherscan_api_key: params.etherscanApiKey,
        auto_verify_after_deploy: params.autoVerifyAfterDeploy || false,
        create2_salt: params.CREATE2_SALT,
        rpc_urls: JSON.stringify(params.rpcUrls ? (Array.isArray(params.rpcUrls) ? params.rpcUrls : Object.values(params.rpcUrls)) : []),
        initializer: params.initializer,
        dle_address: params.dleAddress,
        modules_to_deploy: JSON.stringify(params.modulesToDeploy || []),
        deployment_status: status
      };

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º encryptedDb –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º deployment_id
      const existing = await this.getDeployParams(deploymentId);
      const result = existing 
        ? await encryptedDb.saveData('deploy_params', dataToSave, { deployment_id: deploymentId })
        : await encryptedDb.saveData('deploy_params', dataToSave);
      
      logger.info(`‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î (—Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º): ${deploymentId}`);
      
      return result;
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è: ${error.message}`);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
   * @param {string} deploymentId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–µ–ø–ª–æ—è
   * @returns {Promise<Object|null>} - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è –∏–ª–∏ null
   */
  async getDeployParams(deploymentId) {
    try {
      logger.info(`üìñ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è –∏–∑ –ë–î: ${deploymentId}`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º encryptedDb –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
      const result = await encryptedDb.getData('deploy_params', {
        deployment_id: deploymentId
      });
      
      if (!result || result.length === 0) {
        logger.warn(`‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: ${deploymentId}`);
        return null;
      }

      const params = result[0];
      
      // PostgreSQL –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç JSONB –≤ –æ–±—ä–µ–∫—Ç—ã JavaScript
      return {
        ...params,
        okvedCodes: params.okved_codes || [],
        initialPartners: params.initial_partners || [],
        initialAmounts: params.initial_amounts || [],
        supportedChainIds: params.supported_chain_ids || [],
        rpcUrls: params.rpc_urls || [],
        modulesToDeploy: params.modules_to_deploy || [],
        CREATE2_SALT: params.create2_salt,
        create2_salt: params.create2_salt, // –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        logoURI: params.logo_uri,
        privateKey: params.private_key, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω
        etherscanApiKey: params.etherscan_api_key,
        autoVerifyAfterDeploy: params.auto_verify_after_deploy,
        dleAddress: params.dle_address,
        deploymentStatus: params.deployment_status
      };
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è: ${error.message}`);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è
   * @param {string} deploymentId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–µ–ø–ª–æ—è
   * @param {string} status - –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
   * @param {string} dleAddress - –ê–¥—Ä–µ—Å –∑–∞–¥–µ–ø–ª–æ–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
   * @returns {Promise<Object>} - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
   */
  async updateDeploymentStatus(deploymentId, status, dleAddress = null) {
    try {
      logger.info(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–ª–æ—è: ${deploymentId} -> ${status}`);
      
      const query = `
        UPDATE deploy_params 
        SET deployment_status = $2, dle_address = $3, updated_at = CURRENT_TIMESTAMP
        WHERE deployment_id = $1
        RETURNING *
      `;
      
      const result = await this.pool.query(query, [deploymentId, status, dleAddress]);
      
      if (result.rows.length === 0) {
        throw new Error(`–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: ${deploymentId}`);
      }
      
      logger.info(`‚úÖ –°—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è –æ–±–Ω–æ–≤–ª–µ–Ω: ${deploymentId} -> ${status}`);
      return result.rows[0];
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–ª–æ—è: ${error.message}`);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è
   * @param {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
   * @returns {Promise<Array>} - –°–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è
   */
  async getLatestDeployParams(limit = 10) {
    try {
      logger.info(`üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è (–ª–∏–º–∏—Ç: ${limit})`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º encryptedDb –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
      const result = await encryptedDb.getData('deploy_params', {}, limit, 'created_at DESC');
      
      // PostgreSQL –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç JSONB –≤ –æ–±—ä–µ–∫—Ç—ã JavaScript
      return result.map(row => ({
        ...row,
        okvedCodes: row.okved_codes || [],
        initialPartners: row.initial_partners || [],
        initialAmounts: row.initial_amounts || [],
        supportedChainIds: row.supported_chain_ids || [],
        rpcUrls: row.rpc_urls || [],
        modulesToDeploy: row.modules_to_deploy || [],
        CREATE2_SALT: row.create2_salt,
        create2_salt: row.create2_salt, // –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        logoURI: row.logo_uri,
        privateKey: row.private_key, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω
        etherscanApiKey: row.etherscan_api_key,
        autoVerifyAfterDeploy: row.auto_verify_after_deploy,
        dleAddress: row.dle_address,
        deploymentStatus: row.deployment_status
      }));
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è: ${error.message}`);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è –ø–æ deployment_id (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
   * @param {string} deploymentId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–µ–ø–ª–æ—è
   * @returns {Promise<boolean>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
   */
  async deleteDeployParams(deploymentId) {
    try {
      logger.info(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è: ${deploymentId}`);
      
      const query = 'DELETE FROM deploy_params WHERE deployment_id = $1';
      const result = await this.pool.query(query, [deploymentId]);
      
      const deleted = result.rowCount > 0;
      if (deleted) {
        logger.info(`‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è —É–¥–∞–ª–µ–Ω—ã: ${deploymentId}`);
      } else {
        logger.warn(`‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: ${deploymentId}`);
      }
      
      return deleted;
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è: ${error.message}`);
      throw error;
    }
  }

  /**
   * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
   */
  async close() {
    try {
      await this.pool.end();
      logger.info('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î: ${error.message}`);
    }
  }
}

module.exports = DeployParamsService;
