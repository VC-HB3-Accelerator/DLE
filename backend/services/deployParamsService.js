/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–µ–ø–ª–æ—è DLE
 * Copyright (c) 2024-2025 –¢–∞—Ä–∞–±–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á
 */

const { Pool } = require('pg');
const logger = require('../utils/logger');
const encryptedDb = require('./encryptedDatabaseService');

class DeployParamsService {
  constructor() {
    this.pool = new Pool({
      user: process.env.DB_USER || 'dapp_user',
      host: process.env.DB_HOST || 'dapp-postgres',
      database: process.env.DB_NAME || 'dapp_db',
      password: process.env.DB_PASSWORD || 'dapp_password',
      port: process.env.DB_PORT || 5432,
    });
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä encryptedDb
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   * @param {string} deploymentId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–µ–ø–ª–æ—è
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è
   * @param {string} status - –°—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è
   * @returns {Promise<Object>} - –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
   */
  async saveDeployParams(deploymentId, params, status = 'pending') {
    try {
      logger.info(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è –≤ –ë–î: ${deploymentId}`);
      
      const dataToSave = {
        deployment_id: deploymentId,
        name: params.name,
        symbol: params.symbol,
        location: params.location,
        coordinates: params.coordinates,
        jurisdiction: params.jurisdiction,
        oktmo: params.oktmo,
        okved_codes: JSON.stringify(params.okved_codes || []),
        kpp: params.kpp,
        quorum_percentage: params.quorum_percentage,
        initial_partners: JSON.stringify(params.initial_partners || []),
        // initialAmounts –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, —É–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ 1e18 –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –¥–µ–ø–ª–æ–µ
        initial_amounts: JSON.stringify(params.initial_amounts || []),
        supported_chain_ids: JSON.stringify(params.supported_chain_ids || []),
        current_chain_id: params.current_chain_id || 1, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Ethereum
        logo_uri: params.logo_uri,
        private_key: params.private_key, // –ë—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω
        etherscan_api_key: params.etherscan_api_key,
        auto_verify_after_deploy: params.auto_verify_after_deploy || false,
        create2_salt: params.create2_salt,
        rpc_urls: JSON.stringify(params.rpc_urls ? (Array.isArray(params.rpc_urls) ? params.rpc_urls : Object.values(params.rpc_urls)) : []),
        initializer: params.initializer,
        dle_address: params.dle_address,
        modules_to_deploy: JSON.stringify(params.modules_to_deploy || []),
        deployment_status: status
      };

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º encryptedDb –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º deployment_id
      const existing = await this.getDeployParams(deploymentId);
      const result = existing 
        ? await encryptedDb.saveData('deploy_params', dataToSave, { deployment_id: deploymentId })
        : await encryptedDb.saveData('deploy_params', dataToSave);
      
      logger.info(`‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î (—Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º): ${deploymentId}`);
      
      return result;
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è: ${error.message}`);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
   * @param {string} deploymentId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–µ–ø–ª–æ—è
   * @returns {Promise<Object|null>} - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è –∏–ª–∏ null
   */
  async getDeployParams(deploymentId) {
    try {
      logger.info(`üìñ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è –∏–∑ –ë–î: ${deploymentId}`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º encryptedDb –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
      const result = await encryptedDb.getData('deploy_params', {
        deployment_id: deploymentId
      });
      
      if (!result || result.length === 0) {
        logger.warn(`‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: ${deploymentId}`);
        logger.warn(`üîç –¢–∏–ø deploymentId: ${typeof deploymentId}`);
        logger.warn(`üîç –ó–Ω–∞—á–µ–Ω–∏–µ deploymentId: "${deploymentId}"`);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const allRecords = await encryptedDb.getData('deploy_params', {});
        logger.warn(`üîç –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ deploy_params: ${allRecords?.length || 0}`);
        if (allRecords && allRecords.length > 0) {
          logger.warn(`üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ deployment_id: ${allRecords.map(r => r.deployment_id).slice(-3).join(', ')}`);
        }
        
        return null;
      }

      const params = result[0];
      
      // PostgreSQL –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç JSONB –≤ –æ–±—ä–µ–∫—Ç—ã JavaScript
      return {
        ...params,
        okvedCodes: params.okved_codes || [],
        initialPartners: params.initial_partners || [],
        initialAmounts: params.initial_amounts || [],
        supportedChainIds: params.supported_chain_ids || [],
        rpcUrls: params.rpc_urls || [],
        modulesToDeploy: params.modules_to_deploy || [],
        CREATE2_SALT: params.create2_salt,
        create2_salt: params.create2_salt, // –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        logoURI: params.logo_uri,
        privateKey: params.private_key, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω
        etherscanApiKey: params.etherscan_api_key,
        autoVerifyAfterDeploy: params.auto_verify_after_deploy,
        dleAddress: params.dle_address,
        deploymentStatus: params.deployment_status
      };
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è: ${error.message}`);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è –ø–æ –∞–¥—Ä–µ—Å—É DLE
   * @param {string} dleAddress - –ê–¥—Ä–µ—Å DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
   * @returns {Promise<Object|null>} - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è –∏–ª–∏ null
   */
  async getDeployParamsByDleAddress(dleAddress) {
    try {
      logger.info(`üìñ –ü–æ–∏—Å–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è –ø–æ –∞–¥—Ä–µ—Å—É DLE: ${dleAddress}`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º encryptedDb –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É DLE
      const result = await encryptedDb.getData('deploy_params', {
        dle_address: dleAddress
      });
      
      if (!result || result.length === 0) {
        logger.warn(`‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∞–¥—Ä–µ—Å–∞: ${dleAddress}`);
        return null;
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      return result[0];
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è –ø–æ –∞–¥—Ä–µ—Å—É: ${error.message}`);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è
   * @param {string} deploymentId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–µ–ø–ª–æ—è
   * @param {string} status - –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
   * @param {string} dleAddress - –ê–¥—Ä–µ—Å –∑–∞–¥–µ–ø–ª–æ–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
   * @returns {Promise<Object>} - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
   */
  async updateDeploymentStatus(deploymentId, status, result = null) {
    try {
      logger.info(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–ª–æ—è: ${deploymentId} -> ${status}`);
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      let dleAddress = null;
      let deployResult = null;
      
      if (result) {
        logger.info(`üîç [DEBUG] updateDeploymentStatus –ø–æ–ª—É—á–∏–ª result:`, JSON.stringify(result, null, 2));
        
         // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–µ–ø–ª–æ—è
         if (result.data && result.data.networks && result.data.networks.length > 0) {
           // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
           dleAddress = result.data.networks[0].address;
           logger.info(`‚úÖ [DEBUG] –ù–∞–π–¥–µ–Ω –∞–¥—Ä–µ—Å –≤ result.data.networks[0].address: ${dleAddress}`);
         } else if (result.networks && result.networks.length > 0) {
           // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
           dleAddress = result.networks[0].address;
           logger.info(`‚úÖ [DEBUG] –ù–∞–π–¥–µ–Ω –∞–¥—Ä–µ—Å –≤ result.networks[0].address: ${dleAddress}`);
         } else if (result.output) {
           // –ò—â–µ–º –∞–¥—Ä–µ—Å –≤ —Ç–µ–∫—Å—Ç–µ output - —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ JSON –º–∞—Å—Å–∏–≤ —Å –∞–¥—Ä–µ—Å–∞–º–∏
           const jsonArrayMatch = result.output.match(/\[[\s\S]*?"address":\s*"(0x[a-fA-F0-9]{40})"[\s\S]*?\]/);
           if (jsonArrayMatch) {
             dleAddress = jsonArrayMatch[1];
             logger.info(`‚úÖ [DEBUG] –ù–∞–π–¥–µ–Ω –∞–¥—Ä–µ—Å –≤ JSON –º–∞—Å—Å–∏–≤–µ result.output: ${dleAddress}`);
           } else {
             // Fallback: –∏—â–µ–º –∞–¥—Ä–µ—Å –≤ —Ç–µ–∫—Å—Ç–µ output (—Ñ–æ—Ä–º–∞—Ç: "üìç –ê–¥—Ä–µ—Å: 0x...")
             const addressMatch = result.output.match(/üìç –ê–¥—Ä–µ—Å: (0x[a-fA-F0-9]{40})/);
             if (addressMatch) {
               dleAddress = addressMatch[1];
               logger.info(`‚úÖ [DEBUG] –ù–∞–π–¥–µ–Ω –∞–¥—Ä–µ—Å –≤ —Ç–µ–∫—Å—Ç–µ result.output: ${dleAddress}`);
             }
           }
         } else {
           logger.warn(`‚ö†Ô∏è [DEBUG] –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –¥–µ–ø–ª–æ—è`);
         }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ø–ª–æ—è (–≤–∫–ª—é—á–∞—è –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –≤—Å–µ—Ö —Å–µ—Ç–µ–π)
        deployResult = JSON.stringify(result);
      }
      
      const query = `
        UPDATE deploy_params 
        SET deployment_status = $2, dle_address = $3, deploy_result = $4, updated_at = CURRENT_TIMESTAMP
        WHERE deployment_id = $1
        RETURNING *
      `;
      
      const queryResult = await this.pool.query(query, [deploymentId, status, dleAddress, deployResult]);
      
      if (queryResult.rows.length === 0) {
        throw new Error(`–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: ${deploymentId}`);
      }
      
      logger.info(`‚úÖ –°—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è –æ–±–Ω–æ–≤–ª–µ–Ω: ${deploymentId} -> ${status}`);
      if (dleAddress) {
        logger.info(`üìç –ê–¥—Ä–µ—Å DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ${dleAddress}`);
      }
      return queryResult.rows[0];
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–ª–æ—è: ${error.message}`);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è
   * @param {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
   * @returns {Promise<Array>} - –°–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è
   */
  async getLatestDeployParams(limit = 10) {
    try {
      logger.info(`üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è (–ª–∏–º–∏—Ç: ${limit})`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º encryptedDb –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
      const result = await encryptedDb.getData('deploy_params', {}, limit, 'created_at DESC');
      
      // PostgreSQL –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç JSONB –≤ –æ–±—ä–µ–∫—Ç—ã JavaScript
      return result.map(row => ({
        ...row,
        okvedCodes: row.okved_codes || [],
        initialPartners: row.initial_partners || [],
        initialAmounts: row.initial_amounts || [],
        supportedChainIds: row.supported_chain_ids || [],
        rpcUrls: row.rpc_urls || [],
        modulesToDeploy: row.modules_to_deploy || [],
        CREATE2_SALT: row.create2_salt,
        create2_salt: row.create2_salt, // –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        logoURI: row.logo_uri,
        privateKey: row.private_key, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω
        etherscanApiKey: row.etherscan_api_key,
        autoVerifyAfterDeploy: row.auto_verify_after_deploy,
        dleAddress: row.dle_address,
        deploymentStatus: row.deployment_status
      }));
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è: ${error.message}`);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è –ø–æ deployment_id (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
   * @param {string} deploymentId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–µ–ø–ª–æ—è
   * @returns {Promise<boolean>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
   */
  async deleteDeployParams(deploymentId) {
    try {
      logger.info(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è: ${deploymentId}`);
      
      const query = 'DELETE FROM deploy_params WHERE deployment_id = $1';
      const result = await this.pool.query(query, [deploymentId]);
      
      const deleted = result.rowCount > 0;
      if (deleted) {
        logger.info(`‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è —É–¥–∞–ª–µ–Ω—ã: ${deploymentId}`);
      } else {
        logger.warn(`‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: ${deploymentId}`);
      }
      
      return deleted;
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è: ${error.message}`);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –ø–æ chainId
   */
  async getContractsByChainId(chainId) {
    try {
      console.log(`[DeployParamsService] –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Å current_chain_id: ${chainId}`);
      
      const query = `
        SELECT 
          deployment_id,
          name,
          dle_address,
          current_chain_id,
          supported_chain_ids,
          created_at
        FROM deploy_params 
        WHERE current_chain_id = $1 AND dle_address IS NOT NULL
        ORDER BY created_at DESC
      `;
      
      const result = await this.pool.query(query, [chainId]);
      
      console.log(`[DeployParamsService] –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: ${result.rows.length}`);
      
      return result.rows.map(row => ({
        deploymentId: row.deployment_id,
        name: row.name,
        dleAddress: row.dle_address,
        currentChainId: row.current_chain_id,
        supportedChainIds: row.supported_chain_ids,
        createdAt: row.created_at
      }));
      
    } catch (error) {
      console.error(`[DeployParamsService] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –ø–æ chainId:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–µ–ø–ª–æ–∏
   * @param {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
   * @returns {Promise<Array>} - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–µ–ø–ª–æ–µ–≤
   */
  async getAllDeployments(limit = 50) {
    try {
      logger.info(`üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–ø–ª–æ–µ–≤ (–ª–∏–º–∏—Ç: ${limit})`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º encryptedDb –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
      const result = await encryptedDb.getData('deploy_params', {}, limit, 'created_at DESC');
      
      return result.map(row => {
        // –ü–∞—Ä—Å–∏–º deployResult –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ –≤—Å–µ—Ö —Å–µ—Ç–µ–π
        let deployedNetworks = [];
        console.log(`üîç [DEBUG] Processing deployment ${row.deployment_id}, deploy_result exists:`, !!row.deploy_result);
        console.log(`üîç [DEBUG] deploy_result type:`, typeof row.deploy_result);
        if (row.deploy_result) {
          try {
            const deployResult = typeof row.deploy_result === 'string' 
              ? JSON.parse(row.deploy_result) 
              : row.deploy_result;
            
            console.log(`üîç [DEBUG] deployResult keys:`, Object.keys(deployResult));
            console.log(`üîç [DEBUG] deployResult.output exists:`, !!deployResult.output);
            console.log(`üîç [DEBUG] deployResult.data exists:`, !!deployResult.data);
            console.log(`üîç [DEBUG] deployResult.networks exists:`, !!deployResult.networks);
            if (deployResult.error) {
              console.log(`üîç [DEBUG] deployResult.error:`, deployResult.error);
            }
            
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ç–∏
            const getNetworkName = (chainId) => {
              const networkNames = {
                1: 'Ethereum Mainnet',
                11155111: 'Sepolia',
                17000: 'Holesky',
                421614: 'Arbitrum Sepolia',
                84532: 'Base Sepolia',
                137: 'Polygon',
                56: 'BSC',
                42161: 'Arbitrum One'
              };
              return networkNames[chainId] || `Chain ${chainId}`;
            };

            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ ABI –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Ç–∏
            const loadABIForNetwork = (chainId) => {
              try {
                const fs = require('fs');
                const path = require('path');
                const abiPath = path.join(__dirname, '../../../frontend/src/utils/dle-abi.js');
                
                if (fs.existsSync(abiPath)) {
                  const abiContent = fs.readFileSync(abiPath, 'utf8');
                  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
                  const abiMatch = abiContent.match(/export const DLE_ABI = (\[[\s\S]*?\]);/);
                  if (abiMatch) {
                    // –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å JSON, –∑–∞–º–µ–Ω–∏–≤ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                    let abiText = abiMatch[1];
                    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–ø—è—Ç—ã–µ –≤ –∫–æ–Ω—Ü–µ
                    abiText = abiText.replace(/,(\s*[}\]])/g, '$1');
                    try {
                      return JSON.parse(abiText);
                    } catch (parseError) {
                      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ABI JSON –¥–ª—è —Å–µ—Ç–∏ ${chainId}:`, parseError.message);
                      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–∞–∫ fallback
                      return [];
                    }
                  }
                }
              } catch (abiError) {
                console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ABI –¥–ª—è —Å–µ—Ç–∏ ${chainId}:`, abiError.message);
              }
              return null;
            };
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–µ–ø–ª–æ—è
            if (deployResult.data && deployResult.data.networks) {
              deployedNetworks = deployResult.data.networks.map(network => ({
                chainId: network.chainId,
                address: network.address,
                networkName: network.networkName || getNetworkName(network.chainId),
                abi: loadABIForNetwork(network.chainId) // ABI –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
              }));
            } else if (deployResult.networks) {
              deployedNetworks = deployResult.networks.map(network => ({
                chainId: network.chainId,
                address: network.address,
                networkName: network.networkName || getNetworkName(network.chainId),
                abi: loadABIForNetwork(network.chainId) // ABI –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
              }));
            } else if (deployResult.output) {
              console.log(`üîç [DEBUG] Processing deployResult.output`);
              // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ output
              const output = deployResult.output;
              const addressMatches = output.match(/üìç –ê–¥—Ä–µ—Å: (0x[a-fA-F0-9]{40})/g);
              const chainIdMatches = output.match(/chainId: (\d+)/g);
              
              // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º —Å–µ—Ç–µ–π
              const networkMatches = output.match(/üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ —Å–µ—Ç–∏ (\w+) \(chainId: (\d+)\)/g);
              
              console.log(`üîç [DEBUG] addressMatches:`, addressMatches);
              console.log(`üîç [DEBUG] chainIdMatches:`, chainIdMatches);
              console.log(`üîç [DEBUG] networkMatches:`, networkMatches);
              
              if (networkMatches && networkMatches.length > 0) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º networkMatches –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
                deployedNetworks = networkMatches.map((match) => {
                  const [, networkName, chainIdStr] = match.match(/üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ —Å–µ—Ç–∏ (\w+) \(chainId: (\d+)\)/);
                  const chainId = parseInt(chainIdStr);
                  
                  // –ò—â–µ–º –∞–¥—Ä–µ—Å –¥–ª—è —ç—Ç–æ–π —Å–µ—Ç–∏ –≤ output
                  const addressRegex = new RegExp(`üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ —Å–µ—Ç–∏ ${networkName} \\(chainId: ${chainId}\\)\\nüìç –ê–¥—Ä–µ—Å: (0x[a-fA-F0-9]{40})`);
                  const addressMatch = output.match(addressRegex);
                  const address = addressMatch ? addressMatch[1] : '0x0000000000000000000000000000000000000000';
                  
                  return {
                    chainId: chainId,
                    address: address,
                    networkName: getNetworkName(chainId),
                    abi: loadABIForNetwork(chainId)
                  };
                });
                console.log(`üîç [DEBUG] deployedNetworks created from networkMatches:`, deployedNetworks);
              } else if (addressMatches && chainIdMatches) {
                deployedNetworks = addressMatches.map((match, index) => {
                  const address = match.match(/üìç –ê–¥—Ä–µ—Å: (0x[a-fA-F0-9]{40})/)[1];
                  const chainId = chainIdMatches[index] ? parseInt(chainIdMatches[index].match(/chainId: (\d+)/)[1]) : null;
                  
                  return {
                    chainId: chainId,
                    address: address,
                    networkName: chainId ? getNetworkName(chainId) : `Network ${index + 1}`,
                    abi: loadABIForNetwork(chainId) // ABI –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
                  };
                });
                console.log(`üîç [DEBUG] deployedNetworks created:`, deployedNetworks);
              } else {
                console.log(`üîç [DEBUG] No matches found - addressMatches:`, !!addressMatches, 'chainIdMatches:', !!chainIdMatches);
              }
            }
          } catch (error) {
            logger.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ deployResult –¥–ª—è ${row.deployment_id}: ${error.message}`);
          }
        }
        
        return {
          deploymentId: row.deployment_id,
          name: row.name,
          symbol: row.symbol,
          location: row.location,
          coordinates: row.coordinates,
          jurisdiction: row.jurisdiction,
          oktmo: row.oktmo,
          okvedCodes: row.okved_codes || [],
          kpp: row.kpp,
          quorumPercentage: row.quorum_percentage,
          initialPartners: row.initial_partners || [],
          initialAmounts: row.initial_amounts || [],
          supportedChainIds: row.supported_chain_ids || [],
          currentChainId: row.current_chain_id,
          logoURI: row.logo_uri,
          etherscanApiKey: row.etherscan_api_key,
          autoVerifyAfterDeploy: row.auto_verify_after_deploy,
          create2Salt: row.create2_salt,
          rpcUrls: row.rpc_urls || [],
          initializer: row.initializer,
          dleAddress: row.dle_address,
          modulesToDeploy: row.modules_to_deploy || [],
          deploymentStatus: row.deployment_status,
          deployResult: row.deploy_result,
          deployedNetworks: deployedNetworks, // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å–∞ –≤—Å–µ—Ö —Å–µ—Ç–µ–π
          createdAt: row.created_at,
          updatedAt: row.updated_at
        };
      });
      
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –¥–µ–ø–ª–æ–µ–≤: ${error.message}`);
      throw error;
    }
  }

  /**
   * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
   */
  async close() {
    try {
      await this.pool.end();
      logger.info('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î: ${error.message}`);
    }
  }
}

module.exports = DeployParamsService;
