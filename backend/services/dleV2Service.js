/**
 * Copyright (c) 2024-2025 –¢–∞—Ä–∞–±–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á
 * All rights reserved.
 * 
 * This software is proprietary and confidential.
 * Unauthorized copying, modification, or distribution is prohibited.
 * 
 * For licensing inquiries: info@hb3-accelerator.com
 * Website: https://hb3-accelerator.com
 * GitHub: https://github.com/HB3-ACCELERATOR
 */

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');
const { ethers } = require('ethers');
const logger = require('../utils/logger');
const { getRpcUrlByChainId } = require('./rpcProviderService');
const deploymentTracker = require('../utils/deploymentTracker');
const etherscanV2 = require('./etherscanV2VerificationService');
const DeployParamsService = require('./deployParamsService');
const verificationStore = require('./verificationStore');

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è DLE v2 (Digital Legal Entity)
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å –µ–¥–∏–Ω—ã–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º –∏ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 */
class DLEV2Service {
  constructor() {
    this.deployParamsService = new DeployParamsService();
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ DLE v2 —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
   * @param {Object} dleParams - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã DLE
   * @param {string} deploymentId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–µ–ø–ª–æ—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è DLE
   */
  async createDLE(dleParams, deploymentId = null) {
    console.log("üî• [DLEV2-SERVICE] –§–£–ù–ö–¶–ò–Ø createDLE –í–´–ó–í–ê–ù–ê!");
    logger.info("üöÄ –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è DLE v2 —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:", dleParams);
    
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º deploymentId –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
      if (!deploymentId) {
        deploymentId = `deploy_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;
      }
      
      console.log(`üÜî Deployment ID: ${deploymentId}`);
      logger.info(`üÜî Deployment ID: ${deploymentId}`);
      
      // WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
      if (deploymentId) {
        deploymentTracker.updateProgress(deploymentId, '–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤', 5, '–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      this.validateDLEParams(dleParams);

      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –¥–µ–ø–ª–æ—è
      console.log('üîß –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–µ–ø–ª–æ—è...');
      logger.info('üîß –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–µ–ø–ª–æ—è...');
      
      // –û—Ç–ª–∞–¥–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      console.log('üîç –û–¢–õ–ê–î–ö–ê - –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:');
      console.log('   supportedChainIds:', JSON.stringify(dleParams.supportedChainIds, null, 2));
      console.log('   privateKey:', dleParams.privateKey ? '[–ï–°–¢–¨]' : '[–ù–ï–¢]');
      console.log('   name:', dleParams.name);
      
      const deployParams = this.prepareDeployParams(dleParams);
      console.log('‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã:', JSON.stringify(deployParams, null, 2));
      logger.info('‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã:', JSON.stringify(deployParams, null, 2));
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      logger.info(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è –≤ –ë–î: ${deploymentId}`);
      await this.deployParamsService.saveDeployParams(deploymentId, deployParams, 'pending');

      // –í—ã—á–∏—Å–ª—è–µ–º –∞–¥—Ä–µ—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
      try {
        const normalizedPk = dleParams.privateKey?.startsWith('0x') ? dleParams.privateKey : `0x${dleParams.privateKey}`;
        const initializerAddress = new ethers.Wallet(normalizedPk).address;
        deployParams.initializerAddress = initializerAddress;
      } catch (e) {
        logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å initializerAddress –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞:', e.message);
      }

      // WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è CREATE2_SALT
      if (deploymentId) {
        deploymentTracker.updateProgress(deploymentId, '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è CREATE2 SALT', 10, '–°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π CREATE2_SALT
      const { createAndStoreNewCreate2Salt } = require('./secretStore');
      const { salt: create2Salt, key: saltKey } = await createAndStoreNewCreate2Salt({ label: deployParams.name || 'DLEv2' });
      logger.info(`CREATE2_SALT —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: key=${saltKey}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å CREATE2_SALT
      console.log('üíæ –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å CREATE2_SALT...');
      logger.info('üíæ –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å CREATE2_SALT...');
      
      const updatedParams = {
        ...deployParams,
        CREATE2_SALT: create2Salt
      };
      
      await this.deployParamsService.saveDeployParams(deploymentId, updatedParams, 'in_progress');
      logger.info(`‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –ë–î —Å CREATE2_SALT: ${create2Salt}`);
      
      // WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –ø–æ–∏—Å–∫ RPC URLs
      if (deploymentId) {
        deploymentTracker.updateProgress(deploymentId, '–ü–æ–∏—Å–∫ RPC endpoints', 15, '–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–ª–æ–∫—á–µ–π–Ω —Å–µ—Ç—è–º');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º RPC URLs –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ç–µ–π
      console.log('üåê –ü–æ–ª—É—á–∞–µ–º RPC URLs –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ç–µ–π...');
      logger.info('üåê –ü–æ–ª—É—á–∞–µ–º RPC URLs –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ç–µ–π...');
      const rpcUrls = {};
      for (const chainId of deployParams.supportedChainIds) {
        try {
          const rpcUrl = await getRpcUrlByChainId(chainId);
          if (rpcUrl) {
            rpcUrls[chainId] = rpcUrl;
            console.log(`‚úÖ RPC URL –¥–ª—è —Å–µ—Ç–∏ ${chainId}: ${rpcUrl}`);
            logger.info(`‚úÖ RPC URL –¥–ª—è —Å–µ—Ç–∏ ${chainId}: ${rpcUrl}`);
          } else {
            console.log(`‚ùå RPC URL –¥–ª—è —Å–µ—Ç–∏ ${chainId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            logger.warn(`‚ùå RPC URL –¥–ª—è —Å–µ—Ç–∏ ${chainId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          }
        } catch (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ RPC URL –¥–ª—è —Å–µ—Ç–∏ ${chainId}: ${error.message}`);
          logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ RPC URL –¥–ª—è —Å–µ—Ç–∏ ${chainId}: ${error.message}`);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ç–µ–π
      if (deploymentId) {
        deploymentTracker.updateProgress(deploymentId, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞', 20, '–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –¥–µ–ø–ª–æ—è');
      }

      console.log('üí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –¥–µ–ø–ª–æ—è...');
      logger.info('üí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –¥–µ–ø–ª–æ—è...');
      
        if (dleParams.privateKey) {
        try {
          await this.checkBalances(deployParams.supportedChainIds, dleParams.privateKey);
          console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –¥–ª—è –¥–µ–ø–ª–æ—è!`);
        } catch (balanceError) {
          logger.error(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${balanceError.message}`);
          throw balanceError;
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å RPC URLs –∏ initializer
      const finalParams = {
        ...updatedParams,
        rpcUrls: rpcUrls, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –æ–±—ä–µ–∫—Ç {chainId: url}
        rpc_urls: Object.values(rpcUrls), // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –º–∞—Å—Å–∏–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        initializer: dleParams.privateKey ? new ethers.Wallet(dleParams.privateKey.startsWith('0x') ? dleParams.privateKey : `0x${dleParams.privateKey}`).address : "0x0000000000000000000000000000000000000000"
      };
      
      await this.deployParamsService.saveDeployParams(deploymentId, finalParams, 'in_progress');
      logger.info(`‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –ë–î —Å RPC URLs –∏ initializer`);

      if (!dleParams.privateKey) {
        throw new Error('–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω');
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á Etherscan V2 –ü–ï–†–ï–î –¥–µ–ø–ª–æ–µ–º
      logger.info(`üîë Etherscan API Key –ø–æ–ª—É—á–µ–Ω: ${dleParams.etherscanApiKey ? '[–ï–°–¢–¨]' : '[–ù–ï–¢]'}`);
      try {
        if (dleParams.etherscanApiKey) {
          logger.info('üîë –°–æ—Ö—Ä–∞–Ω—è–µ–º Etherscan API Key –≤ secretStore...');
          const { setSecret } = require('./secretStore');
          await setSecret('ETHERSCAN_V2_API_KEY', dleParams.etherscanApiKey);
          logger.info('üîë Etherscan API Key —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
            } else {
          logger.warn('üîë Etherscan API Key –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ');
        }
      } catch (e) {
        logger.error('üîë –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ Etherscan API Key:', e.message);
      }

      // WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–µ–ø–ª–æ—é
      if (deploymentId) {
        deploymentTracker.updateProgress(deploymentId, '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–µ–ø–ª–æ—é', 25, '–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–µ–ø–ª–æ—è');
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç
      console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –º—É–ª—å—Ç–∏—Å–µ—Ç–µ–≤–æ–π –¥–µ–ø–ª–æ–π...');
      logger.info('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –º—É–ª—å—Ç–∏—Å–µ—Ç–µ–≤–æ–π –¥–µ–ø–ª–æ–π...');
      
      if (deploymentId) {
        deploymentTracker.updateProgress(deploymentId, '–î–µ–ø–ª–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤', 30, '–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º DLE –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ —Å–µ—Ç—è—Ö');
      }

      const deployResult = await this.runDeployMultichain(deploymentId);

      if (deploymentId) {
        deploymentTracker.updateProgress(deploymentId, '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞', 80, '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ø–ª–æ—è');
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ø–ª–æ—è
      const result = this.extractDeployResult(deployResult.stdout, deployParams);
      
      if (!result || !result.success) {
        throw new Error('–î–µ–ø–ª–æ–π –Ω–µ —É–¥–∞–ª—Å—è: ' + (result?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ DLE
        const dleData = {
        ...result.data,
        deploymentId: deploymentId,
        createdAt: new Date().toISOString(),
        status: 'active'
      };

      this.saveDLEData(dleData);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      if (deploymentId && result.data.dleAddress) {
        await this.deployParamsService.updateDeploymentStatus(deploymentId, 'completed', result.data.dleAddress);
        logger.info(`‚úÖ –°—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î: ${deploymentId} -> completed`);
      }
          
        // WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
        if (deploymentId) {
          deploymentTracker.updateProgress(deploymentId, '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ', 100, '–î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
          deploymentTracker.addLog(deploymentId, `üéâ DLE ${result.data.name} (${result.data.symbol}) —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`, 'success');
          deploymentTracker.addLog(deploymentId, `üìä –ü–∞—Ä—Ç–Ω–µ—Ä–æ–≤: ${result.data.partnerBalances?.length || 0}`, 'info');
          deploymentTracker.addLog(deploymentId, `üí∞ –û–±—â–∏–π supply: ${result.data.totalSupply || 'N/A'}`, 'info');
        }
          
      const finalResult = {
            success: true,
            data: dleData
          };

      if (deploymentId) {
        deploymentTracker.completeDeployment(deploymentId, finalResult);
      }

      return finalResult;

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ DLE v2:', error);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (deploymentId) {
        try {
          await this.deployParamsService.updateDeploymentStatus(deploymentId, 'failed');
          logger.info(`‚ùå –°—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î: ${deploymentId} -> failed`);
        } catch (dbError) {
          logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–ª–æ—è –≤ –ë–î: ${dbError.message}`);
        }
      }
      
      // WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π
      if (deploymentId) {
        deploymentTracker.failDeployment(deploymentId, error);
      }
      
      throw error;
    }
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã DLE
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  validateDLEParams(params) {
    const required = ['name', 'symbol', 'location', 'jurisdiction', 'quorumPercentage'];
    const missing = required.filter(field => !params[field]);

    if (missing.length > 0) {
      throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missing.join(', ')}`);
    }

    if (params.quorumPercentage < 1 || params.quorumPercentage > 100) {
      throw new Error('–ö–≤–æ—Ä—É–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤');
    }

    if (!params.initialPartners || params.initialPartners.length === 0) {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞');
    }

    if (!params.initialAmounts || params.initialAmounts.length === 0) {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤');
    }

    if (params.initialPartners.length !== params.initialAmounts.length) {
      throw new Error('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—É–º–º');
    }

    if (!params.supportedChainIds || params.supportedChainIds.length === 0) {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ç–∏');
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ DLE –≤ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
   * @param {Object} dleData - –î–∞–Ω–Ω—ã–µ DLE –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
   */
  saveDLEData(dleData) {
    try {
      const dlesDir = path.join(__dirname, '../contracts-data/dles');
      
      if (!fs.existsSync(dlesDir)) {
        fs.mkdirSync(dlesDir, { recursive: true });
      }

      const filename = `${dleData.name}_${dleData.symbol}_${Date.now()}.json`;
      const filepath = path.join(dlesDir, filename);
      
      fs.writeFileSync(filepath, JSON.stringify(dleData, null, 2));
      logger.info(`‚úÖ –î–∞–Ω–Ω—ã–µ DLE —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${filepath}`);
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö DLE:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–µ–ø–ª–æ—è
   * @param {Object} params - –ò—Å—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
   * @returns {Object} - –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
   */
  prepareDeployParams(params) {
    return {
      name: params.name,
      symbol: params.symbol,
      location: params.location,
      coordinates: params.coordinates,
      jurisdiction: params.jurisdiction,
      oktmo: params.oktmo,
      okvedCodes: params.okvedCodes || [],
      kpp: params.kpp,
      quorumPercentage: params.quorumPercentage,
      initialPartners: params.initialPartners,
      initialAmounts: params.initialAmounts,
      supportedChainIds: params.supportedChainIds,
      currentChainId: params.currentChainId || params.supportedChainIds[0],
      logoURI: params.logoURI,
      privateKey: params.privateKey,
      etherscanApiKey: params.etherscanApiKey,
      autoVerifyAfterDeploy: params.autoVerifyAfterDeploy !== undefined ? params.autoVerifyAfterDeploy : true
    };
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –º—É–ª—å—Ç–∏—Å–µ—Ç–µ–≤–æ–π –¥–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç
   * @param {string} deploymentId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–µ–ø–ª–æ—è
   * @param {Object} opts - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
   * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
   */
  async runDeployMultichain(deploymentId, opts = {}) {
    return new Promise((resolve, reject) => {
      const scriptPath = path.join(__dirname, '../scripts/deploy/deploy-multichain.js');
      const args = [];
      
      console.log(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è: ${scriptPath}`);
      logger.info(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è: ${scriptPath}`);
      
      const child = spawn('npx', ['hardhat', 'run', scriptPath], {
        cwd: path.join(__dirname, '..'),
        env: {
          ...process.env,
          DEPLOYMENT_ID: deploymentId, // –ü–µ—Ä–µ–¥–∞–µ–º deploymentId –≤ —Å–∫—Ä–∏–ø—Ç
          ...opts.env
        },
        stdio: ['pipe', 'pipe', 'pipe']
      });

      let stdout = '';
      let stderr = '';

      child.stdout.on('data', (data) => {
        const output = data.toString();
        stdout += output;
        console.log(output);
        
        // –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏ —á–µ—Ä–µ–∑ WebSocket –∑–¥–µ—Å—å - –æ–Ω–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ —Å–∫—Ä–∏–ø—Ç–µ –¥–µ–ø–ª–æ—è
        // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤
      });

      child.stderr.on('data', (data) => {
        const output = data.toString();
        stderr += output;
        console.error(output);
        
        // –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ —á–µ—Ä–µ–∑ WebSocket –∑–¥–µ—Å—å - –æ–Ω–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ —Å–∫—Ä–∏–ø—Ç–µ –¥–µ–ø–ª–æ—è
        // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤
      });

      child.on('close', (code) => {
          if (code === 0) {
          resolve({ stdout, stderr, code });
          } else {
          reject(new Error(`–°–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}: ${stderr}`));
        }
      });

      child.on('error', (error) => {
        reject(new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–µ–ø–ª–æ—è: ${error.message}`));
      });
    });
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ø–ª–æ—è –∏–∑ –≤—ã–≤–æ–¥–∞ —Å–∫—Ä–∏–ø—Ç–∞
   * @param {string} stdout - –í—ã–≤–æ–¥ —Å–∫—Ä–∏–ø—Ç–∞
   * @returns {Object|null} - –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ø–ª–æ—è
   */
  extractDeployResult(stdout, deployParams = null) {
    // –ò—â–µ–º MULTICHAIN_DEPLOY_RESULT –≤ –≤—ã–≤–æ–¥–µ
    const resultMatch = stdout.match(/MULTICHAIN_DEPLOY_RESULT\s+(.+)/);
    
    if (resultMatch) {
      try {
        const deployResults = JSON.parse(resultMatch[1]);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –¥–µ–ø–ª–æ–∏
        const successfulDeploys = deployResults.filter(r => r.address && r.address !== '0x0000000000000000000000000000000000000000');
        
        if (successfulDeploys.length > 0) {
          return {
            success: true,
            data: {
              deployedNetworks: deployResults,
              dleAddress: successfulDeploys[0].address, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π –∞–¥—Ä–µ—Å
              totalNetworks: deployResults.length,
              successfulNetworks: successfulDeploys.length,
              // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è
              name: deployParams?.name || 'Unknown',
              symbol: deployParams?.symbol || 'UNK',
              location: deployParams?.location || '–ù–µ —É–∫–∞–∑–∞–Ω',
              coordinates: deployParams?.coordinates || '0,0',
              jurisdiction: deployParams?.jurisdiction || 0,
              quorumPercentage: deployParams?.quorumPercentage || 51,
              logoURI: deployParams?.logoURI || '/uploads/logos/default-token.svg'
            }
          };
        }
      } catch (e) {
        logger.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', e);
      }
    }

    return null;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   * @param {string} deploymentId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–µ–ø–ª–æ—è
   * @returns {Promise<Object|null>} - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è –∏–ª–∏ null
   */
  async getDeployParams(deploymentId) {
    try {
      logger.info(`üìñ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è –∏–∑ –ë–î: ${deploymentId}`);
      return await this.deployParamsService.getDeployParams(deploymentId);
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è: ${error.message}`);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è
   * @param {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
   * @returns {Promise<Array>} - –°–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è
   */
  async getLatestDeployParams(limit = 10) {
    try {
      logger.info(`üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è (–ª–∏–º–∏—Ç: ${limit})`);
      return await this.deployParamsService.getLatestDeployParams(limit);
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è: ${error.message}`);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö DLE v2
   * @returns {Array<Object>} - –°–ø–∏—Å–æ–∫ DLE v2
   */
  getAllDLEs() {
    try {
      const dlesDir = path.join(__dirname, '../contracts-data/dles');
      
      if (!fs.existsSync(dlesDir)) {
        return [];
      }
      
      const files = fs.readdirSync(dlesDir);
      const dles = [];

      for (const file of files) {
        if (file.endsWith('.json')) {
          try {
            const filepath = path.join(dlesDir, file);
            const content = fs.readFileSync(filepath, 'utf8');
            const dleData = JSON.parse(content);
            dles.push(dleData);
          } catch (error) {
            logger.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${file}:`, error.message);
          }
        }
      }

      return dles.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ DLE:', error);
      return [];
    }
  }

  /**
   * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç DLE –ø–æ –º—É–ª—å—Ç–∏—Å–µ—Ç–µ–≤—ã–º –¥–µ–ø–ª–æ—è–º
   * @param {Array} allDles - –í—Å–µ DLE
   * @returns {Array} - –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ DLE
   */
  groupMultichainDLEs(allDles) {
    const groups = new Map();
    
    for (const dle of allDles) {
      const groupKey = this.createGroupKey(dle);
      
      if (!groups.has(groupKey)) {
        groups.set(groupKey, {
          name: dle.name,
          symbol: dle.symbol,
          location: dle.location,
          jurisdiction: dle.jurisdiction,
          createdAt: dle.createdAt,
          deploymentId: dle.deploymentId,
          networks: [],
          totalSupply: dle.totalSupply,
          partnerCount: dle.partnerBalances?.length || 0
        });
      }

      groups.get(groupKey).networks.push({
          chainId: dle.chainId,
        address: dle.address,
        networkName: this.getRpcUrlForChain(dle.chainId)?.name || `Chain ${dle.chainId}`,
        status: dle.status || 'active'
      });
    }

    return Array.from(groups.values());
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ DLE
   * @param {Object} dle - –î–∞–Ω–Ω—ã–µ DLE
   * @returns {string} - –ö–ª—é—á –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
   */
  createGroupKey(dle) {
    return `${dle.name}_${dle.symbol}_${dle.jurisdiction}_${dle.location}`;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç RPC URL –¥–ª—è —Å–µ—Ç–∏
   * @param {number} chainId - ID —Å–µ—Ç–∏
   * @returns {Object|null} - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ RPC
   */
  getRpcUrlForChain(chainId) {
    const rpcMappings = {
      1: { name: 'Ethereum Mainnet', url: 'https://mainnet.infura.io/v3/' },
      11155111: { name: 'Sepolia Testnet', url: 'https://sepolia.infura.io/v3/' },
      17000: { name: 'Holesky Testnet', url: 'https://holesky.infura.io/v3/' },
      421614: { name: 'Arbitrum Sepolia', url: 'https://sepolia-rollup.arbitrum.io/rpc' },
      84532: { name: 'Base Sepolia', url: 'https://sepolia.base.org' }
    };

    return rpcMappings[chainId] || null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å –¥–ª—è –¥–µ–ø–ª–æ—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–µ—Ç—è—Ö
   * @param {Array<number>} chainIds - –°–ø–∏—Å–æ–∫ ID —Å–µ—Ç–µ–π
   * @param {string} privateKey - –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
   * @returns {Promise<void>}
   */
  async checkBalances(chainIds, privateKey) {
    const wallet = new ethers.Wallet(privateKey);
    const minBalance = ethers.parseEther('0.01'); // –ú–∏–Ω–∏–º—É–º 0.01 ETH

    for (const chainId of chainIds) {
      try {
        const rpcUrl = await getRpcUrlByChainId(chainId);
        if (!rpcUrl) {
          throw new Error(`RPC URL –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–µ—Ç–∏ ${chainId}`);
        }

        const provider = new ethers.JsonRpcProvider(rpcUrl);
        const balance = await provider.getBalance(wallet.address);
        
        console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –≤ —Å–µ—Ç–∏ ${chainId}: ${ethers.formatEther(balance)} ETH`);
        
        if (balance < minBalance) {
          throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ —Å–µ—Ç–∏ ${chainId}: ${ethers.formatEther(balance)} ETH (–º–∏–Ω–∏–º—É–º: ${ethers.formatEther(minBalance)} ETH)`);
        }
      } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ –≤ —Å–µ—Ç–∏ ${chainId}:`, error.message);
        throw error;
      }
    }
  }
}

module.exports = DLEV2Service;