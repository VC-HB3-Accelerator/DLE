/**
 * Copyright (c) 2024-2025 –¢–∞—Ä–∞–±–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á
 * All rights reserved.
 * 
 * This software is proprietary and confidential.
 * Unauthorized copying, modification, or distribution is prohibited.
 * 
 * For licensing inquiries: info@hb3-accelerator.com
 * Website: https://hb3-accelerator.com
 * GitHub: https://github.com/HB3-ACCELERATOR
 */

const axios = require('axios');
const logger = require('../utils/logger');

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Ollama –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ollama –∏ –ø—Ä–æ–≥—Ä–µ–≤–∞ –º–æ–¥–µ–ª–µ–π
 */

const OLLAMA_HOST = process.env.OLLAMA_HOST || 'http://ollama:11434';
const MAX_RETRIES = 30;
const RETRY_DELAY = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama
 * @returns {Promise<boolean>}
 */
async function checkOllamaHealth() {
  try {
    const response = await axios.get(`${OLLAMA_HOST}/api/tags`, {
      timeout: 5000
    });
    
    return response.status === 200;
  } catch (error) {
    return false;
  }
}

/**
 * –î–æ–∂–¥–∞—Ç—å—Å—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Ollama —Å retry
 * @returns {Promise<boolean>}
 */
async function waitForOllama() {
  logger.info('[NotifyOllamaReady] –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Ollama...');
  
  for (let i = 0; i < MAX_RETRIES; i++) {
    const isReady = await checkOllamaHealth();
    
    if (isReady) {
      logger.info(`[NotifyOllamaReady] ‚úÖ Ollama –≥–æ—Ç–æ–≤! (–ø–æ–ø—ã—Ç–∫–∞ ${i + 1}/${MAX_RETRIES})`);
      return true;
    }
    
    logger.info(`[NotifyOllamaReady] Ollama –Ω–µ –≥–æ—Ç–æ–≤, –ø–æ–≤—Ç–æ—Ä ${i + 1}/${MAX_RETRIES}...`);
    await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
  }
  
  logger.error('[NotifyOllamaReady] ‚ùå Ollama –Ω–µ —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫');
  return false;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
 * @returns {Promise<Array>}
 */
async function getAvailableModels() {
  try {
    const response = await axios.get(`${OLLAMA_HOST}/api/tags`, {
      timeout: 5000
    });
    
    return response.data.models || [];
  } catch (error) {
    logger.error('[NotifyOllamaReady] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π:', error.message);
    return [];
  }
}

/**
 * –ü—Ä–æ–≥—Ä–µ—Ç—å –º–æ–¥–µ–ª—å (–∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ –ø–∞–º—è—Ç—å)
 * @param {string} modelName - –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
 * @returns {Promise<boolean>}
 */
async function warmupModel(modelName) {
  try {
    logger.info(`[NotifyOllamaReady] –ü—Ä–æ–≥—Ä–µ–≤ –º–æ–¥–µ–ª–∏: ${modelName}`);
    
    const response = await axios.post(`${OLLAMA_HOST}/api/generate`, {
      model: modelName,
      prompt: 'Hello',
      stream: false
    }, {
      timeout: 30000
    });
    
    if (response.status === 200) {
      logger.info(`[NotifyOllamaReady] ‚úÖ –ú–æ–¥–µ–ª—å ${modelName} –ø—Ä–æ–≥—Ä–µ—Ç–∞`);
      return true;
    }
    
    return false;
  } catch (error) {
    logger.error(`[NotifyOllamaReady] –û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ –º–æ–¥–µ–ª–∏ ${modelName}:`, error.message);
    return false;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
 */
async function initialize() {
  try {
    logger.info('[NotifyOllamaReady] üöÄ –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Ollama...');
    
    // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Ollama
    const isReady = await waitForOllama();
    
    if (!isReady) {
      logger.error('[NotifyOllamaReady] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Ollama');
      return false;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
    const models = await getAvailableModels();
    logger.info(`[NotifyOllamaReady] –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: ${models.length}`);
    
    if (models.length > 0) {
      logger.info('[NotifyOllamaReady] –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:', models.map(m => m.name).join(', '));
      
      // –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º –ø–µ—Ä–≤—É—é –º–æ–¥–µ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      if (process.env.WARMUP_MODEL === 'true' && models[0]) {
        await warmupModel(models[0].name);
      }
    }
    
    logger.info('[NotifyOllamaReady] ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    return true;
    
  } catch (error) {
    logger.error('[NotifyOllamaReady] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    return false;
  }
}

// –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  initialize()
    .then(success => {
      process.exit(success ? 0 : 1);
    })
    .catch(error => {
      logger.error('[NotifyOllamaReady] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = {
  initialize,
  waitForOllama,
  checkOllamaHealth,
  getAvailableModels,
  warmupModel
};

