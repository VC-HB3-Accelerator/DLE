/**
 * Copyright (c) 2024-2025 –¢–∞—Ä–∞–±–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á
 * All rights reserved.
 * 
 * This software is proprietary and confidential.
 * Unauthorized copying, modification, or distribution is prohibited.
 * 
 * For licensing inquiries: info@hb3-accelerator.com
 * Website: https://hb3-accelerator.com
 * GitHub: https://github.com/HB3-ACCELERATOR
 */

const logger = require('../utils/logger');
const TelegramBot = require('./telegramBot');
const EmailBot = require('./emailBot');
const unifiedMessageProcessor = require('./unifiedMessageProcessor');

/**
 * BotManager - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤—Å–µ—Ö –±–æ—Ç–æ–≤
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –±–æ—Ç–æ–≤ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞)
 */
class BotManager {
  constructor() {
    this.bots = new Map();
    this.isInitialized = false;
    this.processingQueue = [];
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤
   */
  async initialize() {
    try {
      logger.info('[BotManager] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BotManager...');

      // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–æ–≤
      const webBot = {
        name: 'WebBot',
        channel: 'web',
        isInitialized: true,
        status: 'active',
        initialize: async () => ({ success: true }),
        processMessage: async (messageData) => {
          return await unifiedMessageProcessor.processMessage(messageData);
        }
      };

      const telegramBot = new TelegramBot();
      const emailBot = new EmailBot();

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–æ—Ç–æ–≤
      this.bots.set('web', webBot);
      this.bots.set('telegram', telegramBot);
      this.bots.set('email', emailBot);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram Bot
      logger.info('[BotManager] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot...');
      await telegramBot.initialize().catch(error => {
        logger.warn('[BotManager] Telegram Bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', error.message);
      });

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Email Bot
      logger.info('[BotManager] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Email Bot...');
      await emailBot.initialize().catch(error => {
        logger.warn('[BotManager] Email Bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', error.message);
      });

      this.isInitialized = true;
      logger.info('[BotManager] ‚úÖ BotManager —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

      return { success: true };
    } catch (error) {
      logger.error('[BotManager] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BotManager:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –±–æ—Ç–∞ –ø–æ –∏–º–µ–Ω–∏
   * @param {string} botName - –ò–º—è –±–æ—Ç–∞ (web, telegram, email)
   * @returns {Object|null} –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏–ª–∏ null
   */
  getBot(botName) {
    return this.bots.get(botName) || null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å BotManager
   * @returns {boolean}
   */
  isReady() {
    return this.isInitialized;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –±–æ—Ç–æ–≤
   * @returns {Object}
   */
  getStatus() {
    const status = {};
    
    for (const [name, bot] of this.bots) {
      status[name] = {
        initialized: bot.isInitialized || false,
        status: bot.status || 'unknown'
      };
    }
    
    return status;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –±–æ—Ç
   * @param {Object} messageData - –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {Promise<Object>}
   */
  async processMessage(messageData) {
    try {
      const channel = messageData.channel || 'web';
      const bot = this.bots.get(channel);

      if (!bot) {
        throw new Error(`Bot for channel "${channel}" not found`);
      }

      if (!bot.isInitialized) {
        throw new Error(`Bot "${channel}" is not initialized`);
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ unified processor
      return await unifiedMessageProcessor.processMessage(messageData);
      
    } catch (error) {
      logger.error('[BotManager] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±–æ—Ç
   * @param {string} botName - –ò–º—è –±–æ—Ç–∞
   * @returns {Promise<Object>}
   */
  async restartBot(botName) {
    try {
      logger.info(`[BotManager] –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞: ${botName}`);
      
      const bot = this.bots.get(botName);
      
      if (!bot) {
        throw new Error(`Bot "${botName}" not found`);
      }

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–æ–¥ stop)
      if (typeof bot.stop === 'function') {
        await bot.stop();
      }

      // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
      if (typeof bot.initialize === 'function') {
        await bot.initialize();
      }

      logger.info(`[BotManager] ‚úÖ –ë–æ—Ç ${botName} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω`);
      
      return { 
        success: true, 
        bot: botName,
        status: bot.status
      };
      
    } catch (error) {
      logger.error(`[BotManager] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ${botName}:`, error);
      return { 
        success: false, 
        error: error.message 
      };
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –±–æ—Ç—ã
   */
  async stop() {
    try {
      logger.info('[BotManager] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤...');

      for (const [name, bot] of this.bots) {
        if (typeof bot.stop === 'function') {
          logger.info(`[BotManager] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ${name}...`);
          await bot.stop().catch(error => {
            logger.error(`[BotManager] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ${name}:`, error);
          });
        }
      }

      this.isInitialized = false;
      logger.info('[BotManager] ‚úÖ –í—Å–µ –±–æ—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
      
    } catch (error) {
      logger.error('[BotManager] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–æ–≤:', error);
      throw error;
    }
  }
}

// Singleton instance
const botManager = new BotManager();

module.exports = botManager;

