/**
 * Copyright (c) 2024-2025 –¢–∞—Ä–∞–±–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á
 * All rights reserved.
 * 
 * This software is proprietary and confidential.
 * Unauthorized copying, modification, or distribution is prohibited.
 * 
 * For licensing inquiries: info@hb3-accelerator.com
 * Website: https://hb3-accelerator.com
 * GitHub: https://github.com/HB3-ACCELERATOR
 */

const EventEmitter = require('events');
const logger = require('../utils/logger');
const axios = require('axios');
const ollamaConfig = require('./ollamaConfig');
const aiCache = require('./ai-cache');

class AIQueue extends EventEmitter {
  constructor() {
    super();
    const timeouts = ollamaConfig.getTimeouts();
    
    this.queue = [];
    this.isProcessing = false;               // ‚ú® –ù–û–í–û–ï: –§–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    this.maxQueueSize = timeouts.queueMaxSize;  // –ò–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    this.workerInterval = null;              // ‚ú® –ù–û–í–û–ï: –ò–Ω—Ç–µ—Ä–≤–∞–ª worker
    this.checkInterval = timeouts.queueInterval; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–µ—Ä–µ–¥–∏
    this.stats = {
      totalAdded: 0,
      totalProcessed: 0,
      totalFailed: 0,
      avgResponseTime: 0,
      lastProcessedAt: null,
      initializedAt: Date.now()
    };
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –æ—á–µ—Ä–µ–¥—å
  async addRequest(request, priority = 0) {
    const requestId = Date.now() + Math.random();
    const queueItem = {
      id: requestId,
      request,
      priority,
      status: 'queued',
      timestamp: Date.now()
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    this.queue.push(queueItem);
    this.queue.sort((a, b) => b.priority - a.priority);

    this.stats.totalAdded++;
    logger.info(`[AIQueue] –î–æ–±–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å ${requestId} —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º ${priority}. –û—á–µ—Ä–µ–¥—å: ${this.queue.length}`);

    // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
    this.emit('requestAdded', queueItem);

    return requestId;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏)
  getNextRequest() {
    if (this.queue.length === 0) return null;
    return this.queue.shift();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ ID
  getRequestById(requestId) {
    return this.queue.find(item => item.id === requestId);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞
  updateRequestStatus(requestId, status, result = null, error = null, responseTime = null) {
    const item = this.queue.find(item => item.id === requestId);
    if (!item) return false;

    item.status = status;
    item.result = result;
    item.error = error;
    item.responseTime = responseTime;
    item.processedAt = Date.now();

    if (status === 'completed') {
      this.stats.totalProcessed++;
      if (responseTime) {
        this.updateAvgResponseTime(responseTime);
      }
      this.stats.lastProcessedAt = Date.now();
      this.emit('requestCompleted', item);
    } else if (status === 'failed') {
      this.stats.totalFailed++;
      this.stats.lastProcessedAt = Date.now();
      this.emit('requestFailed', item);
    }

    return true;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
  updateAvgResponseTime(responseTime) {
    const total = this.stats.totalProcessed;
    this.stats.avgResponseTime = 
      (this.stats.avgResponseTime * (total - 1) + responseTime) / total;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  getStats() {
    return {
      totalAdded: this.stats.totalAdded,
      totalProcessed: this.stats.totalProcessed,
      totalFailed: this.stats.totalFailed,
      averageProcessingTime: this.stats.avgResponseTime,
      currentQueueSize: this.queue.length,
      lastProcessedAt: this.stats.lastProcessedAt,
      uptime: Date.now() - this.stats.initializedAt
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏
  getQueueSize() {
    return this.queue.length;
  }

  // –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏
  clearQueue() {
    const clearedCount = this.queue.length;
    this.queue = [];
    logger.info(`[AIQueue] –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${clearedCount}`);
    return clearedCount;
  }

  // –ü–∞—É–∑–∞/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
  pause() {
    this.isPaused = true;
  }

  resume() {
    this.isPaused = false;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—É–∑—ã
  isQueuePaused() {
    return this.isPaused;
  }

  // ‚ú® –ù–û–í–û–ï: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å Promise (–¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
  async addTask(taskData) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –æ—á–µ—Ä–µ–¥–∏
    if (this.queue.length >= this.maxQueueSize) {
      throw new Error('–û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞');
    }

    const taskId = Date.now() + Math.random();
    
    const queueItem = {
      id: taskId,
      request: taskData,
      priority: 0, // –í—Å–µ –∑–∞–¥–∞—á–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º (FIFO)
      status: 'queued',
      timestamp: Date.now()
    };

    this.queue.push(queueItem);
    // –ù–µ —Å–æ—Ä—Ç–∏—Ä—É–µ–º - FIFO (First In First Out)
    this.stats.totalAdded++;

    logger.info(`[AIQueue] –ó–∞–¥–∞—á–∞ ${taskId} –¥–æ–±–∞–≤–ª–µ–Ω–∞. –û—á–µ—Ä–µ–¥—å: ${this.queue.length}`);
    this.emit('requestAdded', queueItem);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º Promise –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    return new Promise((resolve, reject) => {
      const timeouts = ollamaConfig.getTimeouts();
      const timeout = setTimeout(() => {
        reject(new Error('Queue timeout'));
      }, timeouts.queueTimeout); // –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –æ—á–µ—Ä–µ–¥–∏

      this.once(`task_${taskId}_completed`, (result) => {
        clearTimeout(timeout);
        resolve(result.response);
      });

      this.once(`task_${taskId}_failed`, (error) => {
        clearTimeout(timeout);
        reject(new Error(error.message));
      });
    });
  }

  // ‚ú® –ù–û–í–û–ï: –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ worker
  startWorker() {
    if (this.workerInterval) {
      logger.warn('[AIQueue] Worker —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    logger.info('[AIQueue] üöÄ –ó–∞–ø—É—Å–∫ worker –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏...');
    
    this.workerInterval = setInterval(() => {
      this.processNextTask();
    }, this.checkInterval); // –ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  }

  // ‚ú® –ù–û–í–û–ï: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ worker
  stopWorker() {
    if (this.workerInterval) {
      clearInterval(this.workerInterval);
      this.workerInterval = null;
      logger.info('[AIQueue] ‚èπÔ∏è Worker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }

  // ‚ú® –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
  async processNextTask() {
    if (this.isProcessing) return;
    
    const task = this.getNextRequest();
    if (!task) return;

    this.isProcessing = true;
    const startTime = Date.now();

    try {
      logger.info(`[AIQueue] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ ${task.id}`);

      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      const cacheKey = aiCache.generateKey(task.request.messages);
      const cached = aiCache.get(cacheKey);
      
      if (cached) {
        logger.info(`[AIQueue] Cache HIT –¥–ª—è –∑–∞–¥–∞—á–∏ ${task.id}`);
        const responseTime = Date.now() - startTime;
        
        this.updateRequestStatus(task.id, 'completed', cached, null, responseTime);
        this.emit(`task_${task.id}_completed`, { response: cached, fromCache: true });
        return;
      }

      // 2. –í—ã–∑—ã–≤–∞–µ–º Ollama API
      const ollamaUrl = ollamaConfig.getBaseUrl();
      const timeouts = ollamaConfig.getTimeouts();

      const response = await axios.post(`${ollamaUrl}/api/chat`, {
        model: task.request.model || ollamaConfig.getDefaultModel(),
        messages: task.request.messages,
        stream: false
      }, {
        timeout: timeouts.ollamaChat
      });

      const result = response.data.message.content;
      const responseTime = Date.now() - startTime;

      // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      aiCache.set(cacheKey, result);

      // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      this.updateRequestStatus(task.id, 'completed', result, null, responseTime);
      this.emit(`task_${task.id}_completed`, { response: result, fromCache: false });

      logger.info(`[AIQueue] ‚úÖ –ó–∞–¥–∞—á–∞ ${task.id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ ${responseTime}ms`);

    } catch (error) {
      logger.error(`[AIQueue] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–¥–∞—á–∏ ${task.id}:`, error.message);
      
      this.updateRequestStatus(task.id, 'failed', null, error.message);
      this.emit(`task_${task.id}_failed`, { message: error.message });

    } finally {
      this.isProcessing = false;
    }
  }
}

module.exports = AIQueue; 