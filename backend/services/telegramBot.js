/**
 * Copyright (c) 2024-2025 –¢–∞—Ä–∞–±–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á
 * All rights reserved.
 * 
 * This software is proprietary and confidential.
 * Unauthorized copying, modification, or distribution is prohibited.
 * 
 * For licensing inquiries: info@hb3-accelerator.com
 * Website: https://hb3-accelerator.com
 * GitHub: https://github.com/HB3-ACCELERATOR
 */

const { Telegraf } = require('telegraf');
const logger = require('../utils/logger');
const encryptedDb = require('./encryptedDatabaseService');

/**
 * TelegramBot - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram —Å–æ–æ–±—â–µ–Ω–∏–π
 * –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram
 */
class TelegramBot {
  constructor() {
    this.name = 'TelegramBot';
    this.channel = 'telegram';
    this.bot = null;
    this.settings = null;
    this.isInitialized = false;
    this.status = 'inactive';
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot
   */
  async initialize() {
    try {
      logger.info('[TelegramBot] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot...');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
      this.settings = await this.loadSettings();
      
      if (!this.settings || !this.settings.bot_token) {
        logger.warn('[TelegramBot] ‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        this.status = 'not_configured';
        return { success: false, reason: 'not_configured' };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
      if (!this.settings.bot_token || typeof this.settings.bot_token !== 'string') {
        logger.error('[TelegramBot] ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω:', { 
          tokenExists: !!this.settings.bot_token,
          tokenType: typeof this.settings.bot_token,
          tokenLength: this.settings.bot_token?.length || 0
        });
        this.status = 'invalid_token';
        return { success: false, reason: 'invalid_token' };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Telegram API
      try {
        logger.info('[TelegramBot] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Telegram API...');
        const testBot = new Telegraf(this.settings.bot_token);
        const me = await testBot.telegram.getMe();
        logger.info('[TelegramBot] ‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –±–æ—Ç:', me.username);
        // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º stop() - –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É
      } catch (error) {
        logger.error('[TelegramBot] ‚ùå –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å API:', {
          message: error.message,
          code: error.code,
          response: error.response?.data
        });
        this.status = 'invalid_token';
        return { success: false, reason: 'invalid_token' };
      }

      // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
      this.bot = new Telegraf(this.settings.bot_token);
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      this.setupHandlers();
      
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
      this.isInitialized = true;
      this.status = 'active';
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–º–æ–∂–µ—Ç –¥–æ–ª–≥–æ –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è)
      this.launch()
        .then(() => {
          logger.info('[TelegramBot] ‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram');
          this.status = 'active';
        })
        .catch(error => {
          logger.error('[TelegramBot] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram:', {
            message: error.message,
            code: error.code,
            response: error.response?.data,
            stack: error.stack
          });
          this.status = 'error';
        });
      
      logger.info('[TelegramBot] ‚úÖ Telegram Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ)');
      return { success: true };
      
    } catch (error) {
      if (error.message.includes('409: Conflict')) {
        logger.warn('[TelegramBot] ‚ö†Ô∏è Telegram Bot —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ –¥—Ä—É–≥–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ');
        this.status = 'conflict';
          } else {
        logger.error('[TelegramBot] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        this.status = 'error';
      }
      return { success: false, error: error.message };
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ë–î
   */
  async loadSettings() {
    try {
      const settings = await encryptedDb.getData('telegram_settings', {}, 1);
      if (!settings.length) {
        return null;
      }
      return settings[0];
    } catch (error) {
      logger.error('[TelegramBot] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      throw error;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  setupHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    this.bot.command('start', (ctx) => {
      logger.info('[TelegramBot] üì® –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start');
      ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.');
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('text', async (ctx) => {
      logger.info('[TelegramBot] üì® –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
      await this.handleTextMessage(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    this.bot.on('document', async (ctx) => {
      logger.info('[TelegramBot] üì® –ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç');
      await this.handleMessage(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
    this.bot.on('photo', async (ctx) => {
      logger.info('[TelegramBot] üì® –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ');
      await this.handleMessage(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ
    this.bot.on('audio', async (ctx) => {
      logger.info('[TelegramBot] üì® –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ');
      await this.handleMessage(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ
    this.bot.on('video', async (ctx) => {
      logger.info('[TelegramBot] üì® –ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ');
      await this.handleMessage(ctx);
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async handleTextMessage(ctx) {
    const text = ctx.message.text.trim();
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (text.startsWith('/')) return;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await this.handleMessage(ctx);
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {Object} ctx - Telegraf context
   * @returns {Object} - –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  extractMessageData(ctx) {
      try {
        const telegramId = ctx.from.id.toString();
      let content = '';
      let attachments = [];

      // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      if (ctx.message.text) {
        content = ctx.message.text.trim();
      } else if (ctx.message.caption) {
        content = ctx.message.caption.trim();
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π
      let fileId, fileName, mimeType, fileSize;

        if (ctx.message.document) {
          fileId = ctx.message.document.file_id;
          fileName = ctx.message.document.file_name;
          mimeType = ctx.message.document.mime_type;
          fileSize = ctx.message.document.file_size;
        } else if (ctx.message.photo && ctx.message.photo.length > 0) {
          const photo = ctx.message.photo[ctx.message.photo.length - 1];
          fileId = photo.file_id;
          fileName = 'photo.jpg';
          mimeType = 'image/jpeg';
          fileSize = photo.file_size;
        } else if (ctx.message.audio) {
          fileId = ctx.message.audio.file_id;
          fileName = ctx.message.audio.file_name || 'audio.ogg';
          mimeType = ctx.message.audio.mime_type || 'audio/ogg';
          fileSize = ctx.message.audio.file_size;
        } else if (ctx.message.video) {
          fileId = ctx.message.video.file_id;
          fileName = ctx.message.video.file_name || 'video.mp4';
          mimeType = ctx.message.video.mime_type || 'video/mp4';
          fileSize = ctx.message.video.file_size;
        }
        
        if (fileId) {
        attachments.push({
          type: 'telegram_file',
          fileId: fileId,
          filename: fileName,
          mimetype: mimeType,
          size: fileSize,
          ctx: ctx // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
        });
      }

      return {
        channel: 'telegram',
        identifier: telegramId,
        content: content,
        attachments: attachments,
        metadata: {
          telegramUsername: ctx.from.username,
          telegramFirstName: ctx.from.first_name,
          telegramLastName: ctx.from.last_name,
          messageId: ctx.message.message_id,
          chatId: ctx.chat.id
        }
      };
    } catch (error) {
      logger.error('[TelegramBot] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑ Telegram
   * @param {Object} attachment - –î–∞–Ω–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è
   * @returns {Promise<Buffer>} - –ë—É—Ñ–µ—Ä —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞
   */
  async downloadAttachment(attachment) {
    try {
      const fileLink = await attachment.ctx.telegram.getFileLink(attachment.fileId);
      const res = await fetch(fileLink.href);
      return await res.buffer();
    } catch (error) {
      logger.error('[TelegramBot] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
      return null;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
   * @param {Object} ctx - Telegraf context
   * @param {Function} processor - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async handleMessage(ctx, processor = null) {
    try {
      await ctx.replyWithChatAction('typing');
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
      const messageData = this.extractMessageData(ctx);
      
      logger.info(`[TelegramBot] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${messageData.identifier}`);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
      for (const attachment of messageData.attachments) {
        const buffer = await this.downloadAttachment(attachment);
        if (buffer) {
          attachment.data = buffer;
          // –£–¥–∞–ª—è–µ–º ctx –∏–∑ –≤–ª–æ–∂–µ–Ω–∏—è
          delete attachment.ctx;
        }
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π
      const messageProcessor = processor || this.messageProcessor;
      
      if (!messageProcessor) {
        await ctx.reply('–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.');
          return;
        }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
      const result = await messageProcessor(messageData);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (result.success && result.aiResponse) {
        await ctx.reply(result.aiResponse.response);
      } else if (result.success) {
        await ctx.reply('–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ');
      } else {
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
      }

      } catch (error) {
      logger.error('[TelegramBot] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        try {
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        } catch (replyError) {
        logger.error('[TelegramBot] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', replyError);
      }
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–±–µ–∑ timeout –∏ retry - Telegraf —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º)
   */
  async launch() {
    try {
      logger.info('[TelegramBot] –ó–∞–ø—É—Å–∫ polling...');
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–∞ - –ø—É—Å—Ç—å Telegraf —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
      await this.bot.launch({ 
        dropPendingUpdates: true,
        allowedUpdates: ['message', 'callback_query']
      });
      
      logger.info('[TelegramBot] ‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      logger.error('[TelegramBot] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', {
        message: error.message,
        code: error.code,
        response: error.response?.data,
        stack: error.stack
      });
      throw error;
    }
  }


  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
   * @param {Function} processor - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  setMessageProcessor(processor) {
    this.messageProcessor = processor;
    logger.info('[TelegramBot] ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
   * @returns {Object} - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
   */
  getStatus() {
    return {
      name: this.name,
      channel: this.channel,
      isInitialized: this.isInitialized,
      status: this.status,
      hasSettings: !!this.settings
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   * @returns {Object} - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegraf –±–æ—Ç–∞
   */
  getBot() {
    return this.bot;
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
   */
  async stop() {
    try {
      logger.info('[TelegramBot] üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram Bot...');
      
      if (this.bot) {
        await this.bot.stop();
        this.bot = null;
      }
      
      this.isInitialized = false;
      this.status = 'inactive';
      
      logger.info('[TelegramBot] ‚úÖ Telegram Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  } catch (error) {
      logger.error('[TelegramBot] ‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:', error);
    throw error;
  }
}
}

module.exports = TelegramBot;

