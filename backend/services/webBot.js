/**
 * Copyright (c) 2024-2025 –¢–∞—Ä–∞–±–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á
 * All rights reserved.
 * 
 * This software is proprietary and confidential.
 * Unauthorized copying, modification, or distribution is prohibited.
 * 
 * For licensing inquiries: info@hb3-accelerator.com
 * Website: https://hb3-accelerator.com
 * GitHub: https://github.com/HB3-ACCELERATOR
 */

const logger = require('../utils/logger');
const unifiedMessageProcessor = require('./unifiedMessageProcessor');
const universalMediaProcessor = require('./UniversalMediaProcessor');

/**
 * WebBot - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±-—á–∞—Ç–∞
 * –ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω
 */
class WebBot {
  constructor() {
    this.name = 'WebBot';
    this.channel = 'web';
    this.isInitialized = false;
    this.status = 'inactive';
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web Bot
   */
  async initialize() {
    try {
      logger.info('[WebBot] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web Bot...');
      
      // Web bot –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
      this.isInitialized = true;
      this.status = 'active';
      
      logger.info('[WebBot] ‚úÖ Web Bot —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return { success: true };
      
    } catch (error) {
      logger.error('[WebBot] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      this.status = 'error';
      return { success: false, error: error.message };
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤–µ–±-—á–∞—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–µ–¥–∏–∞
   * @param {Object} messageData - –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {Promise<Object>}
   */
  async processMessage(messageData) {
    try {
      if (!this.isInitialized) {
        throw new Error('WebBot is not initialized');
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–Ω–∞–ª
      messageData.channel = 'web';

      // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö —á–µ—Ä–µ–∑ –º–µ–¥–∏–∞-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
      if (messageData.attachments && messageData.attachments.length > 0) {
        const processedFiles = [];
        
        for (const attachment of messageData.attachments) {
          try {
            const processedFile = await universalMediaProcessor.processFile(
              attachment.data,
              attachment.filename,
              {
                webUpload: true,
                originalSize: attachment.size,
                mimeType: attachment.mimetype
              }
            );
            
            processedFiles.push(processedFile);
          } catch (fileError) {
            logger.error('[WebBot] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', fileError);
            // Fallback: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            processedFiles.push({
              type: 'document',
              content: `[–§–∞–π–ª: ${attachment.filename}]`,
              processed: false,
              error: fileError.message,
              file: attachment
            });
          }
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        messageData.contentData = {
          text: messageData.content,
          files: processedFiles.map(file => ({
            data: file.file?.data || file.file?.buffer,
            filename: file.file?.originalName || file.file?.filename,
            metadata: {
              type: file.type,
              processed: file.processed,
              webUpload: true
            }
          }))
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        messageData.metadata = {
          ...messageData.metadata,
          hasMedia: processedFiles.length > 0,
          mediaTypes: processedFiles.map(f => f.type),
          processedFiles: processedFiles
        };
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ unified processor
      return await unifiedMessageProcessor.processMessage(messageData);
      
    } catch (error) {
      logger.error('[WebBot] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≤–µ–±-—á–∞—Ç
   * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {Promise<Object>}
   */
  async sendMessage(userId, message) {
    try {
      logger.info('[WebBot] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', userId);
      
      // –î–ª—è –≤–µ–±-—á–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ WebSocket
      // –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö, —Ä–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ wsHub
      
      return { 
        success: true,
        userId,
        message,
        channel: 'web'
      };
      
    } catch (error) {
      logger.error('[WebBot] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
   * @returns {Object}
   */
  getStatus() {
    return {
      name: this.name,
      channel: this.channel,
      isInitialized: this.isInitialized,
      status: this.status
    };
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
   */
  async stop() {
    try {
      logger.info('[WebBot] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Web Bot...');
      this.isInitialized = false;
      this.status = 'inactive';
      logger.info('[WebBot] ‚úÖ Web Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      logger.error('[WebBot] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:', error);
      throw error;
    }
  }
}

module.exports = WebBot;

