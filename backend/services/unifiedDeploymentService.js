/**
 * –ï–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ–ø–ª–æ–µ–º DLE
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –¥–µ–ø–ª–æ–µ–º
 * Copyright (c) 2024-2025 –¢–∞—Ä–∞–±–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á
 */

const logger = require('../utils/logger');
const DeployParamsService = require('./deployParamsService');
const deploymentTracker = require('../utils/deploymentTracker');
const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');
// ContractVerificationService —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º Hardhat verify
const { getRpcUrlByChainId } = require('./rpcProviderService');
const { ethers } = require('ethers');
// –£–±–∏—Ä–∞–µ–º –ø—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç broadcastDeploymentUpdate - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ deploymentTracker

class UnifiedDeploymentService {
  constructor() {
    this.deployParamsService = new DeployParamsService();
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –¥–µ–ø–ª–æ–π DLE —Å –ø–æ–ª–Ω—ã–º —Ü–∏–∫–ª–æ–º
   * @param {Object} dleParams - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã DLE –∏–∑ —Ñ–æ—Ä–º—ã
   * @param {string} deploymentId - ID –¥–µ–ø–ª–æ—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ø–ª–æ—è
   */
  async createDLE(dleParams, deploymentId = null) {
    try {
      // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –¥–µ–ø–ª–æ—è
      if (!deploymentId) {
        deploymentId = `deploy_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;
      }

      logger.info(`üöÄ –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è DLE: ${deploymentId}`);

      // 2. –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      this.validateDLEParams(dleParams);

      // 3. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–µ–ø–ª–æ—è
      const deployParams = await this.prepareDeployParams(dleParams);

      // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
      await this.deployParamsService.saveDeployParams(deploymentId, deployParams, 'pending');
      logger.info(`üíæ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î: ${deploymentId}`);

      // 5. –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π
      const result = await this.executeDeployment(deploymentId);

      // 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      await this.deployParamsService.updateDeploymentStatus(deploymentId, 'completed', result);
      logger.info(`‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω: ${deploymentId}`);

      return {
        success: true,
        deploymentId,
        data: result
      };

    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è ${deploymentId}:`, error);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—à–∏–±–∫—É
      if (deploymentId) {
        await this.deployParamsService.updateDeploymentStatus(deploymentId, 'failed', { error: error.message });
      }

      throw error;
    }
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã DLE
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  validateDLEParams(params) {
    const required = ['name', 'symbol', 'privateKey', 'supportedChainIds'];
    const missing = required.filter(field => !params[field]);
    
    if (missing.length > 0) {
      throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missing.join(', ')}`);
    }

    if (params.quorumPercentage < 1 || params.quorumPercentage > 100) {
      throw new Error('–ö–≤–æ—Ä—É–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤');
    }

    if (!params.initialPartners || params.initialPartners.length === 0) {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞');
    }

    if (!params.initialAmounts || params.initialAmounts.length === 0) {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤');
    }

    if (params.initialPartners.length !== params.initialAmounts.length) {
      throw new Error('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—É–º–º');
    }

    if (!params.supportedChainIds || params.supportedChainIds.length === 0) {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ç–∏');
    }
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–µ–ø–ª–æ—è
   * @param {Object} dleParams - –ò—Å—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
   * @returns {Promise<Object>} - –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
   */
  async prepareDeployParams(dleParams) {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º RPC URLs –Ω–∞ –æ—Å–Ω–æ–≤–µ supportedChainIds –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const rpcUrls = await this.generateRpcUrls(dleParams.supportedChainIds || []);
    
    return {
      name: dleParams.name,
      symbol: dleParams.symbol,
      location: dleParams.location || '',
      coordinates: dleParams.coordinates || '',
      jurisdiction: dleParams.jurisdiction || 1,
      oktmo: dleParams.oktmo || 45000000000,
      okved_codes: dleParams.okvedCodes || [],
      kpp: dleParams.kpp || 770101001,
      quorum_percentage: dleParams.quorumPercentage || 51,
      initial_partners: dleParams.initialPartners || [],
      // initialAmounts –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, —É–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ 1e18 –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –¥–µ–ø–ª–æ–µ
      initial_amounts: dleParams.initialAmounts || [],
      supported_chain_ids: dleParams.supportedChainIds || [],
      current_chain_id: 1, // Governance chain –≤—Å–µ–≥–¥–∞ Ethereum
      private_key: dleParams.privateKey,
      etherscan_api_key: dleParams.etherscanApiKey,
      logo_uri: dleParams.logoURI || '',
      create2_salt: dleParams.CREATE2_SALT || `0x${Math.random().toString(16).substring(2).padStart(64, '0')}`,
      auto_verify_after_deploy: dleParams.autoVerifyAfterDeploy || false,
      modules_to_deploy: dleParams.modulesToDeploy || [],
      rpc_urls: rpcUrls,
      deployment_status: 'pending'
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç RPC URLs –Ω–∞ –æ—Å–Ω–æ–≤–µ chain IDs –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   * @param {Array} chainIds - –ú–∞—Å—Å–∏–≤ chain IDs
   * @returns {Promise<Array>} - –ú–∞—Å—Å–∏–≤ RPC URLs
   */
  async generateRpcUrls(chainIds) {
    const { getRpcUrlByChainId } = require('./rpcProviderService');
    const rpcUrls = [];
    
    for (const chainId of chainIds) {
      try {
        const rpcUrl = await getRpcUrlByChainId(chainId);
        if (rpcUrl) {
          rpcUrls.push(rpcUrl);
          logger.info(`[RPC_GEN] –ù–∞–π–¥–µ–Ω RPC –¥–ª—è chainId ${chainId}: ${rpcUrl}`);
        } else {
          logger.warn(`[RPC_GEN] RPC –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è chainId ${chainId}`);
        }
      } catch (error) {
        logger.error(`[RPC_GEN] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è RPC –¥–ª—è chainId ${chainId}:`, error.message);
      }
    }
    
    return rpcUrls;
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–ø–ª–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
   * @param {string} deploymentId - ID –¥–µ–ø–ª–æ—è
   * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ø–ª–æ—è
   */
  async executeDeployment(deploymentId) {
    return new Promise((resolve, reject) => {
      const scriptPath = path.join(__dirname, '../scripts/deploy/deploy-multichain.js');
      
      logger.info(`üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è: ${scriptPath}`);
      
      const child = spawn('npx', ['hardhat', 'run', scriptPath], {
        cwd: path.join(__dirname, '..'),
        env: {
          ...process.env,
          DEPLOYMENT_ID: deploymentId
        },
        stdio: ['pipe', 'pipe', 'pipe']
      });

      let stdout = '';
      let stderr = '';

      child.stdout.on('data', (data) => {
        const output = data.toString();
        stdout += output;
        logger.info(`[DEPLOY] ${output.trim()}`);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ç–∞–ø –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –≤—ã–≤–æ–¥–∞
        let progress = 50;
        let message = '–î–µ–ø–ª–æ–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...';
        
        if (output.includes('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ABI —Ñ–∞–π–ª–∞')) {
          progress = 10;
          message = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ABI —Ñ–∞–π–ª–∞...';
        } else if (output.includes('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è flattened –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞')) {
          progress = 20;
          message = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è flattened –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...';
        } else if (output.includes('Compiled') && output.includes('Solidity files')) {
          progress = 30;
          message = '–ö–æ–º–ø–∏–ª—è—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤...';
        } else if (output.includes('–ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã')) {
          progress = 40;
          message = '–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–ø–ª–æ—è...';
        } else if (output.includes('deploying DLE directly')) {
          progress = 60;
          message = '–î–µ–ø–ª–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ —Å–µ—Ç–∏...';
        } else if (output.includes('–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ —Å–µ—Ç–∏')) {
          progress = 80;
          message = '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤...';
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —á–µ—Ä–µ–∑ deploymentTracker
        deploymentTracker.updateDeployment(deploymentId, {
          status: 'in_progress',
          progress: progress,
          message: message,
          output: output.trim()
        });
      });

      child.stderr.on('data', (data) => {
        const output = data.toString();
        stderr += output;
        logger.error(`[DEPLOY ERROR] ${output.trim()}`);
      });

      child.on('close', (code) => {
        if (code === 0) {
          try {
            const result = this.parseDeployResult(stdout);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
            this.deployParamsService.updateDeploymentStatus(deploymentId, 'completed', result)
              .then(() => {
                logger.info(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ø–ª–æ—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: ${deploymentId}`);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ deploymentTracker
                deploymentTracker.completeDeployment(deploymentId, result);
                
                resolve(result);
              })
              .catch(dbError => {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –ë–î: ${dbError.message}`);
                resolve(result); // –í—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
              });
          } catch (error) {
            reject(new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${error.message}`));
          }
        } else {
          // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          logger.error(`‚ùå –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ ${code})`);
          logger.error(`üìã stdout: ${stdout}`);
          logger.error(`üìã stderr: ${stderr}`);
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É –∏–∑ –≤—ã–≤–æ–¥–∞
          const errorMessage = stderr || stdout || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
          
          // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
          const errorResult = {
            success: false,
            error: `–î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ ${code}): ${errorMessage}`,
            stdout: stdout,
            stderr: stderr
          };
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –ë–î
          this.deployParamsService.updateDeploymentStatus(deploymentId, 'failed', errorResult)
            .then(() => {
              logger.info(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: ${deploymentId}`);
            })
            .catch(dbError => {
              logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—à–∏–±–∫–∏ –≤ –ë–î: ${dbError.message}`);
            });
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ deploymentTracker
          deploymentTracker.failDeployment(deploymentId, new Error(`–î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ ${code}): ${errorMessage}`));
          
          reject(new Error(`–î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ ${code}): ${errorMessage}`));
        }
      });

      child.on('error', (error) => {
        reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–µ–ø–ª–æ—è: ${error.message}`));
      });
    });
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ø–ª–æ—è –∏–∑ –≤—ã–≤–æ–¥–∞ —Å–∫—Ä–∏–ø—Ç–∞
   * @param {string} stdout - –í—ã–≤–æ–¥ —Å–∫—Ä–∏–ø—Ç–∞
   * @returns {Object} - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   */
  parseDeployResult(stdout) {
    try {
      logger.info(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –¥–µ–ø–ª–æ—è (${stdout.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
      
      // –ò—â–µ–º MULTICHAIN_DEPLOY_RESULT –≤ –≤—ã–≤–æ–¥–µ
      const resultMatch = stdout.match(/MULTICHAIN_DEPLOY_RESULT\s+(.+)/);
      if (resultMatch) {
        const jsonStr = resultMatch[1].trim();
        const deployResults = JSON.parse(jsonStr);
        logger.info(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ–ø–ª–æ—è: ${JSON.stringify(deployResults, null, 2)}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –¥–µ–ø–ª–æ–∏
        const successfulDeploys = deployResults.filter(r => r.address && r.address !== '0x0000000000000000000000000000000000000000' && !r.error);
        
        if (successfulDeploys.length > 0) {
          const dleAddress = successfulDeploys[0].address;
          logger.info(`‚úÖ DLE –∞–¥—Ä–µ—Å: ${dleAddress}`);
          
          return {
            success: true,
            data: {
              dleAddress: dleAddress,
              networks: deployResults.map(result => ({
                chainId: result.chainId,
                address: result.address,
                success: result.address && result.address !== '0x0000000000000000000000000000000000000000' && !result.error,
                error: result.error || null,
                verification: result.verification || 'pending'
              }))
            },
            message: `DLE —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –≤ ${successfulDeploys.length} —Å–µ—Ç—è—Ö`
          };
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –¥–µ–ø–ª–æ–µ–≤, –Ω–æ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö —Å –æ—à–∏–±–∫–∞–º–∏
          const failedDeploys = deployResults.filter(r => r.error);
          logger.warn(`‚ö†Ô∏è –í—Å–µ –¥–µ–ø–ª–æ–∏ –Ω–µ—É–¥–∞—á–Ω—ã. –û—à–∏–±–∫–∏: ${failedDeploys.map(d => d.error).join(', ')}`);
          
          return {
            success: false,
            data: {
              networks: deployResults.map(result => ({
                chainId: result.chainId,
                address: result.address || null,
                success: false,
                error: result.error || 'Unknown error'
              }))
            },
            message: `–î–µ–ø–ª–æ–π –Ω–µ—É–¥–∞—á–µ–Ω –≤–æ –≤—Å–µ—Ö —Å–µ—Ç—è—Ö. –û—à–∏–±–∫–∏: ${failedDeploys.map(d => d.error).join(', ')}`
          };
        }
      }
      
      // Fallback: —Å–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞
      return {
        success: true,
        message: '–î–µ–ø–ª–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
        output: stdout
      };
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–µ–ø–ª–æ—è:', error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ø–ª–æ—è: ${error.message}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è
   * @param {string} deploymentId - ID –¥–µ–ø–ª–æ—è
   * @returns {Object} - –°—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è
   */
  async getDeploymentStatus(deploymentId) {
    return await this.deployParamsService.getDeployParams(deploymentId);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–µ–ø–ª–æ–∏
   * @returns {Array} - –°–ø–∏—Å–æ–∫ –¥–µ–ø–ª–æ–µ–≤
   */
  async getAllDeployments() {
    return await this.deployParamsService.getAllDeployments();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ DLE –∏–∑ —Ñ–∞–π–ª–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   * @returns {Array} - –°–ø–∏—Å–æ–∫ DLE
   */
  getAllDLEs() {
    try {
      const dlesDir = path.join(__dirname, '../contracts-data/dles');
      if (!fs.existsSync(dlesDir)) {
        return [];
      }

      const files = fs.readdirSync(dlesDir);
      const dles = [];

      for (const file of files) {
        if (file.includes('dle-v2-') && file.endsWith('.json')) {
          const filePath = path.join(dlesDir, file);
          try {
            const dleData = JSON.parse(fs.readFileSync(filePath, 'utf8'));
            if (dleData.dleAddress) {
              dles.push(dleData);
            }
          } catch (err) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${file}:`, err);
          }
        }
      }

      return dles;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ DLE:', error);
      return [];
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤–æ –≤—Å–µ—Ö —Å–µ—Ç—è—Ö
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
   * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  async autoVerifyAcrossChains({ deployParams, deployResult, apiKey }) {
    try {
      logger.info('üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤');
      
      if (!deployResult?.data?.networks) {
        throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Ç—è—Ö –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
      }

      const verificationResults = [];

      for (const network of deployResult.data.networks) {
        try {
          logger.info(`üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ —Å–µ—Ç–∏ ${network.chainId}...`);
          
          const result = await etherscanV2.verifyContract({
            contractAddress: network.dleAddress,
            chainId: network.chainId,
            deployParams,
            apiKey
          });

          verificationResults.push({
            chainId: network.chainId,
            address: network.dleAddress,
            success: result.success,
            guid: result.guid,
            message: result.message
          });

          logger.info(`‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ —Å–µ—Ç–∏ ${network.chainId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
        } catch (error) {
          logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Å–µ—Ç–∏ ${network.chainId}:`, error);
          verificationResults.push({
            chainId: network.chainId,
            address: network.dleAddress,
            success: false,
            error: error.message
          });
        }
      }

      return {
        success: true,
        results: verificationResults
      };
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å—ã –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–µ—Ç—è—Ö
   * @param {Array} chainIds - –°–ø–∏—Å–æ–∫ ID —Å–µ—Ç–µ–π
   * @param {string} privateKey - –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
   * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  async checkBalances(chainIds, privateKey) {
    try {
      logger.info(`üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –≤ ${chainIds.length} —Å–µ—Ç—è—Ö`);
      
      const wallet = new ethers.Wallet(privateKey);
      const results = [];

      for (const chainId of chainIds) {
        try {
          const rpcUrl = await getRpcUrlByChainId(chainId);
          if (!rpcUrl) {
            results.push({
              chainId,
              success: false,
              error: `RPC URL –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–µ—Ç–∏ ${chainId}`
            });
            continue;
          }

          // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ rpcUrl - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
          const rpcUrlString = typeof rpcUrl === 'string' ? rpcUrl : rpcUrl.toString();
          const provider = new ethers.JsonRpcProvider(rpcUrlString);
          const balance = await provider.getBalance(wallet.address);
          const balanceEth = ethers.formatEther(balance);

          results.push({
            chainId,
            success: true,
            address: wallet.address,
            balance: balanceEth,
            balanceWei: balance.toString()
          });

          logger.info(`üí∞ –°–µ—Ç—å ${chainId}: ${balanceEth} ETH`);
        } catch (error) {
          logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –≤ —Å–µ—Ç–∏ ${chainId}:`, error);
          results.push({
            chainId,
            success: false,
            error: error.message
          });
        }
      }

      return {
        success: true,
        results
      };
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  async close() {
    await this.deployParamsService.close();
  }
}

module.exports = UnifiedDeploymentService;
