#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö DLE
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./encrypt-all-tables.sh

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ OpenSSL
if ! command -v openssl &> /dev/null; then
    echo "‚ùå OpenSSL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt-get install openssl"
    exit 1
fi

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –∫–ª—é—á–µ–π
mkdir -p ./ssl/keys

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
if [ ! -f "./ssl/keys/full_db_encryption.key" ]; then
    echo "üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü..."
    openssl rand -base64 32 > ./ssl/keys/full_db_encryption.key
    chmod 600 ./ssl/keys/full_db_encryption.key
    echo "‚úÖ –ö–ª—é—á —Å–æ–∑–¥–∞–Ω: ./ssl/keys/full_db_encryption.key"
fi

echo "üîí –ü–æ–ª–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
if ! docker exec dapp-postgres pg_isready -U dapp_user -d dapp_db > /dev/null 2>&1; then
    echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
    exit 1
fi

# –°–æ–∑–¥–∞—ë–º —Ñ—É–Ω–∫—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –≤ PostgreSQL
echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –≤ PostgreSQL..."

docker exec dapp-postgres psql -U dapp_user -d dapp_db << 'EOF'
-- –°–æ–∑–¥–∞—ë–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
CREATE EXTENSION IF NOT EXISTS pgcrypto;

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
CREATE OR REPLACE FUNCTION encrypt_text(data text, key text)
RETURNS text AS $$
BEGIN
    IF data IS NULL THEN
        RETURN NULL;
    END IF;
    RETURN encode(encrypt_iv(data::bytea, decode(key, 'base64'), decode('000102030405060708090A0B0C0D0E0F', 'hex'), 'aes-cbc'), 'base64');
END;
$$ LANGUAGE plpgsql;

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
CREATE OR REPLACE FUNCTION decrypt_text(encrypted_data text, key text)
RETURNS text AS $$
BEGIN
    IF encrypted_data IS NULL THEN
        RETURN NULL;
    END IF;
    RETURN convert_from(decrypt_iv(decode(encrypted_data, 'base64'), decode(key, 'base64'), decode('000102030405060708090A0B0C0D0E0F', 'hex'), 'aes-cbc'), 'utf8');
END;
$$ LANGUAGE plpgsql;

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è JSON
CREATE OR REPLACE FUNCTION encrypt_json(data jsonb, key text)
RETURNS text AS $$
BEGIN
    IF data IS NULL THEN
        RETURN NULL;
    END IF;
    RETURN encode(encrypt_iv(data::text::bytea, decode(key, 'base64'), decode('000102030405060708090A0B0C0D0E0F', 'hex'), 'aes-cbc'), 'base64');
END;
$$ LANGUAGE plpgsql;

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ JSON
CREATE OR REPLACE FUNCTION decrypt_json(encrypted_data text, key text)
RETURNS jsonb AS $$
BEGIN
    IF encrypted_data IS NULL THEN
        RETURN NULL;
    END IF;
    RETURN convert_from(decrypt_iv(decode(encrypted_data, 'base64'), decode(key, 'base64'), decode('000102030405060708090A0B0C0D0E0F', 'hex'), 'aes-cbc'), 'utf8')::jsonb;
END;
$$ LANGUAGE plpgsql;
EOF

# –ß–∏—Ç–∞–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
ENCRYPTION_KEY=$(cat ./ssl/keys/full_db_encryption.key)

echo "üîê –ù–∞—á–∏–Ω–∞–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü..."

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
TABLES=$(docker exec dapp-postgres psql -U dapp_user -d dapp_db -t -c "
SELECT table_name 
FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_type = 'BASE TABLE'
ORDER BY table_name;")

echo "üìã –ù–∞–π–¥–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:"
echo "$TABLES"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
encrypt_table() {
    local table_name="$1"
    echo "üîê –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: $table_name"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
    local columns=$(docker exec dapp-postgres psql -U dapp_user -d dapp_db -t -c "
    SELECT column_name, data_type 
    FROM information_schema.columns 
    WHERE table_name = '$table_name' 
    AND table_schema = 'public'
    AND data_type IN ('text', 'varchar', 'character varying', 'json', 'jsonb')
    AND column_name NOT LIKE '%_encrypted'
    AND column_name NOT IN ('created_at', 'updated_at', 'id')
    ORDER BY ordinal_position;")
    
    if [ -z "$columns" ]; then
        echo "   ‚è≠Ô∏è  –ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"
        return
    fi
    
    echo "   üìù –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:"
    echo "$columns" | while read -r column_info; do
        if [ -n "$column_info" ]; then
            echo "      $column_info"
        fi
    done
    
    # –°–æ–∑–¥–∞—ë–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∏ —à–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    echo "$columns" | while read -r column_info; do
        if [ -n "$column_info" ]; then
            column_name=$(echo "$column_info" | awk '{print $1}')
            data_type=$(echo "$column_info" | awk '{print $2}')
            
            echo "   üîê –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏: $column_name"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
            if [ "$data_type" = "jsonb" ] || [ "$data_type" = "json" ]; then
                docker exec dapp-postgres psql -U dapp_user -d dapp_db -c "
                ALTER TABLE $table_name ADD COLUMN IF NOT EXISTS ${column_name}_encrypted TEXT;
                UPDATE $table_name 
                SET ${column_name}_encrypted = encrypt_json($column_name, '$ENCRYPTION_KEY')
                WHERE $column_name IS NOT NULL AND ${column_name}_encrypted IS NULL;"
            else
                docker exec dapp-postgres psql -U dapp_user -d dapp_db -c "
                ALTER TABLE $table_name ADD COLUMN IF NOT EXISTS ${column_name}_encrypted TEXT;
                UPDATE $table_name 
                SET ${column_name}_encrypted = encrypt_text($column_name, '$ENCRYPTION_KEY')
                WHERE $column_name IS NOT NULL AND ${column_name}_encrypted IS NULL;"
            fi
        fi
    done
}

# –®–∏—Ñ—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
echo "$TABLES" | while read -r table_name; do
    if [ -n "$table_name" ]; then
        encrypt_table "$table_name"
    fi
done

echo "‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"

# –°–æ–∑–¥–∞—ë–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
cat > decrypt-all-tables.sh << 'EOF'
#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./decrypt-all-tables.sh

ENCRYPTION_KEY=$(cat ./ssl/keys/full_db_encryption.key)

echo "üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü..."

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
TABLES=$(docker exec dapp-postgres psql -U dapp_user -d dapp_db -t -c "
SELECT table_name 
FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_type = 'BASE TABLE'
ORDER BY table_name;")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
decrypt_table() {
    local table_name="$1"
    echo "üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã: $table_name"
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    local encrypted_columns=$(docker exec dapp-postgres psql -U dapp_user -d dapp_db -t -c "
    SELECT column_name 
    FROM information_schema.columns 
    WHERE table_name = '$table_name' 
    AND table_schema = 'public'
    AND column_name LIKE '%_encrypted'
    ORDER BY ordinal_position;")
    
    if [ -z "$encrypted_columns" ]; then
        echo "   ‚è≠Ô∏è  –ù–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫"
        return
    fi
    
    echo "   üìù –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:"
    echo "$encrypted_columns" | while read -r column_name; do
        if [ -n "$column_name" ]; then
            echo "      $column_name"
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–ª–æ–Ω–∫–∏
            data_type=$(docker exec dapp-postgres psql -U dapp_user -d dapp_db -t -c "
                SELECT data_type FROM information_schema.columns 
                WHERE table_name = '$table_name' AND column_name = '$column_name' AND table_schema = 'public';" | xargs)
            if [ "$data_type" = "jsonb" ] || [ "$data_type" = "json" ]; then
                # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º json/jsonb
                docker exec dapp-postgres psql -U dapp_user -d dapp_db -c "
                SELECT id, decrypt_json($column_name, '$ENCRYPTION_KEY') as ${column_name%_encrypted}_decrypted
                FROM $table_name WHERE $column_name IS NOT NULL LIMIT 5;"
            else
                # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ
                docker exec dapp-postgres psql -U dapp_user -d dapp_db -c "
                SELECT id, decrypt_text($column_name, '$ENCRYPTION_KEY') as ${column_name%_encrypted}_decrypted
                FROM $table_name WHERE $column_name IS NOT NULL LIMIT 5;"
            fi
        fi
    done
}

# –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
echo "$TABLES" | while read -r table_name; do
    if [ -n "$table_name" ]; then
        decrypt_table "$table_name"
    fi
done

echo "‚úÖ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
EOF

chmod +x decrypt-all-tables.sh

# –°–æ–∑–¥–∞—ë–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
cat > remove-unencrypted-columns.sh << 'EOF'
#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
# –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è!
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./remove-unencrypted-columns.sh

echo "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏!"
echo "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
    exit 1
fi

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
TABLES=$(docker exec dapp-postgres psql -U dapp_user -d dapp_db -t -c "
SELECT table_name 
FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_type = 'BASE TABLE'
ORDER BY table_name;")

# –£–¥–∞–ª—è–µ–º –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
echo "$TABLES" | while read -r table_name; do
    if [ -n "$table_name" ]; then
        echo "üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: $table_name"
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        local unencrypted_columns=$(docker exec dapp-postgres psql -U dapp_user -d dapp_db -t -c "
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = '$table_name' 
        AND table_schema = 'public'
        AND data_type IN ('text', 'varchar', 'character varying', 'json', 'jsonb')
        AND column_name NOT LIKE '%_encrypted'
        AND column_name NOT IN ('created_at', 'updated_at', 'id')
        ORDER BY ordinal_position;")
        
        echo "$unencrypted_columns" | while read -r column_name; do
            if [ -n "$column_name" ]; then
                echo "   üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏: $column_name"
                docker exec dapp-postgres psql -U dapp_user -d dapp_db -c "
                ALTER TABLE $table_name DROP COLUMN IF EXISTS $column_name;"
            fi
        done
    fi
done

echo "‚úÖ –ù–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —É–¥–∞–ª–µ–Ω—ã!"
EOF

chmod +x remove-unencrypted-columns.sh

echo ""
echo "üéØ –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:"
echo "1. ‚úÖ –°–æ–∑–¥–∞–Ω –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: ./ssl/keys/full_db_encryption.key"
echo "2. ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –≤ PostgreSQL"
echo "3. ‚úÖ –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –í–°–ï —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤–æ –í–°–ï–• —Ç–∞–±–ª–∏—Ü–∞—Ö"
echo "4. ‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: ./decrypt-all-tables.sh"
echo "5. ‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª–µ–Ω–∏—è: ./remove-unencrypted-columns.sh"
echo ""
echo "‚ö†Ô∏è  –í–ê–ñ–ù–û:"
echo "- –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: ./ssl/keys/full_db_encryption.key"
echo "- –•—Ä–∞–Ω–∏—Ç–µ –∫–ª—é—á –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!"
echo "- –°–¥–µ–ª–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∫–ª—é—á–∞!"
echo ""
echo "üîß –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É: ./decrypt-all-tables.sh"
echo "2. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"
echo "3. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–∏—Ç–µ –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: ./remove-unencrypted-columns.sh" 