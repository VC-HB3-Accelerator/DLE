const { execSshCommand } = require('./sshUtils');
const log = require('./logger');

/**
 * –û—á–∏—Å—Ç–∫–∞ VDS —Å–µ—Ä–≤–µ—Ä–∞
 */
const cleanupVdsServer = async (options) => {
  log.info('–û—á–∏—Å—Ç–∫–∞ VDS —Å–µ—Ä–≤–µ—Ä–∞...');
  
  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
  log.info('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...');
  await execSshCommand('sudo docker stop $(sudo docker ps -aq) 2>/dev/null || true', options);
  await execSshCommand('sudo docker rm $(sudo docker ps -aq) 2>/dev/null || true', options);
  
  // –£–¥–∞–ª–µ–Ω–∏–µ Docker –æ–±—Ä–∞–∑–æ–≤ –∏ –æ—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã
  log.info('–û—á–∏—Å—Ç–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤ –∏ —Å–∏—Å—Ç–µ–º—ã...');
  await execSshCommand('sudo docker system prune -af || true', options);
  await execSshCommand('sudo docker volume prune -f || true', options);
  await execSshCommand('sudo docker network prune -f || true', options);
  
  // üÜï –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ nginx –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø–æ—Ä—Ç–æ–≤
  log.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ nginx...');
  const nginxCheck = await execSshCommand('systemctl list-units --type=service --state=active,inactive | grep nginx || echo "nginx not found"', options);
  
  if (nginxCheck.stdout.includes('nginx.service')) {
    log.info('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π nginx - —É–¥–∞–ª—è–µ–º –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤ 80/443...');
    
    // –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ nginx
    await execSshCommand('sudo systemctl stop nginx || true', options);
    await execSshCommand('sudo systemctl disable nginx || true', options);
    await execSshCommand('sudo systemctl mask nginx || true', options);
    await execSshCommand('sudo pkill -f nginx || true', options);
    await execSshCommand('sudo apt-get purge -y nginx nginx-common nginx-full || true', options);
    await execSshCommand('sudo apt-get autoremove -y || true', options);
    
    log.success('‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π nginx –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω, –ø–æ—Ä—Ç—ã 80/443 –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã –¥–ª—è Docker nginx');
  } else {
    log.info('‚ÑπÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–π nginx –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω - –ø–æ—Ä—Ç—ã 80/443 —Å–≤–æ–±–æ–¥–Ω—ã –¥–ª—è Docker nginx');
  }
  
  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  log.info('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...');
  await execSshCommand('sudo systemctl stop apache2 2>/dev/null || true', options);
  await execSshCommand('sudo systemctl disable apache2 2>/dev/null || true', options);
  await execSshCommand('sudo systemctl mask apache2 2>/dev/null || true', options);
  
  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
  log.info('–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–∞–∫–µ—Ç–æ–≤...');
  await execSshCommand('sudo apt-get autoremove -y || true', options);
  await execSshCommand('sudo apt-get autoclean || true', options);
  
  // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  log.info('–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
  await execSshCommand('sudo rm -rf /tmp/* /var/tmp/* 2>/dev/null || true', options);
  
  log.success('VDS —Å–µ—Ä–≤–µ—Ä –æ—á–∏—â–µ–Ω');
};

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH –∫–ª—é—á–µ–π –¥–ª—è root
 */
const setupRootSshKeys = async (publicKey, options) => {
  log.info('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH –∫–ª—é—á–µ–π...');
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ .ssh –¥–ª—è root
  await execSshCommand('sudo mkdir -p /root/.ssh', options);
  await execSshCommand('sudo chmod 700 /root/.ssh', options);
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤ authorized_keys
  await execSshCommand(`echo "${publicKey}" | sudo tee -a /root/.ssh/authorized_keys`, options);
  await execSshCommand('sudo chmod 600 /root/.ssh/authorized_keys', options);
  await execSshCommand('sudo chown root:root /root/.ssh/authorized_keys', options);
  
  log.success('SSH –∫–ª—é—á–∏ —Å–æ–∑–¥–∞–Ω—ã –∏ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –¥–æ–±–∞–≤–ª–µ–Ω –≤ authorized_keys');
};

/**
 * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
const disablePasswordAuth = async (options) => {
  log.info('–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
  await execSshCommand('sudo sed -i "s/#PasswordAuthentication yes/PasswordAuthentication no/" /etc/ssh/sshd_config', options);
  await execSshCommand('sudo sed -i "s/PasswordAuthentication yes/PasswordAuthentication no/" /etc/ssh/sshd_config', options);
  await execSshCommand('sudo systemctl restart ssh', options);
  log.success('–ü–∞—Ä–æ–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞, –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ SSH –∫–ª—é—á–∏');
};

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall
 */
const setupFirewall = async (options) => {
  log.info('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall...');
  await execSshCommand('sudo ufw --force enable', options);
  await execSshCommand('sudo ufw allow ssh', options);
  await execSshCommand('sudo ufw allow 80', options);
  await execSshCommand('sudo ufw allow 443', options);
  log.success('Firewall –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
};

module.exports = {
  cleanupVdsServer,
  setupRootSshKeys,
  disablePasswordAuth,
  setupFirewall
};
