const { exec } = require('child_process');
const { promisify } = require('util');
const fs = require('fs-extra');
const { execSshCommand, execScpCommand } = require('./sshUtils');
const log = require('./logger');

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ CLI –∫–æ–º–∞–Ω–¥—ã
const execAsync = promisify(exec);

// –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ Docker –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
const ALLOWED_DOCKER_COMMANDS = [
  'docker save',
  'docker load', 
  'docker images',
  'docker ps',
  'docker run'
];

// –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
const validateDockerCommand = (command) => {
  return ALLOWED_DOCKER_COMMANDS.some(allowed => command.startsWith(allowed));
};

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Docker –∫–æ–º–∞–Ω–¥
const execDockerCommand = async (command) => {
  if (!validateDockerCommand(command)) {
    throw new Error(`Command not allowed: ${command}`);
  }
  return execAsync(command);
};

/**
 * –≠–∫—Å–ø–æ—Ä—Ç Docker –æ–±—Ä–∞–∑–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã
 */
const exportDockerImages = async (sendWebSocketLog) => {
  log.info('–≠–∫—Å–ø–æ—Ä—Ç Docker –æ–±—Ä–∞–∑–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö —Å —Ö–æ—Å—Ç–∞...');
  sendWebSocketLog('info', 'üì¶ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç Docker –æ–±—Ä–∞–∑–æ–≤...', 'export_images', 60);
  
  const images = [
    { name: 'postgres:16', file: 'dapp-postgres.tar' },
    { name: 'digital_legal_entitydle-ollama:latest', file: 'dapp-ollama.tar' },
    { name: 'digital_legal_entitydle-vector-search:latest', file: 'dapp-vector-search.tar' },
    { name: 'digital_legal_entitydle-backend:latest', file: 'dapp-backend.tar' },
    { name: 'digital_legal_entitydle-frontend:latest', file: 'dapp-frontend.tar' },
    { name: 'digital_legal_entitydle-frontend-nginx:latest', file: 'dapp-frontend-nginx.tar' },
    { name: 'digital_legal_entitydle-webssh-agent:latest', file: 'dapp-webssh-agent.tar' }
  ];
  
  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–∑—ã
  for (let i = 0; i < images.length; i++) {
    const image = images[i];
    const progress = 60 + Math.floor((i / images.length) * 10); // 60-70%
    sendWebSocketLog('info', `üì¶ –≠–∫—Å–ø–æ—Ä—Ç –æ–±—Ä–∞–∑–∞: ${image.name}`, 'export_images', progress);
    
    try {
      const outputPath = `/tmp/${image.file}`;
      
      // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ CLI
      await execDockerCommand(`docker save ${image.name} > ${outputPath}`);
      
      sendWebSocketLog('success', `‚úÖ –≠–∫—Å–ø–æ—Ä—Ç ${image.name} –∑–∞–≤–µ—Ä—à–µ–Ω`, 'export_images', progress);
    } catch (error) {
      log.error(`–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ ${image.name}: ${error.message}`);
      sendWebSocketLog('error', `‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ ${image.name}`, 'export_images', progress);
    }
  }
  
  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ volumes
  log.info('–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Docker volumes...');
  sendWebSocketLog('info', 'üì¶ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Docker volumes...', 'export_data', 70);
  
  // PostgreSQL –¥–∞–Ω–Ω—ã–µ
  sendWebSocketLog('info', 'üì¶ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö PostgreSQL...', 'export_data', 72);
  await exportVolumeData('digital_legal_entitydle_postgres_data', 'postgres_data.tar.gz', sendWebSocketLog, 72);
  
  // Ollama –¥–∞–Ω–Ω—ã–µ
  sendWebSocketLog('info', 'üì¶ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö Ollama...', 'export_data', 75);
  await exportVolumeData('digital_legal_entitydle_ollama_data', 'ollama_data.tar.gz', sendWebSocketLog, 75);
  
  // Vector Search –¥–∞–Ω–Ω—ã–µ
  sendWebSocketLog('info', 'üì¶ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö Vector Search...', 'export_data', 78);
  await exportVolumeData('digital_legal_entitydle_vector_search_data', 'vector_search_data.tar.gz', sendWebSocketLog, 78);
  
  // –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ —Å –í–°–ï–ú–ò –æ–±—Ä–∞–∑–∞–º–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  log.info('–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ Docker –æ–±—Ä–∞–∑–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ö–æ—Å—Ç–µ...');
  sendWebSocketLog('info', 'üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...', 'export_data', 80);
  
  try {
    const tarFiles = images.map(img => img.file).join(' ');
    const dataFiles = 'postgres_data.tar.gz ollama_data.tar.gz vector_search_data.tar.gz';
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —á–µ—Ä–µ–∑ CLI
    const archiveCommand = `cd /tmp && tar -czf docker-images-and-data.tar.gz ${tarFiles} ${dataFiles}`;
    await execDockerCommand(archiveCommand);
    
    sendWebSocketLog('success', '‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ', 'export_data', 80);
  } catch (error) {
    log.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: ' + error.message);
    sendWebSocketLog('error', '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞', 'export_data', 80);
  }
  
  log.success('Docker –æ–±—Ä–∞–∑—ã –∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
  sendWebSocketLog('success', '‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω', 'export_data', 80);
};

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö volume
 */
const exportVolumeData = async (volumeName, outputFile, sendWebSocketLog, progress) => {
  try {
    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ CLI —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º
    const exportCommand = `docker run --rm -v ${volumeName}:/data:ro -v /tmp:/backup alpine tar czf /backup/${outputFile} -C /data .`;
    await execDockerCommand(exportCommand);
    
    sendWebSocketLog('success', `‚úÖ –≠–∫—Å–ø–æ—Ä—Ç ${outputFile} –∑–∞–≤–µ—Ä—à–µ–Ω`, 'export_data', progress);
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ ${volumeName}: ${error.message}`);
    sendWebSocketLog('error', `‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ ${volumeName}`, 'export_data', progress);
  }
};

/**
 * –ü–µ—Ä–µ–¥–∞—á–∞ Docker –æ–±—Ä–∞–∑–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ VDS
 */
const transferDockerImages = async (options, sendWebSocketLog) => {
  const { dockerUser } = options;
  
  log.info('–ü–µ—Ä–µ–¥–∞—á–∞ Docker –æ–±—Ä–∞–∑–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ VDS...');
  sendWebSocketLog('info', 'üì§ –ü–µ—Ä–µ–¥–∞—á–∞ –∞—Ä—Ö–∏–≤–∞ –Ω–∞ VDS —Å–µ—Ä–≤–µ—Ä...', 'transfer', 82);
  
  // –ü–µ—Ä–µ–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –æ–±—Ä–∞–∑–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ VDS —á–µ—Ä–µ–∑ SCP
  await execScpCommand(
    '/tmp/docker-images-and-data.tar.gz',
    `/home/${dockerUser}/dapp/docker-images-and-data.tar.gz`,
    options
  );
  
  sendWebSocketLog('success', '‚úÖ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ VDS', 'transfer', 85);
  
  log.success('Docker –æ–±—Ä–∞–∑—ã –∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–∞ VDS');
};

/**
 * –ò–º–ø–æ—Ä—Ç Docker –æ–±—Ä–∞–∑–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ VDS
 */
const importDockerImages = async (options, sendWebSocketLog) => {
  const { dockerUser } = options;
  
  // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞ VDS
  sendWebSocketLog('info', 'üì• –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ VDS...', 'import', 85);
  
  const importScript = `#!/bin/bash
set -e
echo "üöÄ –ò–º–ø–æ—Ä—Ç Docker –æ–±—Ä–∞–∑–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ VDS..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä—Ö–∏–≤–∞
if [ ! -f "./docker-images-and-data.tar.gz" ]; then
    echo "‚ùå –§–∞–π–ª docker-images-and-data.tar.gz –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    exit 1
fi

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
mkdir -p ./temp-import

# –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
echo "üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞..."
tar -xzf ./docker-images-and-data.tar.gz -C ./temp-import

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –í–°–ï –æ–±—Ä–∞–∑—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
echo "üì¶ –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–∑–∞ postgres..."
docker load -i ./temp-import/dapp-postgres.tar

echo "üì¶ –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–∑–∞ ollama..."
docker load -i ./temp-import/dapp-ollama.tar

echo "üì¶ –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–∑–∞ vector-search..."
docker load -i ./temp-import/dapp-vector-search.tar

echo "üì¶ –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–∑–∞ backend..."
docker load -i ./temp-import/dapp-backend.tar

echo "üì¶ –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–∑–∞ frontend..."
docker load -i ./temp-import/dapp-frontend.tar

echo "üì¶ –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–∑–∞ frontend-nginx..."
docker load -i ./temp-import/dapp-frontend-nginx.tar

echo "üì¶ –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–∑–∞ webssh-agent..."
docker load -i ./temp-import/dapp-webssh-agent.tar

# üÜï –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ volumes —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è docker-compose
echo "üì¶ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö PostgreSQL..."
# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π volume –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
docker volume rm dapp_postgres_data 2>/dev/null || true
docker volume create dapp_postgres_data
docker run --rm -v dapp_postgres_data:/data -v ./temp-import:/backup alpine tar xzf /backup/postgres_data.tar.gz -C /data

echo "üì¶ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö Ollama..."
# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π volume –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
docker volume rm dapp_ollama_data 2>/dev/null || true
docker volume create dapp_ollama_data
docker run --rm -v dapp_ollama_data:/data -v ./temp-import:/backup alpine tar xzf /backup/ollama_data.tar.gz -C /data

echo "üì¶ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö Vector Search..."
# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π volume –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
docker volume rm dapp_vector_search_data 2>/dev/null || true
docker volume create dapp_vector_search_data
docker run --rm -v dapp_vector_search_data:/data -v ./temp-import:/backup alpine tar xzf /backup/vector_search_data.tar.gz -C /data

# –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
rm -rf ./temp-import

echo "‚úÖ –û–±—Ä–∞–∑—ã –∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!"
echo "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—Ä–∞–∑—ã:"
docker images | grep -E "digital_legal_entitydle|postgres"
echo "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ volumes:"
docker volume ls | grep dapp_`;

  await execSshCommand(`echo '${importScript}' | sudo tee /home/${dockerUser}/dapp/import-images-and-data.sh`, options);
  await execSshCommand(`sudo chmod +x /home/${dockerUser}/dapp/import-images-and-data.sh`, options);
  
  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–∑—ã –∏ –¥–∞–Ω–Ω—ã–µ
  log.info('–ò–º–ø–æ—Ä—Ç Docker –æ–±—Ä–∞–∑–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö...');
  sendWebSocketLog('info', 'üì• –ò–º–ø–æ—Ä—Ç Docker –æ–±—Ä–∞–∑–æ–≤ –Ω–∞ VDS...', 'import', 87);
  await execSshCommand(`cd /home/${dockerUser}/dapp && ./import-images-and-data.sh`, options);
  sendWebSocketLog('success', '‚úÖ –ò–º–ø–æ—Ä—Ç Docker –æ–±—Ä–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω', 'import', 90);
  
  sendWebSocketLog('info', 'üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ volumes...', 'import', 92);
  // –õ–æ–≥–∏ –æ—Ç —Å–∞–º–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –∏–º–ø–æ—Ä—Ç–∞ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã
  sendWebSocketLog('success', '‚úÖ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω', 'import', 95);
  
  log.success('Docker –æ–±—Ä–∞–∑—ã –∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ VDS');
};

/**
 * –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ
 */
const cleanupLocalFiles = async () => {
  log.info('–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Ö–æ—Å—Ç–µ...');
  try {
    await fs.remove('/tmp/dapp-*.tar');
    await fs.remove('/tmp/*_data.tar.gz');
    await fs.remove('/tmp/docker-images-and-data.tar.gz');
    log.success('–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã');
  } catch (error) {
    log.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤: ' + error.message);
  }
};

module.exports = {
  exportDockerImages,
  transferDockerImages,
  importDockerImages,
  cleanupLocalFiles
};
