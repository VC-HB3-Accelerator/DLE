const { execSshCommand } = require('./sshUtils');
const log = require('./logger');

// –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
const SYSTEM_REQUIREMENTS = {
  minMemoryGB: 6,        // –ú–∏–Ω–∏–º—É–º 6GB RAM (Ollama —Ç—Ä–µ–±—É–µ—Ç 4GB + —Å–∏—Å—Ç–µ–º–∞)
  minDiskGB: 30,         // –ú–∏–Ω–∏–º—É–º 30GB —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ (AI –º–æ–¥–µ–ª–∏ + Docker –æ–±—Ä–∞–∑—ã)
  minCpuCores: 2,        // –ú–∏–Ω–∏–º—É–º 2 CPU —è–¥—Ä–∞
  recommendedMemoryGB: 8, // –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 8GB RAM (–¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã)
  recommendedDiskGB: 50   // –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 50GB —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π VDS
 */
const checkSystemRequirements = async (options) => {
  log.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π VDS...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
    log.info('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏...');
    const memoryResult = await execSshCommand('free -h | grep "Mem:" | awk \'{print $2}\'', options);
    const memoryStr = memoryResult.stdout.trim().replace('G', '').replace('Gi', '');
    const memoryGB = parseFloat(memoryStr);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–∞
    log.info('üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–∞...');
    const diskResult = await execSshCommand('df -h / | tail -1 | awk \'{print $4}\'', options);
    const diskStr = diskResult.stdout.trim().replace('G', '').replace('Gi', '');
    const diskGB = parseFloat(diskStr);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ CPU
    log.info('‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ CPU...');
    const cpuResult = await execSshCommand('nproc', options);
    const cpuCores = parseInt(cpuResult.stdout.trim());
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    log.info('üèóÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...');
    const archResult = await execSshCommand('uname -m', options);
    const architecture = archResult.stdout.trim();
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    const archInfoResult = await execSshCommand('uname -a', options);
    log.info(`–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ (uname -m): "${architecture}"`);
    log.info(`–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (uname -a): "${archInfoResult.stdout.trim()}"`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Ubuntu
    log.info('üêß –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Ubuntu...');
    const ubuntuResult = await execSshCommand('lsb_release -d | cut -f2', options);
    const ubuntuVersion = ubuntuResult.stdout.trim();
    
    const systemInfo = {
      memoryGB: memoryGB,
      diskGB: diskGB,
      cpuCores: cpuCores,
      architecture: architecture,
      ubuntuVersion: ubuntuVersion
    };
    
    log.info(`üìã –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:`);
    log.info(`   üíæ –ü–∞–º—è—Ç—å: ${memoryGB}GB (–º–∏–Ω–∏–º—É–º: ${SYSTEM_REQUIREMENTS.minMemoryGB}GB, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: ${SYSTEM_REQUIREMENTS.recommendedMemoryGB}GB)`);
    log.info(`   üíø –î–∏—Å–∫: ${diskGB}GB —Å–≤–æ–±–æ–¥–Ω–æ (–º–∏–Ω–∏–º—É–º: ${SYSTEM_REQUIREMENTS.minDiskGB}GB, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: ${SYSTEM_REQUIREMENTS.recommendedDiskGB}GB)`);
    log.info(`   ‚ö° CPU: ${cpuCores} —è–¥–µ—Ä (–º–∏–Ω–∏–º—É–º: ${SYSTEM_REQUIREMENTS.minCpuCores})`);
    log.info(`   üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ${architecture}`);
    log.info(`   üêß Ubuntu: ${ubuntuVersion}`);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    const warnings = [];
    const errors = [];
    
    if (memoryGB < SYSTEM_REQUIREMENTS.minMemoryGB) {
      errors.push(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏: ${memoryGB}GB (—Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º ${SYSTEM_REQUIREMENTS.minMemoryGB}GB)`);
    } else if (memoryGB < SYSTEM_REQUIREMENTS.recommendedMemoryGB) {
      warnings.push(`–ú–∞–ª–æ –ø–∞–º—è—Ç–∏: ${memoryGB}GB (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è ${SYSTEM_REQUIREMENTS.recommendedMemoryGB}GB)`);
    }
    
    if (diskGB < SYSTEM_REQUIREMENTS.minDiskGB) {
      errors.push(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: ${diskGB}GB (—Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º ${SYSTEM_REQUIREMENTS.minDiskGB}GB)`);
    } else if (diskGB < SYSTEM_REQUIREMENTS.recommendedDiskGB) {
      warnings.push(`–ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: ${diskGB}GB (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è ${SYSTEM_REQUIREMENTS.recommendedDiskGB}GB)`);
    }
    
    if (cpuCores < SYSTEM_REQUIREMENTS.minCpuCores) {
      errors.push(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ CPU —è–¥–µ—Ä: ${cpuCores} (—Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º ${SYSTEM_REQUIREMENTS.minCpuCores})`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã)
    const supportedArchitectures = [
      'x86_64', 'amd64', 'x64',           // Intel/AMD 64-bit
      'aarch64', 'arm64',                 // ARM 64-bit
      'armv7l', 'armv8l',                 // ARM 32/64-bit
      'i386', 'i686',                     // Intel 32-bit
      'ppc64le', 's390x'                  // PowerPC, IBM Z
    ];
    const isSupportedArch = supportedArchitectures.some(arch => 
      architecture.toLowerCase().includes(arch.toLowerCase())
    );
    
    if (!isSupportedArch) {
      // –í–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏ –¥–µ–ª–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä
      warnings.push(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ${architecture} (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: x86_64, amd64, aarch64, arm64, armv7l, armv8l, i386, i686, ppc64le, s390x)`);
      log.warn(`‚ö†Ô∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ ${architecture} –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö, –Ω–æ –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...`);
    }
    
    // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (warnings.length > 0) {
      log.warn('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:');
      warnings.forEach(warning => log.warn(`   ${warning}`));
    }
    
    if (errors.length > 0) {
      log.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:');
      errors.forEach(error => log.error(`   ${error}`));
      throw new Error(`VDS –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º: ${errors.join(', ')}`);
    }
    
    if (warnings.length === 0 && errors.length === 0) {
      log.success('‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
    } else {
      log.warn('‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é');
    }
    
    return {
      systemInfo,
      warnings,
      errors,
      isCompatible: errors.length === 0,
      hasWarnings: warnings.length > 0
    };
    
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π: ${error.message}`);
    throw error;
  }
};

module.exports = {
  checkSystemRequirements,
  SYSTEM_REQUIREMENTS
};
