const { exec } = require('child_process');
const log = require('./logger');

/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
const fixSshPermissions = async () => {
  return new Promise((resolve) => {
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ SSH –∫–æ–Ω—Ñ–∏–≥—É
    exec('chown root:root /root/.ssh/config 2>/dev/null || true && chmod 600 /root/.ssh/config 2>/dev/null || true', (error) => {
      if (error) {
        log.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ SSH –∫–æ–Ω—Ñ–∏–≥—É: ' + error.message);
      } else {
        log.info('–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ SSH –∫–æ–Ω—Ñ–∏–≥—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã');
      }
      resolve();
    });
  });
};

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SSH –∫–æ–º–∞–Ω–¥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–ª—é—á–µ–π –∏ –ø–∞—Ä–æ–ª—è
 */
const execSshCommand = async (command, options = {}) => {
  const {
    sshHost,
    sshPort = 22,
    sshConnectUser,
    sshConnectPassword,
    vdsIp
  } = options;
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ SSH –∫–æ–Ω—Ñ–∏–≥—É –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã
  await fixSshPermissions();
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å SSH –∫–ª—é—á–∞–º–∏ (–±–µ–∑ BatchMode –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ fallback –Ω–∞ –ø–∞—Ä–æ–ª—å)
  let sshCommand = `ssh -p ${sshPort} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${sshConnectUser}@${sshHost || vdsIp} "${command.replace(/"/g, '\\"')}"`;
  
  log.info(`üîç –í—ã–ø–æ–ª–Ω—è–µ–º SSH –∫–æ–º–∞–Ω–¥—É: ${sshCommand}`);
  
  return new Promise((resolve) => {
    exec(sshCommand, (error, stdout, stderr) => {
      log.info(`üì§ SSH —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –∫–æ–¥: ${error ? error.code : 0}, stdout: "${stdout}", stderr: "${stderr}"`);
      
      if (error && error.code === 255 && sshConnectPassword) {
        // –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –∫–ª—é—á–∞–º–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º —Å –ø–∞—Ä–æ–ª–µ–º
        log.info('SSH –∫–ª—é—á–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–±—É–µ–º —Å –ø–∞—Ä–æ–ª–µ–º...');
        const passwordCommand = `sshpass -p "${sshConnectPassword}" ssh -p ${sshPort} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${sshConnectUser}@${sshHost || vdsIp} "${command.replace(/"/g, '\\"')}"`;
        
        log.info(`üîç –í—ã–ø–æ–ª–Ω—è–µ–º SSH –∫–æ–º–∞–Ω–¥—É —Å –ø–∞—Ä–æ–ª–µ–º: ${passwordCommand}`);
        
        exec(passwordCommand, (passwordError, passwordStdout, passwordStderr) => {
          log.info(`üì§ SSH —Å –ø–∞—Ä–æ–ª–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –∫–æ–¥: ${passwordError ? passwordError.code : 0}, stdout: "${passwordStdout}", stderr: "${passwordStderr}"`);
          resolve({
            code: passwordError ? passwordError.code : 0,
            stdout: passwordStdout || '',
            stderr: passwordStderr || ''
          });
        });
      } else {
        resolve({
          code: error ? error.code : 0,
          stdout: stdout || '',
          stderr: stderr || ''
        });
      }
    });
  });
};

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SCP –∫–æ–º–∞–Ω–¥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–ª—é—á–µ–π –∏ –ø–∞—Ä–æ–ª—è
 */
const execScpCommand = async (sourcePath, targetPath, options = {}) => {
  const {
    sshHost,
    sshPort = 22,
    sshConnectUser,
    sshConnectPassword,
    vdsIp
  } = options;
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ SSH –∫–æ–Ω—Ñ–∏–≥—É –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã
  await fixSshPermissions();
  
  const scpCommand = `scp -P ${sshPort} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${sourcePath} ${sshConnectUser}@${sshHost || vdsIp}:${targetPath}`;
  
  return new Promise((resolve) => {
    exec(scpCommand, (error, stdout, stderr) => {
      if (error && error.code === 255 && sshConnectPassword) {
        // –ï—Å–ª–∏ SCP —Å –∫–ª—é—á–∞–º–∏ –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–±—É–µ–º —Å –ø–∞—Ä–æ–ª–µ–º
        log.info('SCP —Å –∫–ª—é—á–∞–º–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —Å –ø–∞—Ä–æ–ª–µ–º...');
        const passwordScpCommand = `sshpass -p "${sshConnectPassword}" scp -P ${sshPort} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${sourcePath} ${sshConnectUser}@${sshHost || vdsIp}:${targetPath}`;
        
        exec(passwordScpCommand, (passwordError, passwordStdout, passwordStderr) => {
          if (passwordError) {
            log.error('‚ùå –û—à–∏–±–∫–∞ SCP: ' + passwordError.message);
          } else {
            log.success('‚úÖ SCP —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω');
          }
          resolve({
            code: passwordError ? passwordError.code : 0,
            stdout: passwordStdout || '',
            stderr: passwordStderr || ''
          });
        });
      } else {
        if (error) {
          log.error('‚ùå –û—à–∏–±–∫–∞ SCP: ' + error.message);
        } else {
          log.success('‚úÖ SCP —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω');
        }
        resolve({
          code: error ? error.code : 0,
          stdout: stdout || '',
          stderr: stderr || ''
        });
      }
    });
  });
};

module.exports = {
  execSshCommand,
  execScpCommand,
  fixSshPermissions
};
