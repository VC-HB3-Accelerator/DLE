const express = require('express');
const cors = require('cors');
const { exec } = require('child_process');
const fs = require('fs-extra');
const path = require('path');
const http = require('http');
const WebSocket = require('ws');

// –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç
const log = require('./utils/logger');
const { execSshCommand, execScpCommand } = require('./utils/sshUtils');
const { checkSystemRequirements, SYSTEM_REQUIREMENTS } = require('./utils/systemUtils');
const { exportDockerImages, transferDockerImages, importDockerImages, cleanupLocalFiles } = require('./utils/dockerUtils');
const { createAllUsers } = require('./utils/userUtils');
const { cleanupVdsServer, setupRootSshKeys, disablePasswordAuth, setupFirewall } = require('./utils/cleanupUtils');
const { createSshKeys } = require('./utils/localUtils');

const app = express();
const server = http.createServer(app);
const PORT = process.env.PORT || 3000;

// WebSocket —Å–µ—Ä–≤–µ—Ä
const wss = new WebSocket.Server({ 
  server,
  cors: {
    origin: ['http://localhost:5173', 'http://localhost:8000', 'http://127.0.0.1:5173', 'http://127.0.0.1:8000'],
    credentials: true
  }
});

// Middleware
app.use(cors({
  origin: ['http://localhost:5173', 'http://localhost:8000', 'http://127.0.0.1:5173', 'http://127.0.0.1:8000'],
  credentials: true
}));
app.use(express.json({ limit: '10mb' }));

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
const logRequest = (req, res, next) => {
  const timestamp = new Date().toISOString();
  const ip = req.ip || req.connection.remoteAddress;
  log.info(`[${timestamp}] ${req.method} ${req.url} from ${ip}`);
  next();
};

app.use(logRequest);

// –°–æ—Å—Ç–æ—è–Ω–∏–µ VDS
let vdsState = {
  configured: false,
  domain: null,
  vdsIp: null
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ WebSocket
const sendWebSocketLog = (type, message, stage = null, percentage = null) => {
  const logData = {
    type: 'webssh_log',
    logType: type,
    message,
    timestamp: new Date().toISOString()
  };
  
  if (stage) {
    logData.stage = stage;
  }
  
  if (percentage !== null) {
    logData.percentage = percentage;
  }
  
  broadcastToWebSocket(logData);
  
  // –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å, –µ—Å–ª–∏ –µ—Å—Ç—å stage
  if (stage) {
    broadcastToWebSocket({
      type: 'webssh_progress',
      stage,
      message,
      percentage,
      timestamp: new Date().toISOString()
    });
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ WebSocket
const sendWebSocketStatus = (connected, message = null) => {
  broadcastToWebSocket({
    type: 'webssh_status',
    connected,
    status: connected ? 'connected' : 'disconnected',
    message,
    timestamp: new Date().toISOString()
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º WebSocket –∫–ª–∏–µ–Ω—Ç–∞–º
const broadcastToWebSocket = (data) => {
  const message = JSON.stringify(data);
  wss.clients.forEach((client) => {
    if (client.readyState === WebSocket.OPEN) {
      client.send(message);
    }
  });
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∞–≥–µ–Ω—Ç–∞
app.get('/health', (req, res) => {
  log.info('Health check requested');
  res.json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    version: '1.0.0',
    vdsConfigured: vdsState.configured,
    vdsDomain: vdsState.domain
  });
});

// –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π VDS
app.post('/vds/check-requirements', logRequest, async (req, res) => {
  try {
    const { 
      vdsIp, 
      ubuntuUser, 
      sshHost,
      sshPort = 22,
      sshConnectUser,
      sshConnectPassword
    } = req.body;
    
    if (!vdsIp || !ubuntuUser || !sshConnectUser || !sshConnectPassword) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: vdsIp, ubuntuUser, sshConnectUser, sshConnectPassword'
      });
    }
    
    log.info(`–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π VDS: ${vdsIp}`);
    
    const options = {
      vdsIp,
      sshHost,
      sshPort,
      sshConnectUser,
      sshConnectPassword
    };
    
    const result = await checkSystemRequirements(options);
    
    res.json({
      success: result.isCompatible,
      message: result.isCompatible 
        ? (result.hasWarnings ? 'VDS —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º, –Ω–æ –µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è' : 'VDS –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º')
        : 'VDS –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º',
      systemInfo: result.systemInfo,
      requirements: SYSTEM_REQUIREMENTS,
      warnings: result.warnings,
      errors: result.errors,
      isCompatible: result.isCompatible,
      hasWarnings: result.hasWarnings
    });
    
  } catch (error) {
    log.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π: ' + error.message);
    res.status(500).json({
      success: false,
      message: error.message
    });
  }
});

// –ü–µ—Ä–µ–¥–∞—á–∞ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ VDS
app.post('/vds/transfer-encryption-key', logRequest, async (req, res) => {
  try {
    const { 
      vdsIp, 
      dockerUser, 
      sshUser, 
      sshHost,
      sshPort = 22,
      sshConnectUser,
      sshConnectPassword
    } = req.body;
    
    if (!vdsIp || !dockerUser || !sshConnectUser || !sshConnectPassword) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: vdsIp, dockerUser, sshConnectUser, sshConnectPassword'
      });
    }
    
    log.info(`üîê –ü–µ—Ä–µ–¥–∞—á–∞ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ VDS: ${vdsIp}`);
    
    const options = {
      vdsIp,
      sshHost,
      sshPort,
      sshConnectUser,
      sshConnectPassword
    };
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫–ª—é—á–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ VDS
    log.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è...');
    const dirCheckResult = await execSshCommand(`ls -la /home/${dockerUser}/dapp/ssl/keys/`, options);
    
    if (dirCheckResult.code !== 0) {
      log.error('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ VDS');
      return res.status(500).json({
        success: false,
        message: '–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ VDS. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É VDS.'
      });
    }
    
    // 2. –ß–∏—Ç–∞–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã
    log.info('üìñ –ß—Ç–µ–Ω–∏–µ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã...');
    const encryptionKeyPath = '/home/alex/Digital_Legal_Entity(DLE)/ssl/keys/full_db_encryption.key';
    
    try {
      const encryptionKeyContent = await fs.readFile(encryptionKeyPath, 'utf8');
      log.success('‚úÖ –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—á–∏—Ç–∞–Ω —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã');
      
      // 3. –ü–µ—Ä–µ–¥–∞–µ–º –∫–ª—é—á –Ω–∞ VDS —á–µ—Ä–µ–∑ SSH
      log.info('üì§ –ü–µ—Ä–µ–¥–∞—á–∞ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ VDS...');
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –∫–ª—é—á–æ–º
      const tempKeyPath = `/tmp/encryption_key_${Date.now()}.key`;
      await fs.writeFile(tempKeyPath, encryptionKeyContent);
      
      // –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–∞–π–ª –Ω–∞ VDS —á–µ—Ä–µ–∑ SCP –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
      await execScpCommand(
        tempKeyPath,
        `/home/${dockerUser}/dapp/ssl/keys/full_db_encryption.key`,
        options
      );
      
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      await fs.remove(tempKeyPath);
      
      // 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª—é—á—É –Ω–∞ VDS
      log.info('üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª—é—á—É —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è...');
      await execSshCommand(`sudo chown ${dockerUser}:${dockerUser} /home/${dockerUser}/dapp/ssl/keys/full_db_encryption.key`, options);
      await execSshCommand(`sudo chmod 600 /home/${dockerUser}/dapp/ssl/keys/full_db_encryption.key`, options);
      
      // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω
      const verifyResult = await execSshCommand(`ls -la /home/${dockerUser}/dapp/ssl/keys/full_db_encryption.key`, options);
      
      if (verifyResult.code === 0) {
        log.success('‚úÖ –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω –Ω–∞ VDS');
        
        res.json({
          success: true,
          message: '–ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ VDS',
          vdsIp: vdsIp,
          keyPath: `/home/${dockerUser}/dapp/ssl/keys/full_db_encryption.key`,
          nextSteps: [
            '‚úÖ –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ VDS',
            '‚úÖ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã',
            '‚úÖ VDS –≥–æ—Ç–æ–≤–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º'
          ]
        });
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è');
      }
      
    } catch (error) {
      log.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: ' + error.message);
      return res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: ' + error.message
      });
    }
    
  } catch (error) {
    log.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ VDS: ' + error.message);
    res.status(500).json({
      success: false,
      message: error.message
    });
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ VDS
app.post('/vds/setup', logRequest, async (req, res) => {
  try {
    const { 
      vdsIp, 
      domain, 
      email, 
      ubuntuUser, 
      dockerUser, 
      sshUser, 
      sshHost,
      sshPort = 22,
      sshConnectUser,
      sshConnectPassword
    } = req.body;
    
    log.info(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ VDS: ${vdsIp} –¥–ª—è –¥–æ–º–µ–Ω–∞: ${domain}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ WebSocket
    sendWebSocketStatus(false, '–ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É VDS...');
    sendWebSocketLog('info', `üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É VDS: ${vdsIp} –¥–ª—è –¥–æ–º–µ–Ω–∞: ${domain}`, 'init', 0);
    
    const options = {
      vdsIp,
      sshHost,
      sshPort,
      sshConnectUser,
      sshConnectPassword
    };
    
    // 0. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    sendWebSocketLog('info', 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π VDS...', 'requirements', 5);
    const systemResult = await checkSystemRequirements(options);
    const systemInfo = systemResult.systemInfo;
    sendWebSocketLog('success', '‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã', 'requirements', 10);
    
    // 1. –°–æ–∑–¥–∞–Ω–∏–µ SSH –∫–ª—é—á–µ–π –ª–æ–∫–∞–ª—å–Ω–æ (–Ω–∞ —Ö–æ—Å—Ç–µ)
    sendWebSocketLog('info', 'üîë –°–æ–∑–¥–∞–Ω–∏–µ SSH –∫–ª—é—á–µ–π...', 'ssh_keys', 15);
    await createSshKeys(email);
    sendWebSocketLog('success', '‚úÖ SSH –∫–ª—é—á–∏ —Å–æ–∑–¥–∞–Ω—ã', 'ssh_keys', 20);
    
    // –ß–∏—Ç–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —Å —Ö–æ—Å—Ç–∞
    const publicKeyContent = await fs.readFile('/root/.ssh/id_rsa.pub', 'utf8');
    const publicKeyLine = publicKeyContent.trim();
    
    // 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH –∫–ª—é—á–µ–π –¥–ª—è root
    await setupRootSshKeys(publicKeyLine, options);
    
    // 3. –û—á–∏—Å—Ç–∫–∞ VDS —Å–µ—Ä–≤–µ—Ä–∞
    sendWebSocketLog('info', 'üßπ –û—á–∏—Å—Ç–∫–∞ VDS —Å–µ—Ä–≤–µ—Ä–∞...', 'cleanup', 30);
    await cleanupVdsServer(options);
    sendWebSocketLog('success', '‚úÖ VDS —Å–µ—Ä–≤–µ—Ä –æ—á–∏—â–µ–Ω', 'cleanup', 35);
    
    // 4. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    sendWebSocketLog('info', 'üë• –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...', 'users', 40);
    await createAllUsers(ubuntuUser, dockerUser, publicKeyLine, options);
    sendWebSocketLog('success', '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã', 'users', 45);
    
    // 5. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
    sendWebSocketLog('info', 'üê≥ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker...', 'docker', 50);
    log.info('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker...');
    await execSshCommand('curl -fsSL https://get.docker.com -o get-docker.sh', options);
    await execSshCommand('sudo sh get-docker.sh', options);
    await execSshCommand(`sudo usermod -aG docker ${dockerUser}`, options);
    sendWebSocketLog('success', '‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'docker', 55);
    
    // 6. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose
    await execSshCommand('sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose', options);
    await execSshCommand('sudo chmod +x /usr/local/bin/docker-compose', options);
    
    // 7. –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    await disablePasswordAuth(options);
    
    // 8. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall
    await setupFirewall(options);
    
    // 8.1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ fail2ban –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç SSH –∞—Ç–∞–∫
    log.info('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ fail2ban –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç SSH –∞—Ç–∞–∫...');
    await execSshCommand('sudo apt-get install -y fail2ban', options);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ fail2ban –¥–ª—è SSH —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏
    const fail2banConfig = `[sshd]
enabled = true
port = ssh
filter = sshd
logpath = /var/log/auth.log
maxretry = 50
bantime = 3600
findtime = 3600

        [nginx-http-auth]
        enabled = true
        filter = nginx-http-auth
        logpath = /var/lib/docker/containers/*/docker-nginx-*.log
        maxretry = 3
        bantime = 3600`;
    
    await execSshCommand(`echo '${fail2banConfig}' | sudo tee /etc/fail2ban/jail.local`, options);
    await execSshCommand('sudo systemctl enable fail2ban', options);
    await execSshCommand('sudo systemctl start fail2ban', options);
    log.success('fail2ban –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç SSH –∞—Ç–∞–∫');
    
    // 9. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–ª—é—á–µ–π —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    await execSshCommand(`sudo mkdir -p /home/${dockerUser}/dapp/ssl/keys`, options);
    await execSshCommand(`sudo chmod 700 /home/${dockerUser}/dapp/ssl/keys`, options);
    await execSshCommand(`sudo chown ${dockerUser}:${dockerUser} /home/${dockerUser}/dapp/ssl/keys`, options);
    log.success('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞');
    
    // 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ nginx –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø–æ—Ä—Ç–æ–≤
    log.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ nginx...');
    const nginxCheck = await execSshCommand('systemctl list-units --type=service --state=active,inactive | grep nginx || echo "nginx not found"', options);
    
    if (nginxCheck.stdout.includes('nginx.service')) {
      log.info('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π nginx - —É–¥–∞–ª—è–µ–º –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤ 80/443...');
      
      // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ nginx
      await execSshCommand('sudo systemctl stop nginx || true', options);
      await execSshCommand('sudo systemctl disable nginx || true', options);
      await execSshCommand('sudo systemctl mask nginx || true', options);
      await execSshCommand('sudo pkill -f nginx || true', options);
      await execSshCommand('sudo apt-get purge -y nginx nginx-common nginx-full || true', options);
      await execSshCommand('sudo apt-get autoremove -y || true', options);
      
      log.success('‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π nginx –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω, –ø–æ—Ä—Ç—ã 80/443 –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã –¥–ª—è Docker nginx');
    } else {
      log.info('‚ÑπÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–π nginx –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω - –ø–æ—Ä—Ç—ã 80/443 —Å–≤–æ–±–æ–¥–Ω—ã –¥–ª—è Docker nginx');
    }
    
    // 11. –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ frontend-nginx
    log.info('üîí –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...');
    await execSshCommand(`sudo mkdir -p /etc/letsencrypt/live/${domain}`, options);
    await execSshCommand(`sudo mkdir -p /var/www/certbot`, options);
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    const tempCertCommand = `sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/letsencrypt/live/${domain}/privkey.pem -out /etc/letsencrypt/live/${domain}/fullchain.pem -subj '/C=US/ST=State/L=City/O=Organization/CN=${domain}'`;
    await execSshCommand(tempCertCommand, options);
    log.success('–í—Ä–µ–º–µ–Ω–Ω—ã–π SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω');
    
    // 12. –ü–µ—Ä–µ–¥–∞—á–∞ docker-compose.prod.yml –Ω–∞ VDS
    log.info('–ü–µ—Ä–µ–¥–∞—á–∞ docker-compose.prod.yml –Ω–∞ VDS...');
    await execScpCommand('/app/docker-compose.prod.yml', `/home/${dockerUser}/dapp/docker-compose.prod.yml`, options);
    
    // 13.1. üÜï Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–∞ –≤ Docker –æ–±—Ä–∞–∑ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    log.info('Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–∞ –≤ Docker –æ–±—Ä–∞–∑ frontend-nginx');
    log.info('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è nginx
    if (!domain || !email) {
      log.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ DOMAIN –∏–ª–∏ EMAIL –¥–ª—è nginx');
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ DOMAIN –∏ EMAIL –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ nginx');
    }
    
    log.success(`Nginx –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –¥–æ–º–µ–Ω–∞: ${domain} —Å email: ${email}`);
    
    // 14. üÜï –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ .env —Ñ–∞–π–ª–∞ —Å–æ –≤—Å–µ–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const envContent = `# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
DOMAIN=${domain}
BACKEND_CONTAINER=dapp-backend
EMAIL=${email}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_NAME=dapp_db
DB_USER=dapp_user
DB_PASSWORD=dapp_password

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Node.js
NODE_ENV=production
PORT=8000

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Ollama
OLLAMA_MODEL=qwen2.5:7b
OLLAMA_EMBEDDINGS_MODEL=qwen2.5:7b

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
SSL_CERT_PATH=/etc/ssl/certs
SSL_KEY_PATH=/etc/ssl/private

# üÜï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è WebSocket
WS_BACKEND_CONTAINER=dapp-backend`;
    
    // –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ –∏ –ø–µ—Ä–µ–¥–∞–µ–º —á–µ—Ä–µ–∑ SCP
    await fs.writeFile('/tmp/.env', envContent);
    await execScpCommand('/tmp/.env', `/home/${dockerUser}/dapp/.env`, options);
    await fs.remove('/tmp/.env'); // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    
    // 15. –≠–∫—Å–ø–æ—Ä—Ç –∏ –ø–µ—Ä–µ–¥–∞—á–∞ Docker –æ–±—Ä–∞–∑–æ–≤
    await exportDockerImages(sendWebSocketLog);
    await transferDockerImages({ ...options, dockerUser }, sendWebSocketLog);
    await importDockerImages({ ...options, dockerUser }, sendWebSocketLog);
    await cleanupLocalFiles();
    
    // 16. –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    log.info('–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    await execSshCommand(`cd /home/${dockerUser}/dapp && sudo docker compose -f docker-compose.prod.yml up -d`, options);
    
    // 16.1. üÜï –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ nginx –¥–ª—è API
    log.info('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ nginx –¥–ª—è API...');
    await execSshCommand(`cd /home/${dockerUser}/dapp && sudo docker compose -f docker-compose.prod.yml exec frontend-nginx sed -i '/add_header X-XSS-Protection/a\\            add_header Access-Control-Allow-Origin \"https://${domain}\" always;\\            add_header Access-Control-Allow-Methods \"GET, POST, PUT, DELETE, OPTIONS\" always;\\            add_header Access-Control-Allow-Headers \"Content-Type, Authorization, X-Requested-With\" always;\\            add_header Access-Control-Allow-Credentials \"true\" always;' /etc/nginx/nginx.conf`, options);
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º nginx —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    await execSshCommand(`cd /home/${dockerUser}/dapp && sudo docker compose -f docker-compose.prod.yml restart frontend-nginx`, options);
    log.success('‚úÖ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ nginx –¥–ª—è API');
    
    // 16.0. üÜï –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —á–µ—Ä–µ–∑ Let's Encrypt (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    log.info('–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —á–µ—Ä–µ–∑ Let\'s Encrypt...');
    
    // –ü–æ–ª—É—á–∞–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —á–µ—Ä–µ–∑ certbot
    const certbotResult = await execSshCommand(`cd /home/${dockerUser}/dapp && sudo docker compose -f docker-compose.prod.yml run --rm certbot`, options);
    
    if (certbotResult.code === 0) {
      log.success('–†–µ–∞–ª—å–Ω—ã–π SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω');
    } else {
      log.warn('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: ' + certbotResult.stderr);
      log.info('–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç');
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    log.info('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...');
    const renewScript = `#!/bin/bash
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ Docker certbot
cd /home/${dockerUser}/dapp
echo "$(date): –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..." >> /var/log/ssl-renewal.log
docker compose -f docker-compose.prod.yml run --rm certbot renew 2>&1 | tee -a /var/log/ssl-renewal.log
if [ $? -eq 0 ]; then
    echo "$(date): SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ nginx..." >> /var/log/ssl-renewal.log
    docker compose -f docker-compose.prod.yml restart frontend-nginx
else
    echo "$(date): –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤" >> /var/log/ssl-renewal.log
fi
`;
    await execSshCommand(`echo '${renewScript}' | sudo tee /home/${dockerUser}/dapp/renew-ssl.sh`, options);
    await execSshCommand(`sudo chmod +x /home/${dockerUser}/dapp/renew-ssl.sh`, options);
    await execSshCommand(`echo "0 12 * * * /home/${dockerUser}/dapp/renew-ssl.sh" | sudo crontab -`, options);
    log.success('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ Docker –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 12:00)');
    
    // 16.1. üÜï –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    log.info('–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    let dbReady = false;
    let attempts = 0;
    const maxAttempts = 30;
    
    while (!dbReady && attempts < maxAttempts) {
      const dbCheckResult = await execSshCommand(`cd /home/${dockerUser}/dapp && sudo docker compose -f docker-compose.prod.yml exec -T postgres pg_isready -U dapp_user -d dapp_db`, options);
      if (dbCheckResult.code === 0) {
        dbReady = true;
        log.success('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
      } else {
        attempts++;
        log.info(`–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ë–î... –ø–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts}`);
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }
    
    if (!dbReady) {
      log.error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞ –ø–æ—Å–ª–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫');
    }
    
    // 16.2. üÜï –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    log.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    const tableCheckResult = await execSshCommand(`cd /home/${dockerUser}/dapp && sudo docker compose -f docker-compose.prod.yml exec -T postgres psql -U dapp_user -d dapp_db -c "\\dt"`, options);
    
    if (tableCheckResult.code === 0 && tableCheckResult.stdout.includes('email_settings')) {
      log.success('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã (email_settings –Ω–∞–π–¥–µ–Ω–∞)');
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–∞–±–ª–∏—Ü
      const tableCountResult = await execSshCommand(`cd /home/${dockerUser}/dapp && sudo docker compose -f docker-compose.prod.yml exec -T postgres psql -U dapp_user -d dapp_db -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';"`, options);
      if (tableCountResult.code === 0) {
        log.info(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${tableCountResult.stdout.trim()}`);
      }
    } else {
      log.warn('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω–æ–π');
      log.info('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü: ' + tableCheckResult.stdout);
    }
    
    // 16.3. üÜï –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ backend
    log.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –≤ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ...');
    const keyCheckResult = await execSshCommand(`cd /home/${dockerUser}/dapp && sudo docker compose -f docker-compose.prod.yml exec -T backend ls -la /app/ssl/keys/`, options);
    
    if (keyCheckResult.code === 0 && keyCheckResult.stdout.includes('full_db_encryption.key')) {
      log.success('–ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω –≤ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ');
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–ª—é—á–∞
      const keyContentResult = await execSshCommand(`cd /home/${dockerUser}/dapp && sudo docker compose -f docker-compose.prod.yml exec -T backend head -c 50 /app/ssl/keys/full_db_encryption.key`, options);
      if (keyContentResult.code === 0) {
        log.info('–ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ');
      }
    } else {
      log.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ');
      log.info('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ /app/ssl/keys/: ' + keyCheckResult.stdout);
      log.info('–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞...');
      
      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      await execSshCommand(`cd /home/${dockerUser}/dapp && sudo docker compose -f docker-compose.prod.yml restart backend`, options);
      await new Promise(resolve => setTimeout(resolve, 5000));
      
      const retryKeyCheck = await execSshCommand(`cd /home/${dockerUser}/dapp && sudo docker compose -f docker-compose.prod.yml exec -T backend ls -la /app/ssl/keys/`, options);
      if (retryKeyCheck.code === 0 && retryKeyCheck.stdout.includes('full_db_encryption.key')) {
        log.success('–ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞');
      } else {
        log.error('–ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞');
      }
    }
    
    // 17. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    log.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...');
    const containersResult = await execSshCommand('sudo docker ps --format "table {{.Names}}\\t{{.Status}}"', options);
    log.info('–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:\\n' + containersResult.stdout);
    
    log.success('VDS –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ WebSocket
    sendWebSocketStatus(true, `VDS ${domain} —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞`);
    sendWebSocketLog('success', `üéâ VDS –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: https://${domain}`, 'complete', 100);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ VDS
    vdsState = {
      configured: true,
      domain: domain,
      vdsIp: vdsIp
    };
    
    res.json({
      success: true,
      message: 'VDS –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ',
      domain: domain,
      vdsIp: vdsIp,
      applicationUrl: `https://${domain}`,
      systemInfo: systemInfo,
      nextSteps: [
        '‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã',
        '‚úÖ VDS –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ',
        '‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–ª—É—á–µ–Ω',
        '‚úÖ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã',
        '‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: https://' + domain
      ]
    });
    
  } catch (error) {
    log.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VDS: ' + error.message);
    res.status(500).json({
      success: false,
      message: error.message
    });
  }
});

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ VDS
app.post('/vds/diagnostics', logRequest, async (req, res) => {
  try {
    const { 
      vdsIp, 
      sshHost,
      sshPort = 22,
      sshConnectUser,
      sshConnectPassword
    } = req.body;
    
    if (!vdsIp || !sshConnectUser || !sshConnectPassword) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: vdsIp, sshConnectUser, sshConnectPassword'
      });
    }
    
    log.info(`–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ VDS: ${vdsIp}`);
    
    const options = {
      vdsIp,
      sshHost,
      sshPort,
      sshConnectUser,
      sshConnectPassword
    };
    
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
    const systemStatus = await execSshCommand('uptime && free -h && df -h', options);
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    const dockerStatus = await execSshCommand('docker ps --format "table {{.Names}}\\t{{.Status}}\\t{{.Ports}}"', options);
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    const portsStatus = await execSshCommand('netstat -tlnp | grep -E ":(80|443|8000|9000|5432|11434|8001)"', options);
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker nginx –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const nginxStatus = await execSshCommand('docker ps --filter "name=dapp-frontend-nginx" --format "table {{.Names}}\\t{{.Status}}\\t{{.Ports}}" || echo "Docker nginx –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"', options);
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ fail2ban —Å—Ç–∞—Ç—É—Å–∞
    const fail2banStatus = await execSshCommand('fail2ban-client status sshd', options);
    
    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    const sslStatus = await execSshCommand('certbot certificates', options);
    
    // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
    const errorLogs = await execSshCommand('journalctl -u docker --since "1 hour ago" --no-pager | tail -20', options);
    
    res.json({
      success: true,
      message: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ VDS –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      vdsIp: vdsIp,
      diagnostics: {
        system: systemStatus.stdout,
        docker: dockerStatus.stdout,
        ports: portsStatus.stdout,
        nginx: nginxStatus.stdout,
        fail2ban: fail2banStatus.stdout,
        ssl: sslStatus.stdout,
        errors: errorLogs.stdout
      },
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    log.error('–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ VDS: ' + error.message);
    res.status(500).json({
      success: false,
      message: error.message
    });
  }
});

// Graceful shutdown

process.on('SIGTERM', async () => {
  log.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  if (server) {
    server.close(() => {
      log.info('–°–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
      process.exit(0);
    });
  } else {
    process.exit(0);
  }
});

process.on('SIGINT', async () => {
  log.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  if (server) {
    server.close(() => {
      log.info('–°–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
      process.exit(0);
    });
  } else {
    process.exit(0);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  log.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ' + error.message);
});

process.on('unhandledRejection', (reason, promise) => {
  log.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞: ' + reason);
});

// WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
wss.on('connection', (ws) => {
  log.info(`üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ`);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –Ω–æ–≤–æ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é
  ws.send(JSON.stringify({
    type: 'webssh_status',
    connected: vdsState.configured,
    status: vdsState.configured ? 'connected' : 'disconnected',
    message: vdsState.configured ? `VDS ${vdsState.domain} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞` : 'VDS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞',
    timestamp: new Date().toISOString()
  }));
  
  ws.on('close', () => {
    log.info(`üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ`);
  });
  
  ws.on('error', (error) => {
    log.error('WebSocket –æ—à–∏–±–∫–∞:', error);
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  try {
    log.info('üöÄ –ó–∞–ø—É—Å–∫ WebSSH Agent...');
    
    server.listen(PORT, '0.0.0.0', () => {
      log.info(`üöÄ WebSSH Agent –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      log.success('üõ°Ô∏è –ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
      log.info('üîå WebSocket —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –¥–ª—è real-time –ª–æ–≥–æ–≤');
    });
  } catch (error) {
    log.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

startServer();
